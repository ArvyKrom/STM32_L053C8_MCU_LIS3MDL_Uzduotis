
STM32_L053C8_MCU_LIS3MDL_Uzduotis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b30  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c54  08003c54  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c54  08003c54  00005010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c54  08003c54  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003c5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000010  08003c6c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08003c6c  00005174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd80  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216a  00000000  00000000  00010db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00012f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f7  00000000  00000000  00013b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014136  00000000  00000000  000143f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e451  00000000  00000000  0002852d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c22d  00000000  00000000  0003697e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2bab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f0  00000000  00000000  000b2bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b54e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bd8 	.word	0x08003bd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003bd8 	.word	0x08003bd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	b09d      	sub	sp, #116	@ 0x74
 8000224:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */

	LIS3MDL_Device lis3mdl_devices[1];
	lis3mdl_initialize_device_struct(&lis3mdl_devices[0], &hspi2, SS2_GPIO_Port, SS2_Pin);
 8000226:	2380      	movs	r3, #128	@ 0x80
 8000228:	015b      	lsls	r3, r3, #5
 800022a:	4a26      	ldr	r2, [pc, #152]	@ (80002c4 <main+0xa4>)
 800022c:	4926      	ldr	r1, [pc, #152]	@ (80002c8 <main+0xa8>)
 800022e:	2424      	movs	r4, #36	@ 0x24
 8000230:	1938      	adds	r0, r7, r4
 8000232:	f003 f99b 	bl	800356c <lis3mdl_initialize_device_struct>

	LIS3MDL_Init_Params init_params;
	lis3mdl_set_default_params(&init_params);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	0018      	movs	r0, r3
 800023a:	f003 fa02 	bl	8003642 <lis3mdl_set_default_params>
	// Init parameters can be tweaked manually
	// For example init_params.full_scale = LIS3MDL_FULL_SCALE_4_GAUSS
	// All configurable options available under lis3mdl_init_params.h
	init_params.offset_x = 0xFFFF;
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2201      	movs	r2, #1
 8000242:	4252      	negs	r2, r2
 8000244:	801a      	strh	r2, [r3, #0]

	lis3mdl_setup_config_registers(&lis3mdl_devices[0], init_params);
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	1938      	adds	r0, r7, r4
 800024a:	466a      	mov	r2, sp
 800024c:	0011      	movs	r1, r2
 800024e:	001a      	movs	r2, r3
 8000250:	320c      	adds	r2, #12
 8000252:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000254:	c170      	stmia	r1!, {r4, r5, r6}
 8000256:	ca30      	ldmia	r2!, {r4, r5}
 8000258:	c130      	stmia	r1!, {r4, r5}
 800025a:	6819      	ldr	r1, [r3, #0]
 800025c:	685a      	ldr	r2, [r3, #4]
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	f003 f9c1 	bl	80035e6 <lis3mdl_setup_config_registers>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 fb3c 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000268:	f000 f836 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026c:	f000 f942 	bl	80004f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000270:	f000 f922 	bl	80004b8 <MX_DMA_Init>
  MX_SPI2_Init();
 8000274:	f000 f8ae 	bl	80003d4 <MX_SPI2_Init>
  MX_TIM6_Init();
 8000278:	f000 f8e4 	bl	8000444 <MX_TIM6_Init>
  MX_IWDG_Init();
 800027c:	f000 f88c 	bl	8000398 <MX_IWDG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <main+0xac>)
 8000282:	0018      	movs	r0, r3
 8000284:	f001 f862 	bl	800134c <HAL_IWDG_Refresh>
	if(lis3mdl_process(lis3mdl_devices, 1, &spi_cplt_flag) == LIS3MDL_PROCESS_ERROR){
 8000288:	4a11      	ldr	r2, [pc, #68]	@ (80002d0 <main+0xb0>)
 800028a:	2324      	movs	r3, #36	@ 0x24
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2101      	movs	r1, #1
 8000290:	0018      	movs	r0, r3
 8000292:	f002 ff41 	bl	8003118 <lis3mdl_process>
 8000296:	0003      	movs	r3, r0
 8000298:	2b03      	cmp	r3, #3
 800029a:	d101      	bne.n	80002a0 <main+0x80>
		int a = 6;
 800029c:	2306      	movs	r3, #6
 800029e:	657b      	str	r3, [r7, #84]	@ 0x54
	}
	if(lis3mdl_devices[0].state == LIS3MDL_IDLE){
 80002a0:	2324      	movs	r3, #36	@ 0x24
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	7bdb      	ldrb	r3, [r3, #15]
 80002a6:	2b04      	cmp	r3, #4
 80002a8:	d101      	bne.n	80002ae <main+0x8e>
		int ret = 5;
 80002aa:	2305      	movs	r3, #5
 80002ac:	653b      	str	r3, [r7, #80]	@ 0x50
	}
	lis3mdl_read_reg(lis3mdl_devices, 1, 0, reg_to_read, 2);
 80002ae:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <main+0xb4>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2224      	movs	r2, #36	@ 0x24
 80002b4:	18b8      	adds	r0, r7, r2
 80002b6:	2202      	movs	r2, #2
 80002b8:	9200      	str	r2, [sp, #0]
 80002ba:	2200      	movs	r2, #0
 80002bc:	2101      	movs	r1, #1
 80002be:	f003 f8bd 	bl	800343c <lis3mdl_read_reg>
	HAL_IWDG_Refresh(&hiwdg);
 80002c2:	e7dd      	b.n	8000280 <main+0x60>
 80002c4:	50000400 	.word	0x50000400
 80002c8:	2000003c 	.word	0x2000003c
 80002cc:	2000002c 	.word	0x2000002c
 80002d0:	20000164 	.word	0x20000164
 80002d4:	20000000 	.word	0x20000000

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b095      	sub	sp, #84	@ 0x54
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	2418      	movs	r4, #24
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2338      	movs	r3, #56	@ 0x38
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f003 fc3f 	bl	8003b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2314      	movs	r3, #20
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f003 fc38 	bl	8003b6c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002fc:	4b24      	ldr	r3, [pc, #144]	@ (8000390 <SystemClock_Config+0xb8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a24      	ldr	r2, [pc, #144]	@ (8000394 <SystemClock_Config+0xbc>)
 8000302:	401a      	ands	r2, r3
 8000304:	4b22      	ldr	r3, [pc, #136]	@ (8000390 <SystemClock_Config+0xb8>)
 8000306:	2180      	movs	r1, #128	@ 0x80
 8000308:	0109      	lsls	r1, r1, #4
 800030a:	430a      	orrs	r2, r1
 800030c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800030e:	0021      	movs	r1, r4
 8000310:	187b      	adds	r3, r7, r1
 8000312:	220a      	movs	r2, #10
 8000314:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2201      	movs	r2, #1
 800031a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2210      	movs	r2, #16
 8000320:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2201      	movs	r2, #1
 8000326:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2202      	movs	r2, #2
 800032c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2200      	movs	r2, #0
 8000332:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2280      	movs	r2, #128	@ 0x80
 8000338:	02d2      	lsls	r2, r2, #11
 800033a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800033c:	187b      	adds	r3, r7, r1
 800033e:	2280      	movs	r2, #128	@ 0x80
 8000340:	03d2      	lsls	r2, r2, #15
 8000342:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	187b      	adds	r3, r7, r1
 8000346:	0018      	movs	r0, r3
 8000348:	f001 f880 	bl	800144c <HAL_RCC_OscConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000350:	f000 f95a 	bl	8000608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	220f      	movs	r2, #15
 8000358:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2203      	movs	r2, #3
 800035e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	22e0      	movs	r2, #224	@ 0xe0
 800036a:	00d2      	lsls	r2, r2, #3
 800036c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2101      	movs	r1, #1
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fc2b 	bl	8001bd4 <HAL_RCC_ClockConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000382:	f000 f941 	bl	8000608 <Error_Handler>
  }
}
 8000386:	46c0      	nop			@ (mov r8, r8)
 8000388:	46bd      	mov	sp, r7
 800038a:	b015      	add	sp, #84	@ 0x54
 800038c:	bd90      	pop	{r4, r7, pc}
 800038e:	46c0      	nop			@ (mov r8, r8)
 8000390:	40007000 	.word	0x40007000
 8000394:	ffffe7ff 	.word	0xffffe7ff

08000398 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800039c:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <MX_IWDG_Init+0x34>)
 800039e:	4a0c      	ldr	r2, [pc, #48]	@ (80003d0 <MX_IWDG_Init+0x38>)
 80003a0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <MX_IWDG_Init+0x34>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 100;
 80003a8:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <MX_IWDG_Init+0x34>)
 80003aa:	2264      	movs	r2, #100	@ 0x64
 80003ac:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 100;
 80003ae:	4b07      	ldr	r3, [pc, #28]	@ (80003cc <MX_IWDG_Init+0x34>)
 80003b0:	2264      	movs	r2, #100	@ 0x64
 80003b2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <MX_IWDG_Init+0x34>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 ff76 	bl	80012a8 <HAL_IWDG_Init>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80003c0:	f000 f922 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003c4:	46c0      	nop			@ (mov r8, r8)
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	40003000 	.word	0x40003000

080003d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003d8:	4b18      	ldr	r3, [pc, #96]	@ (800043c <MX_SPI2_Init+0x68>)
 80003da:	4a19      	ldr	r2, [pc, #100]	@ (8000440 <MX_SPI2_Init+0x6c>)
 80003dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003de:	4b17      	ldr	r3, [pc, #92]	@ (800043c <MX_SPI2_Init+0x68>)
 80003e0:	2282      	movs	r2, #130	@ 0x82
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <MX_SPI2_Init+0x68>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MX_SPI2_Init+0x68>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_SPI2_Init+0x68>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f8:	4b10      	ldr	r3, [pc, #64]	@ (800043c <MX_SPI2_Init+0x68>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_SPI2_Init+0x68>)
 8000400:	2280      	movs	r2, #128	@ 0x80
 8000402:	0092      	lsls	r2, r2, #2
 8000404:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <MX_SPI2_Init+0x68>)
 8000408:	2238      	movs	r2, #56	@ 0x38
 800040a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800040c:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_SPI2_Init+0x68>)
 800040e:	2200      	movs	r2, #0
 8000410:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_SPI2_Init+0x68>)
 8000414:	2200      	movs	r2, #0
 8000416:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000418:	4b08      	ldr	r3, [pc, #32]	@ (800043c <MX_SPI2_Init+0x68>)
 800041a:	2200      	movs	r2, #0
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800041e:	4b07      	ldr	r3, [pc, #28]	@ (800043c <MX_SPI2_Init+0x68>)
 8000420:	2207      	movs	r2, #7
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <MX_SPI2_Init+0x68>)
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fda2 	bl	8001f70 <HAL_SPI_Init>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000430:	f000 f8ea 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	2000003c 	.word	0x2000003c
 8000440:	40003800 	.word	0x40003800

08000444 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044a:	003b      	movs	r3, r7
 800044c:	0018      	movs	r0, r3
 800044e:	2308      	movs	r3, #8
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f003 fb8a 	bl	8003b6c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000458:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 800045a:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <MX_TIM6_Init+0x70>)
 800045c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32;
 800045e:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 8000460:	2220      	movs	r2, #32
 8000462:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000464:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 800046c:	2263      	movs	r2, #99	@ 0x63
 800046e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 8000472:	2280      	movs	r2, #128	@ 0x80
 8000474:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 8000478:	0018      	movs	r0, r3
 800047a:	f002 fc67 	bl	8002d4c <HAL_TIM_Base_Init>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000482:	f000 f8c1 	bl	8000608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000486:	003b      	movs	r3, r7
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800048c:	003b      	movs	r3, r7
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000492:	003a      	movs	r2, r7
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_TIM6_Init+0x6c>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f002 fde5 	bl	8003068 <HAL_TIMEx_MasterConfigSynchronization>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80004a2:	f000 f8b1 	bl	8000608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	20000124 	.word	0x20000124
 80004b4:	40001000 	.word	0x40001000

080004b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004c4:	2101      	movs	r1, #1
 80004c6:	430a      	orrs	r2, r1
 80004c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_DMA_Init+0x38>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ce:	2201      	movs	r2, #1
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	200b      	movs	r0, #11
 80004dc:	f000 fb1c 	bl	8000b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80004e0:	200b      	movs	r0, #11
 80004e2:	f000 fb2e 	bl	8000b42 <HAL_NVIC_EnableIRQ>

}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b089      	sub	sp, #36	@ 0x24
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	240c      	movs	r4, #12
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f003 fb31 	bl	8003b6c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b29      	ldr	r3, [pc, #164]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 800050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050e:	4b28      	ldr	r3, [pc, #160]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000510:	2102      	movs	r1, #2
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000516:	4b26      	ldr	r3, [pc, #152]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	2202      	movs	r2, #2
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b23      	ldr	r3, [pc, #140]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000526:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800052e:	4b20      	ldr	r3, [pc, #128]	@ (80005b0 <MX_GPIO_Init+0xbc>)
 8000530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
 800053a:	2380      	movs	r3, #128	@ 0x80
 800053c:	015b      	lsls	r3, r3, #5
 800053e:	481d      	ldr	r0, [pc, #116]	@ (80005b4 <MX_GPIO_Init+0xc0>)
 8000540:	2201      	movs	r2, #1
 8000542:	0019      	movs	r1, r3
 8000544:	f000 fe92 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000548:	23f0      	movs	r3, #240	@ 0xf0
 800054a:	0119      	lsls	r1, r3, #4
 800054c:	23a0      	movs	r3, #160	@ 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2200      	movs	r2, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fe8a 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS2_Pin */
  GPIO_InitStruct.Pin = SS2_Pin;
 8000558:	193b      	adds	r3, r7, r4
 800055a:	2280      	movs	r2, #128	@ 0x80
 800055c:	0152      	lsls	r2, r2, #5
 800055e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	193b      	adds	r3, r7, r4
 8000562:	2201      	movs	r2, #1
 8000564:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 8000572:	193b      	adds	r3, r7, r4
 8000574:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <MX_GPIO_Init+0xc0>)
 8000576:	0019      	movs	r1, r3
 8000578:	0010      	movs	r0, r2
 800057a:	f000 fd01 	bl	8000f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800057e:	0021      	movs	r1, r4
 8000580:	187b      	adds	r3, r7, r1
 8000582:	22f0      	movs	r2, #240	@ 0xf0
 8000584:	0112      	lsls	r2, r2, #4
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2201      	movs	r2, #1
 800058c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059a:	187a      	adds	r2, r7, r1
 800059c:	23a0      	movs	r3, #160	@ 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f000 fcec 	bl	8000f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	b009      	add	sp, #36	@ 0x24
 80005ae:	bd90      	pop	{r4, r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	50000400 	.word	0x50000400

080005b8 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2){
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a04      	ldr	r2, [pc, #16]	@ (80005d8 <HAL_SPI_TxCpltCallback+0x20>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d102      	bne.n	80005d0 <HAL_SPI_TxCpltCallback+0x18>
		spi_cplt_flag = 1;
 80005ca:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <HAL_SPI_TxCpltCallback+0x24>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
	}
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40003800 	.word	0x40003800
 80005dc:	20000164 	.word	0x20000164

080005e0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <HAL_SPI_RxCpltCallback+0x20>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d102      	bne.n	80005f8 <HAL_SPI_RxCpltCallback+0x18>
		spi_cplt_flag = 1;
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <HAL_SPI_RxCpltCallback+0x24>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
	}
}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40003800 	.word	0x40003800
 8000604:	20000164 	.word	0x20000164

08000608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	e7fd      	b.n	8000610 <Error_Handler+0x8>

08000614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800061a:	003b      	movs	r3, r7
 800061c:	0018      	movs	r0, r3
 800061e:	2308      	movs	r3, #8
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f003 faa2 	bl	8003b6c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_MspInit+0x50>)
 800062a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800062c:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <HAL_MspInit+0x50>)
 800062e:	2101      	movs	r1, #1
 8000630:	430a      	orrs	r2, r1
 8000632:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <HAL_MspInit+0x50>)
 8000636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <HAL_MspInit+0x50>)
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	0549      	lsls	r1, r1, #21
 800063e:	430a      	orrs	r2, r1
 8000640:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000648:	003b      	movs	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 800064e:	003b      	movs	r3, r7
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fe8b 	bl	800136c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000656:	f000 feeb 	bl	8001430 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	@ 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	240c      	movs	r4, #12
 8000672:	193b      	adds	r3, r7, r4
 8000674:	0018      	movs	r0, r3
 8000676:	2314      	movs	r3, #20
 8000678:	001a      	movs	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	f003 fa76 	bl	8003b6c <memset>
  if(hspi->Instance==SPI2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a45      	ldr	r2, [pc, #276]	@ (800079c <HAL_SPI_MspInit+0x134>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d000      	beq.n	800068c <HAL_SPI_MspInit+0x24>
 800068a:	e083      	b.n	8000794 <HAL_SPI_MspInit+0x12c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800068c:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <HAL_SPI_MspInit+0x138>)
 800068e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <HAL_SPI_MspInit+0x138>)
 8000692:	2180      	movs	r1, #128	@ 0x80
 8000694:	01c9      	lsls	r1, r1, #7
 8000696:	430a      	orrs	r2, r1
 8000698:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b41      	ldr	r3, [pc, #260]	@ (80007a0 <HAL_SPI_MspInit+0x138>)
 800069c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800069e:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <HAL_SPI_MspInit+0x138>)
 80006a0:	2102      	movs	r1, #2
 80006a2:	430a      	orrs	r2, r1
 80006a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006a6:	4b3e      	ldr	r3, [pc, #248]	@ (80007a0 <HAL_SPI_MspInit+0x138>)
 80006a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006aa:	2202      	movs	r2, #2
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	22e0      	movs	r2, #224	@ 0xe0
 80006b6:	0212      	lsls	r2, r2, #8
 80006b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2202      	movs	r2, #2
 80006c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2203      	movs	r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	4a33      	ldr	r2, [pc, #204]	@ (80007a4 <HAL_SPI_MspInit+0x13c>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f000 fc50 	bl	8000f80 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80006e0:	4b31      	ldr	r3, [pc, #196]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 80006e2:	4a32      	ldr	r2, [pc, #200]	@ (80007ac <HAL_SPI_MspInit+0x144>)
 80006e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80006e6:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ec:	4b2e      	ldr	r3, [pc, #184]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006f8:	4b2b      	ldr	r3, [pc, #172]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000710:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000716:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fa2f 	bl	8000b7c <HAL_DMA_Init>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d001      	beq.n	8000726 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000722:	f7ff ff71 	bl	8000608 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 800072a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <HAL_SPI_MspInit+0x140>)
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000734:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <HAL_SPI_MspInit+0x14c>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 800073a:	2202      	movs	r2, #2
 800073c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000740:	2210      	movs	r2, #16
 8000742:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 800074c:	2280      	movs	r2, #128	@ 0x80
 800074e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000768:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fa06 	bl	8000b7c <HAL_DMA_Init>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000774:	f7ff ff48 	bl	8000608 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a0d      	ldr	r2, [pc, #52]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 800077c:	649a      	str	r2, [r3, #72]	@ 0x48
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <HAL_SPI_MspInit+0x148>)
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	201a      	movs	r0, #26
 800078a:	f000 f9c5 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800078e:	201a      	movs	r0, #26
 8000790:	f000 f9d7 	bl	8000b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b009      	add	sp, #36	@ 0x24
 800079a:	bd90      	pop	{r4, r7, pc}
 800079c:	40003800 	.word	0x40003800
 80007a0:	40021000 	.word	0x40021000
 80007a4:	50000400 	.word	0x50000400
 80007a8:	20000094 	.word	0x20000094
 80007ac:	40020044 	.word	0x40020044
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	40020058 	.word	0x40020058

080007b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0a      	ldr	r2, [pc, #40]	@ (80007f0 <HAL_TIM_Base_MspInit+0x38>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d10d      	bne.n	80007e6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_TIM_Base_MspInit+0x3c>)
 80007cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_TIM_Base_MspInit+0x3c>)
 80007d0:	2110      	movs	r1, #16
 80007d2:	430a      	orrs	r2, r1
 80007d4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2011      	movs	r0, #17
 80007dc:	f000 f99c 	bl	8000b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007e0:	2011      	movs	r0, #17
 80007e2:	f000 f9ae 	bl	8000b42 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	40001000 	.word	0x40001000
 80007f4:	40021000 	.word	0x40021000

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	e7fd      	b.n	80007fc <NMI_Handler+0x4>

08000800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e7fd      	b.n	8000804 <HardFault_Handler+0x4>

08000808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f8b2 	bl	8000988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fac7 	bl	8000dc6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 800083a:	0018      	movs	r0, r3
 800083c:	f000 fac3 	bl	8000dc6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	20000094 	.word	0x20000094
 800084c:	200000dc 	.word	0x200000dc

08000850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <TIM6_DAC_IRQHandler+0x14>)
 8000856:	0018      	movs	r0, r3
 8000858:	f002 fab8 	bl	8002dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000124 	.word	0x20000124

08000868 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <SPI2_IRQHandler+0x14>)
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fe9a 	bl	80025a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	2000003c 	.word	0x2000003c

08000880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	@ (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490e      	ldr	r1, [pc, #56]	@ (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0b      	ldr	r2, [pc, #44]	@ (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0b      	ldr	r4, [pc, #44]	@ (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008b6:	f7ff ffe3 	bl	8000880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ba:	f003 f95f 	bl	8003b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008be:	f7ff fcaf 	bl	8000220 <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008d0:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 80008d4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008d8:	20000174 	.word	0x20000174

080008dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_COMP_IRQHandler>
	...

080008e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e6:	1dfb      	adds	r3, r7, #7
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008ec:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <HAL_Init+0x3c>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <HAL_Init+0x3c>)
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	430a      	orrs	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f811 	bl	8000920 <HAL_InitTick>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d003      	beq.n	800090a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e001      	b.n	800090e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800090a:	f7ff fe83 	bl	8000614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b002      	add	sp, #8
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	40022000 	.word	0x40022000

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_InitTick+0x5c>)
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <HAL_InitTick+0x60>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0019      	movs	r1, r3
 8000932:	23fa      	movs	r3, #250	@ 0xfa
 8000934:	0098      	lsls	r0, r3, #2
 8000936:	f7ff fbe7 	bl	8000108 <__udivsi3>
 800093a:	0003      	movs	r3, r0
 800093c:	0019      	movs	r1, r3
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff fbe2 	bl	8000108 <__udivsi3>
 8000944:	0003      	movs	r3, r0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f90b 	bl	8000b62 <HAL_SYSTICK_Config>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	e00f      	b.n	8000974 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d80b      	bhi.n	8000972 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2301      	movs	r3, #1
 800095e:	425b      	negs	r3, r3
 8000960:	2200      	movs	r2, #0
 8000962:	0018      	movs	r0, r3
 8000964:	f000 f8d8 	bl	8000b18 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_InitTick+0x64>)
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096e:	2300      	movs	r3, #0
 8000970:	e000      	b.n	8000974 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b003      	add	sp, #12
 800097a:	bd90      	pop	{r4, r7, pc}
 800097c:	20000004 	.word	0x20000004
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_IncTick+0x1c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	001a      	movs	r2, r3
 8000992:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_IncTick+0x20>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	18d2      	adds	r2, r2, r3
 8000998:	4b03      	ldr	r3, [pc, #12]	@ (80009a8 <HAL_IncTick+0x20>)
 800099a:	601a      	str	r2, [r3, #0]
}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	2000000c 	.word	0x2000000c
 80009a8:	20000168 	.word	0x20000168

080009ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b02      	ldr	r3, [pc, #8]	@ (80009bc <HAL_GetTick+0x10>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	0018      	movs	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	20000168 	.word	0x20000168

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	0002      	movs	r2, r0
 80009c8:	1dfb      	adds	r3, r7, #7
 80009ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80009d2:	d809      	bhi.n	80009e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	001a      	movs	r2, r3
 80009da:	231f      	movs	r3, #31
 80009dc:	401a      	ands	r2, r3
 80009de:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <__NVIC_EnableIRQ+0x30>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	4091      	lsls	r1, r2
 80009e4:	000a      	movs	r2, r1
 80009e6:	601a      	str	r2, [r3, #0]
  }
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	0002      	movs	r2, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a08:	d828      	bhi.n	8000a5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac8 <__NVIC_SetPriority+0xd4>)
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	33c0      	adds	r3, #192	@ 0xc0
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	589b      	ldr	r3, [r3, r2]
 8000a1a:	1dfa      	adds	r2, r7, #7
 8000a1c:	7812      	ldrb	r2, [r2, #0]
 8000a1e:	0011      	movs	r1, r2
 8000a20:	2203      	movs	r2, #3
 8000a22:	400a      	ands	r2, r1
 8000a24:	00d2      	lsls	r2, r2, #3
 8000a26:	21ff      	movs	r1, #255	@ 0xff
 8000a28:	4091      	lsls	r1, r2
 8000a2a:	000a      	movs	r2, r1
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	401a      	ands	r2, r3
 8000a30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	019b      	lsls	r3, r3, #6
 8000a36:	22ff      	movs	r2, #255	@ 0xff
 8000a38:	401a      	ands	r2, r3
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2303      	movs	r3, #3
 8000a42:	4003      	ands	r3, r0
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a48:	481f      	ldr	r0, [pc, #124]	@ (8000ac8 <__NVIC_SetPriority+0xd4>)
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b25b      	sxtb	r3, r3
 8000a50:	089b      	lsrs	r3, r3, #2
 8000a52:	430a      	orrs	r2, r1
 8000a54:	33c0      	adds	r3, #192	@ 0xc0
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a5a:	e031      	b.n	8000ac0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000acc <__NVIC_SetPriority+0xd8>)
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	0019      	movs	r1, r3
 8000a64:	230f      	movs	r3, #15
 8000a66:	400b      	ands	r3, r1
 8000a68:	3b08      	subs	r3, #8
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	3306      	adds	r3, #6
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	3304      	adds	r3, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1dfa      	adds	r2, r7, #7
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	400a      	ands	r2, r1
 8000a80:	00d2      	lsls	r2, r2, #3
 8000a82:	21ff      	movs	r1, #255	@ 0xff
 8000a84:	4091      	lsls	r1, r2
 8000a86:	000a      	movs	r2, r1
 8000a88:	43d2      	mvns	r2, r2
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	019b      	lsls	r3, r3, #6
 8000a92:	22ff      	movs	r2, #255	@ 0xff
 8000a94:	401a      	ands	r2, r3
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	4003      	ands	r3, r0
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa4:	4809      	ldr	r0, [pc, #36]	@ (8000acc <__NVIC_SetPriority+0xd8>)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	001c      	movs	r4, r3
 8000aac:	230f      	movs	r3, #15
 8000aae:	4023      	ands	r3, r4
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	3306      	adds	r3, #6
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	18c3      	adds	r3, r0, r3
 8000abc:	3304      	adds	r3, #4
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b003      	add	sp, #12
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1e5a      	subs	r2, r3, #1
 8000adc:	2380      	movs	r3, #128	@ 0x80
 8000ade:	045b      	lsls	r3, r3, #17
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d301      	bcc.n	8000ae8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e010      	b.n	8000b0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <SysTick_Config+0x44>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	3a01      	subs	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af0:	2301      	movs	r3, #1
 8000af2:	425b      	negs	r3, r3
 8000af4:	2103      	movs	r1, #3
 8000af6:	0018      	movs	r0, r3
 8000af8:	f7ff ff7c 	bl	80009f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SysTick_Config+0x44>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b02:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <SysTick_Config+0x44>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	e000e010 	.word	0xe000e010

08000b18 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	210f      	movs	r1, #15
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	1c02      	adds	r2, r0, #0
 8000b28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff ff5d 	bl	80009f4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b004      	add	sp, #16
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	0002      	movs	r2, r0
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b25b      	sxtb	r3, r3
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff ff33 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff ffaf 	bl	8000ad0 <SysTick_Config>
 8000b72:	0003      	movs	r3, r0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e061      	b.n	8000c52 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a32      	ldr	r2, [pc, #200]	@ (8000c5c <HAL_DMA_Init+0xe0>)
 8000b94:	4694      	mov	ip, r2
 8000b96:	4463      	add	r3, ip
 8000b98:	2114      	movs	r1, #20
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fab4 	bl	8000108 <__udivsi3>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	009a      	lsls	r2, r3, #2
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a2d      	ldr	r2, [pc, #180]	@ (8000c60 <HAL_DMA_Init+0xe4>)
 8000bac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2225      	movs	r2, #37	@ 0x25
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <HAL_DMA_Init+0xe8>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	01db      	lsls	r3, r3, #7
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d018      	beq.n	8000c3a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_DMA_Init+0xec>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c10:	211c      	movs	r1, #28
 8000c12:	400b      	ands	r3, r1
 8000c14:	210f      	movs	r1, #15
 8000c16:	4099      	lsls	r1, r3
 8000c18:	000b      	movs	r3, r1
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_DMA_Init+0xec>)
 8000c1e:	400a      	ands	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_DMA_Init+0xec>)
 8000c24:	6819      	ldr	r1, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	201c      	movs	r0, #28
 8000c30:	4003      	ands	r3, r0
 8000c32:	409a      	lsls	r2, r3
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <HAL_DMA_Init+0xec>)
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2225      	movs	r2, #37	@ 0x25
 8000c44:	2101      	movs	r1, #1
 8000c46:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2224      	movs	r2, #36	@ 0x24
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	bffdfff8 	.word	0xbffdfff8
 8000c60:	40020000 	.word	0x40020000
 8000c64:	ffff800f 	.word	0xffff800f
 8000c68:	400200a8 	.word	0x400200a8

08000c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7a:	2317      	movs	r3, #23
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2224      	movs	r2, #36	@ 0x24
 8000c86:	5c9b      	ldrb	r3, [r3, r2]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_DMA_Start_IT+0x24>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e04f      	b.n	8000d30 <HAL_DMA_Start_IT+0xc4>
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	2101      	movs	r1, #1
 8000c96:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2225      	movs	r2, #37	@ 0x25
 8000c9c:	5c9b      	ldrb	r3, [r3, r2]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d13a      	bne.n	8000d1a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	2225      	movs	r2, #37	@ 0x25
 8000ca8:	2102      	movs	r1, #2
 8000caa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	438a      	bics	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	68b9      	ldr	r1, [r7, #8]
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f000 f92a 	bl	8000f22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	210e      	movs	r1, #14
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00f      	b.n	8000d08 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	438a      	bics	r2, r1
 8000cf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	210a      	movs	r1, #10
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2101      	movs	r1, #1
 8000d14:	430a      	orrs	r2, r1
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	e007      	b.n	8000d2a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2224      	movs	r2, #36	@ 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d22:	2317      	movs	r3, #23
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	2202      	movs	r2, #2
 8000d28:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000d2a:	2317      	movs	r3, #23
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	781b      	ldrb	r3, [r3, #0]
}
 8000d30:	0018      	movs	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b006      	add	sp, #24
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d40:	210f      	movs	r1, #15
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2225      	movs	r2, #37	@ 0x25
 8000d4c:	5c9b      	ldrb	r3, [r3, r2]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d006      	beq.n	8000d62 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2204      	movs	r2, #4
 8000d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	e02a      	b.n	8000db8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	210e      	movs	r1, #14
 8000d6e:	438a      	bics	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	438a      	bics	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	221c      	movs	r2, #28
 8000d88:	401a      	ands	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2225      	movs	r2, #37	@ 0x25
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2224      	movs	r2, #36	@ 0x24
 8000da2:	2100      	movs	r1, #0
 8000da4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d004      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	0010      	movs	r0, r2
 8000db6:	4798      	blx	r3
    }
  }
  return status;
 8000db8:	230f      	movs	r3, #15
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	781b      	ldrb	r3, [r3, #0]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	221c      	movs	r2, #28
 8000de4:	4013      	ands	r3, r2
 8000de6:	2204      	movs	r2, #4
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	4013      	ands	r3, r2
 8000df0:	d026      	beq.n	8000e40 <HAL_DMA_IRQHandler+0x7a>
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	2204      	movs	r2, #4
 8000df6:	4013      	ands	r3, r2
 8000df8:	d022      	beq.n	8000e40 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2220      	movs	r2, #32
 8000e02:	4013      	ands	r3, r2
 8000e04:	d107      	bne.n	8000e16 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2104      	movs	r1, #4
 8000e12:	438a      	bics	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	221c      	movs	r2, #28
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	2104      	movs	r1, #4
 8000e24:	4091      	lsls	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d100      	bne.n	8000e34 <HAL_DMA_IRQHandler+0x6e>
 8000e32:	e071      	b.n	8000f18 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000e3e:	e06b      	b.n	8000f18 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e44:	221c      	movs	r2, #28
 8000e46:	4013      	ands	r3, r2
 8000e48:	2202      	movs	r2, #2
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	4013      	ands	r3, r2
 8000e52:	d02d      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0xea>
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d029      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2220      	movs	r2, #32
 8000e64:	4013      	ands	r3, r2
 8000e66:	d10b      	bne.n	8000e80 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	210a      	movs	r1, #10
 8000e74:	438a      	bics	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2225      	movs	r2, #37	@ 0x25
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e84:	221c      	movs	r2, #28
 8000e86:	401a      	ands	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4091      	lsls	r1, r2
 8000e90:	000a      	movs	r2, r1
 8000e92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2224      	movs	r2, #36	@ 0x24
 8000e98:	2100      	movs	r1, #0
 8000e9a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d039      	beq.n	8000f18 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	0010      	movs	r0, r2
 8000eac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000eae:	e033      	b.n	8000f18 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb4:	221c      	movs	r2, #28
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	2208      	movs	r2, #8
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d02a      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x154>
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d026      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	210e      	movs	r1, #14
 8000ed8:	438a      	bics	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee0:	221c      	movs	r2, #28
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4091      	lsls	r1, r2
 8000eec:	000a      	movs	r2, r1
 8000eee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2225      	movs	r2, #37	@ 0x25
 8000efa:	2101      	movs	r1, #1
 8000efc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2224      	movs	r2, #36	@ 0x24
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d005      	beq.n	8000f1a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	0010      	movs	r0, r2
 8000f16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46c0      	nop			@ (mov r8, r8)
}
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f34:	221c      	movs	r2, #28
 8000f36:	401a      	ands	r2, r3
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4091      	lsls	r1, r2
 8000f40:	000a      	movs	r2, r1
 8000f42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b10      	cmp	r3, #16
 8000f52:	d108      	bne.n	8000f66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f64:	e007      	b.n	8000f76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	60da      	str	r2, [r3, #12]
}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f96:	e14f      	b.n	8001238 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	000a      	movs	r2, r1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <HAL_GPIO_Init+0x30>
 8000fae:	e140      	b.n	8001232 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d005      	beq.n	8000fc8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d130      	bne.n	800102a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68da      	ldr	r2, [r3, #12]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	409a      	lsls	r2, r3
 8000fea:	0013      	movs	r3, r2
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffe:	2201      	movs	r2, #1
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	091b      	lsrs	r3, r3, #4
 8001014:	2201      	movs	r2, #1
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	4013      	ands	r3, r2
 8001032:	2b03      	cmp	r3, #3
 8001034:	d017      	beq.n	8001066 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	43da      	mvns	r2, r3
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2203      	movs	r2, #3
 800106c:	4013      	ands	r3, r2
 800106e:	2b02      	cmp	r3, #2
 8001070:	d123      	bne.n	80010ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	58d3      	ldr	r3, [r2, r3]
 800107e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2207      	movs	r2, #7
 8001084:	4013      	ands	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2107      	movs	r1, #7
 800109e:	400b      	ands	r3, r1
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	6939      	ldr	r1, [r7, #16]
 80010b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	401a      	ands	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	23c0      	movs	r3, #192	@ 0xc0
 80010f4:	029b      	lsls	r3, r3, #10
 80010f6:	4013      	ands	r3, r2
 80010f8:	d100      	bne.n	80010fc <HAL_GPIO_Init+0x17c>
 80010fa:	e09a      	b.n	8001232 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fc:	4b54      	ldr	r3, [pc, #336]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80010fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001100:	4b53      	ldr	r3, [pc, #332]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001102:	2101      	movs	r1, #1
 8001104:	430a      	orrs	r2, r1
 8001106:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001108:	4a52      	ldr	r2, [pc, #328]	@ (8001254 <HAL_GPIO_Init+0x2d4>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	589b      	ldr	r3, [r3, r2]
 8001114:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2203      	movs	r2, #3
 800111a:	4013      	ands	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	409a      	lsls	r2, r3
 8001122:	0013      	movs	r3, r2
 8001124:	43da      	mvns	r2, r3
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	23a0      	movs	r3, #160	@ 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	429a      	cmp	r2, r3
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x1ea>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a47      	ldr	r2, [pc, #284]	@ (8001258 <HAL_GPIO_Init+0x2d8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1e6>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a46      	ldr	r2, [pc, #280]	@ (800125c <HAL_GPIO_Init+0x2dc>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1e2>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a45      	ldr	r2, [pc, #276]	@ (8001260 <HAL_GPIO_Init+0x2e0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1de>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a44      	ldr	r2, [pc, #272]	@ (8001264 <HAL_GPIO_Init+0x2e4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1da>
 8001156:	2305      	movs	r3, #5
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x1ec>
 800115a:	2306      	movs	r3, #6
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x1ec>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x1ec>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x1ec>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x1ec>
 800116a:	2300      	movs	r3, #0
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	2103      	movs	r1, #3
 8001170:	400a      	ands	r2, r1
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117c:	4935      	ldr	r1, [pc, #212]	@ (8001254 <HAL_GPIO_Init+0x2d4>)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b37      	ldr	r3, [pc, #220]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	035b      	lsls	r3, r3, #13
 80011a2:	4013      	ands	r3, r2
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43da      	mvns	r2, r3
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	039b      	lsls	r3, r3, #14
 80011cc:	4013      	ands	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011d8:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80011de:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	029b      	lsls	r3, r3, #10
 80011f6:	4013      	ands	r3, r2
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001202:	4b19      	ldr	r3, [pc, #100]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	4013      	ands	r3, r2
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_GPIO_Init+0x2e8>)
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3301      	adds	r3, #1
 8001236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	40da      	lsrs	r2, r3
 8001240:	1e13      	subs	r3, r2, #0
 8001242:	d000      	beq.n	8001246 <HAL_GPIO_Init+0x2c6>
 8001244:	e6a8      	b.n	8000f98 <HAL_GPIO_Init+0x18>
  }
}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b006      	add	sp, #24
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000
 8001254:	40010000 	.word	0x40010000
 8001258:	50000400 	.word	0x50000400
 800125c:	50000800 	.word	0x50000800
 8001260:	50000c00 	.word	0x50000c00
 8001264:	50001c00 	.word	0x50001c00
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	0008      	movs	r0, r1
 8001276:	0011      	movs	r1, r2
 8001278:	1cbb      	adds	r3, r7, #2
 800127a:	1c02      	adds	r2, r0, #0
 800127c:	801a      	strh	r2, [r3, #0]
 800127e:	1c7b      	adds	r3, r7, #1
 8001280:	1c0a      	adds	r2, r1, #0
 8001282:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001284:	1c7b      	adds	r3, r7, #1
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128c:	1cbb      	adds	r3, r7, #2
 800128e:	881a      	ldrh	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001296:	1cbb      	adds	r3, r7, #2
 8001298:	881a      	ldrh	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d101      	bne.n	80012ba <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e03d      	b.n	8001336 <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <HAL_IWDG_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001344 <HAL_IWDG_Init+0x9c>)
 80012c8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6852      	ldr	r2, [r2, #4]
 80012d2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6892      	ldr	r2, [r2, #8]
 80012dc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80012de:	f7ff fb65 	bl	80009ac <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80012e6:	e00e      	b.n	8001306 <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80012e8:	f7ff fb60 	bl	80009ac <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80012f4:	d907      	bls.n	8001306 <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2207      	movs	r2, #7
 80012fe:	4013      	ands	r3, r2
 8001300:	d001      	beq.n	8001306 <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e017      	b.n	8001336 <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2207      	movs	r2, #7
 800130e:	4013      	ands	r3, r2
 8001310:	d1ea      	bne.n	80012e8 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d005      	beq.n	800132c <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68d2      	ldr	r2, [r2, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	e003      	b.n	8001334 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <HAL_IWDG_Init+0xa0>)
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	0018      	movs	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	b004      	add	sp, #16
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	0000cccc 	.word	0x0000cccc
 8001344:	00005555 	.word	0x00005555
 8001348:	0000aaaa 	.word	0x0000aaaa

0800134c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a03      	ldr	r2, [pc, #12]	@ (8001368 <HAL_IWDG_Refresh+0x1c>)
 800135a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	0000aaaa 	.word	0x0000aaaa

0800136c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8001374:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <HAL_PWR_ConfigPVD+0xb8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	22e0      	movs	r2, #224	@ 0xe0
 800137a:	4393      	bics	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_PWR_ConfigPVD+0xb8>)
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 800138e:	4927      	ldr	r1, [pc, #156]	@ (800142c <HAL_PWR_ConfigPVD+0xc0>)
 8001390:	400a      	ands	r2, r1
 8001392:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001394:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 800139a:	4924      	ldr	r1, [pc, #144]	@ (800142c <HAL_PWR_ConfigPVD+0xc0>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013a6:	4921      	ldr	r1, [pc, #132]	@ (800142c <HAL_PWR_ConfigPVD+0xc0>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013b2:	491e      	ldr	r1, [pc, #120]	@ (800142c <HAL_PWR_ConfigPVD+0xc0>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	4013      	ands	r3, r2
 80013c2:	d006      	beq.n	80013d2 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80013c4:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	0249      	lsls	r1, r1, #9
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	2380      	movs	r3, #128	@ 0x80
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d006      	beq.n	80013ec <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80013de:	4b12      	ldr	r3, [pc, #72]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013e4:	2180      	movs	r1, #128	@ 0x80
 80013e6:	0249      	lsls	r1, r1, #9
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4013      	ands	r3, r2
 80013f4:	d006      	beq.n	8001404 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	0249      	lsls	r1, r1, #9
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d006      	beq.n	800141c <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_PWR_ConfigPVD+0xbc>)
 8001414:	2180      	movs	r1, #128	@ 0x80
 8001416:	0249      	lsls	r1, r1, #9
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]
  }
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40007000 	.word	0x40007000
 8001428:	40010400 	.word	0x40010400
 800142c:	fffeffff 	.word	0xfffeffff

08001430 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <HAL_PWR_EnablePVD+0x18>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <HAL_PWR_EnablePVD+0x18>)
 800143a:	2110      	movs	r1, #16
 800143c:	430a      	orrs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b5b0      	push	{r4, r5, r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	f000 fbaf 	bl	8001bbe <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001460:	4bcf      	ldr	r3, [pc, #828]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	220c      	movs	r2, #12
 8001466:	4013      	ands	r3, r2
 8001468:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146a:	4bcd      	ldr	r3, [pc, #820]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	4013      	ands	r3, r2
 8001474:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	4013      	ands	r3, r2
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x36>
 8001480:	e07e      	b.n	8001580 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	2b08      	cmp	r3, #8
 8001486:	d007      	beq.n	8001498 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	2b0c      	cmp	r3, #12
 800148c:	d112      	bne.n	80014b4 <HAL_RCC_OscConfig+0x68>
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	025b      	lsls	r3, r3, #9
 8001494:	429a      	cmp	r2, r3
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4bc1      	ldr	r3, [pc, #772]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_OscConfig+0x5a>
 80014a4:	e06b      	b.n	800157e <HAL_RCC_OscConfig+0x132>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d167      	bne.n	800157e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 fb85 	bl	8001bbe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	2380      	movs	r3, #128	@ 0x80
 80014ba:	025b      	lsls	r3, r3, #9
 80014bc:	429a      	cmp	r2, r3
 80014be:	d107      	bne.n	80014d0 <HAL_RCC_OscConfig+0x84>
 80014c0:	4bb7      	ldr	r3, [pc, #732]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4bb6      	ldr	r3, [pc, #728]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	0249      	lsls	r1, r1, #9
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e027      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	23a0      	movs	r3, #160	@ 0xa0
 80014d6:	02db      	lsls	r3, r3, #11
 80014d8:	429a      	cmp	r2, r3
 80014da:	d10e      	bne.n	80014fa <HAL_RCC_OscConfig+0xae>
 80014dc:	4bb0      	ldr	r3, [pc, #704]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4baf      	ldr	r3, [pc, #700]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014e2:	2180      	movs	r1, #128	@ 0x80
 80014e4:	02c9      	lsls	r1, r1, #11
 80014e6:	430a      	orrs	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	4bad      	ldr	r3, [pc, #692]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4bac      	ldr	r3, [pc, #688]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014f0:	2180      	movs	r1, #128	@ 0x80
 80014f2:	0249      	lsls	r1, r1, #9
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	e012      	b.n	8001520 <HAL_RCC_OscConfig+0xd4>
 80014fa:	4ba9      	ldr	r3, [pc, #676]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4ba8      	ldr	r3, [pc, #672]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001500:	49a8      	ldr	r1, [pc, #672]	@ (80017a4 <HAL_RCC_OscConfig+0x358>)
 8001502:	400a      	ands	r2, r1
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	4ba6      	ldr	r3, [pc, #664]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4ba2      	ldr	r3, [pc, #648]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4ba1      	ldr	r3, [pc, #644]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800151a:	49a3      	ldr	r1, [pc, #652]	@ (80017a8 <HAL_RCC_OscConfig+0x35c>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d015      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fa40 	bl	80009ac <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001530:	e009      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001532:	f7ff fa3b 	bl	80009ac <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b64      	cmp	r3, #100	@ 0x64
 800153e:	d902      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	f000 fb3c 	bl	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001546:	4b96      	ldr	r3, [pc, #600]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2380      	movs	r3, #128	@ 0x80
 800154c:	029b      	lsls	r3, r3, #10
 800154e:	4013      	ands	r3, r2
 8001550:	d0ef      	beq.n	8001532 <HAL_RCC_OscConfig+0xe6>
 8001552:	e015      	b.n	8001580 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fa2a 	bl	80009ac <HAL_GetTick>
 8001558:	0003      	movs	r3, r0
 800155a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155e:	f7ff fa25 	bl	80009ac <HAL_GetTick>
 8001562:	0002      	movs	r2, r0
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	@ 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e326      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001570:	4b8b      	ldr	r3, [pc, #556]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2380      	movs	r3, #128	@ 0x80
 8001576:	029b      	lsls	r3, r3, #10
 8001578:	4013      	ands	r3, r2
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x112>
 800157c:	e000      	b.n	8001580 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x140>
 800158a:	e08b      	b.n	80016a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d13e      	bne.n	800161c <HAL_RCC_OscConfig+0x1d0>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d13b      	bne.n	800161c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015a4:	4b7e      	ldr	r3, [pc, #504]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2204      	movs	r2, #4
 80015aa:	4013      	ands	r3, r2
 80015ac:	d004      	beq.n	80015b8 <HAL_RCC_OscConfig+0x16c>
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e302      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a7b      	ldr	r2, [pc, #492]	@ (80017ac <HAL_RCC_OscConfig+0x360>)
 80015be:	4013      	ands	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	021a      	lsls	r2, r3, #8
 80015c8:	4b75      	ldr	r3, [pc, #468]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015ce:	4b74      	ldr	r3, [pc, #464]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2209      	movs	r2, #9
 80015d4:	4393      	bics	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	4b71      	ldr	r3, [pc, #452]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	430a      	orrs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e0:	f000 fc40 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 80015e4:	0001      	movs	r1, r0
 80015e6:	4b6e      	ldr	r3, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	220f      	movs	r2, #15
 80015ee:	4013      	ands	r3, r2
 80015f0:	4a6f      	ldr	r2, [pc, #444]	@ (80017b0 <HAL_RCC_OscConfig+0x364>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	000a      	movs	r2, r1
 80015f6:	40da      	lsrs	r2, r3
 80015f8:	4b6e      	ldr	r3, [pc, #440]	@ (80017b4 <HAL_RCC_OscConfig+0x368>)
 80015fa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015fc:	4b6e      	ldr	r3, [pc, #440]	@ (80017b8 <HAL_RCC_OscConfig+0x36c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2513      	movs	r5, #19
 8001602:	197c      	adds	r4, r7, r5
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff f98b 	bl	8000920 <HAL_InitTick>
 800160a:	0003      	movs	r3, r0
 800160c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800160e:	197b      	adds	r3, r7, r5
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d046      	beq.n	80016a4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001616:	197b      	adds	r3, r7, r5
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	e2d0      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d027      	beq.n	8001672 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001622:	4b5f      	ldr	r3, [pc, #380]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2209      	movs	r2, #9
 8001628:	4393      	bics	r3, r2
 800162a:	0019      	movs	r1, r3
 800162c:	4b5c      	ldr	r3, [pc, #368]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff f9ba 	bl	80009ac <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff f9b5 	bl	80009ac <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e2b6      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2204      	movs	r2, #4
 8001656:	4013      	ands	r3, r2
 8001658:	d0f1      	beq.n	800163e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b51      	ldr	r3, [pc, #324]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a53      	ldr	r2, [pc, #332]	@ (80017ac <HAL_RCC_OscConfig+0x360>)
 8001660:	4013      	ands	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	021a      	lsls	r2, r3, #8
 800166a:	4b4d      	ldr	r3, [pc, #308]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800166c:	430a      	orrs	r2, r1
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	e018      	b.n	80016a4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b4a      	ldr	r3, [pc, #296]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001678:	2101      	movs	r1, #1
 800167a:	438a      	bics	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff f995 	bl	80009ac <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff f990 	bl	80009ac <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e291      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169a:	4b41      	ldr	r3, [pc, #260]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2204      	movs	r2, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	d1f1      	bne.n	8001688 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2210      	movs	r2, #16
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_RCC_OscConfig+0x264>
 80016ae:	e0a1      	b.n	80017f4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d140      	bne.n	8001738 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4013      	ands	r3, r2
 80016c0:	d005      	beq.n	80016ce <HAL_RCC_OscConfig+0x282>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e277      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ce:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a3a      	ldr	r2, [pc, #232]	@ (80017bc <HAL_RCC_OscConfig+0x370>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	0a19      	lsrs	r1, r3, #8
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	061a      	lsls	r2, r3, #24
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 80016f2:	430a      	orrs	r2, r1
 80016f4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	0b5b      	lsrs	r3, r3, #13
 80016fc:	3301      	adds	r3, #1
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	0212      	lsls	r2, r2, #8
 8001702:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001704:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	210f      	movs	r1, #15
 800170c:	400b      	ands	r3, r1
 800170e:	4928      	ldr	r1, [pc, #160]	@ (80017b0 <HAL_RCC_OscConfig+0x364>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001714:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <HAL_RCC_OscConfig+0x368>)
 8001716:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001718:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <HAL_RCC_OscConfig+0x36c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2513      	movs	r5, #19
 800171e:	197c      	adds	r4, r7, r5
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff f8fd 	bl	8000920 <HAL_InitTick>
 8001726:	0003      	movs	r3, r0
 8001728:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800172a:	197b      	adds	r3, r7, r5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d060      	beq.n	80017f4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001732:	197b      	adds	r3, r7, r5
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	e242      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d03f      	beq.n	80017c0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	0049      	lsls	r1, r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff f92d 	bl	80009ac <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001758:	f7ff f928 	bl	80009ac <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e229      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001776:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a10      	ldr	r2, [pc, #64]	@ (80017bc <HAL_RCC_OscConfig+0x370>)
 800177c:	4013      	ands	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	0a19      	lsrs	r1, r3, #8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	061a      	lsls	r2, r3, #24
 8001798:	4b01      	ldr	r3, [pc, #4]	@ (80017a0 <HAL_RCC_OscConfig+0x354>)
 800179a:	430a      	orrs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	e029      	b.n	80017f4 <HAL_RCC_OscConfig+0x3a8>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	fffeffff 	.word	0xfffeffff
 80017a8:	fffbffff 	.word	0xfffbffff
 80017ac:	ffffe0ff 	.word	0xffffe0ff
 80017b0:	08003bf0 	.word	0x08003bf0
 80017b4:	20000004 	.word	0x20000004
 80017b8:	20000008 	.word	0x20000008
 80017bc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c0:	4bbd      	ldr	r3, [pc, #756]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4bbc      	ldr	r3, [pc, #752]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80017c6:	49bd      	ldr	r1, [pc, #756]	@ (8001abc <HAL_RCC_OscConfig+0x670>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff f8ee 	bl	80009ac <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d6:	f7ff f8e9 	bl	80009ac <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1ea      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017e8:	4bb3      	ldr	r3, [pc, #716]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2208      	movs	r2, #8
 80017fa:	4013      	ands	r3, r2
 80017fc:	d036      	beq.n	800186c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d019      	beq.n	800183a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001806:	4bac      	ldr	r3, [pc, #688]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800180a:	4bab      	ldr	r3, [pc, #684]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff f8cb 	bl	80009ac <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff f8c6 	bl	80009ac <HAL_GetTick>
 8001820:	0002      	movs	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e1c7      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800182e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f1      	beq.n	800181c <HAL_RCC_OscConfig+0x3d0>
 8001838:	e018      	b.n	800186c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800183c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800183e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001840:	2101      	movs	r1, #1
 8001842:	438a      	bics	r2, r1
 8001844:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff f8b1 	bl	80009ac <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff f8ac 	bl	80009ac <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ad      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001862:	4b95      	ldr	r3, [pc, #596]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001866:	2202      	movs	r2, #2
 8001868:	4013      	ands	r3, r2
 800186a:	d1f1      	bne.n	8001850 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2204      	movs	r2, #4
 8001872:	4013      	ands	r3, r2
 8001874:	d100      	bne.n	8001878 <HAL_RCC_OscConfig+0x42c>
 8001876:	e0ae      	b.n	80019d6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001878:	2027      	movs	r0, #39	@ 0x27
 800187a:	183b      	adds	r3, r7, r0
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001880:	4b8d      	ldr	r3, [pc, #564]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	055b      	lsls	r3, r3, #21
 8001888:	4013      	ands	r3, r2
 800188a:	d109      	bne.n	80018a0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800188e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001890:	4b89      	ldr	r3, [pc, #548]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001892:	2180      	movs	r1, #128	@ 0x80
 8001894:	0549      	lsls	r1, r1, #21
 8001896:	430a      	orrs	r2, r1
 8001898:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800189a:	183b      	adds	r3, r7, r0
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b87      	ldr	r3, [pc, #540]	@ (8001ac0 <HAL_RCC_OscConfig+0x674>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	d11a      	bne.n	80018e2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ac:	4b84      	ldr	r3, [pc, #528]	@ (8001ac0 <HAL_RCC_OscConfig+0x674>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b83      	ldr	r3, [pc, #524]	@ (8001ac0 <HAL_RCC_OscConfig+0x674>)
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	0049      	lsls	r1, r1, #1
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ba:	f7ff f877 	bl	80009ac <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff f872 	bl	80009ac <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	@ 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e173      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac0 <HAL_RCC_OscConfig+0x674>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	2380      	movs	r3, #128	@ 0x80
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_OscConfig+0x4b2>
 80018ee:	4b72      	ldr	r3, [pc, #456]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80018f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018f2:	4b71      	ldr	r3, [pc, #452]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	0049      	lsls	r1, r1, #1
 80018f8:	430a      	orrs	r2, r1
 80018fa:	651a      	str	r2, [r3, #80]	@ 0x50
 80018fc:	e031      	b.n	8001962 <HAL_RCC_OscConfig+0x516>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x4d4>
 8001906:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001908:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800190a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800190c:	496b      	ldr	r1, [pc, #428]	@ (8001abc <HAL_RCC_OscConfig+0x670>)
 800190e:	400a      	ands	r2, r1
 8001910:	651a      	str	r2, [r3, #80]	@ 0x50
 8001912:	4b69      	ldr	r3, [pc, #420]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001914:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001916:	4b68      	ldr	r3, [pc, #416]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001918:	496a      	ldr	r1, [pc, #424]	@ (8001ac4 <HAL_RCC_OscConfig+0x678>)
 800191a:	400a      	ands	r2, r1
 800191c:	651a      	str	r2, [r3, #80]	@ 0x50
 800191e:	e020      	b.n	8001962 <HAL_RCC_OscConfig+0x516>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	23a0      	movs	r3, #160	@ 0xa0
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	429a      	cmp	r2, r3
 800192a:	d10e      	bne.n	800194a <HAL_RCC_OscConfig+0x4fe>
 800192c:	4b62      	ldr	r3, [pc, #392]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800192e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001930:	4b61      	ldr	r3, [pc, #388]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	00c9      	lsls	r1, r1, #3
 8001936:	430a      	orrs	r2, r1
 8001938:	651a      	str	r2, [r3, #80]	@ 0x50
 800193a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800193c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800193e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001940:	2180      	movs	r1, #128	@ 0x80
 8001942:	0049      	lsls	r1, r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	651a      	str	r2, [r3, #80]	@ 0x50
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x516>
 800194a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800194c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800194e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001950:	495a      	ldr	r1, [pc, #360]	@ (8001abc <HAL_RCC_OscConfig+0x670>)
 8001952:	400a      	ands	r2, r1
 8001954:	651a      	str	r2, [r3, #80]	@ 0x50
 8001956:	4b58      	ldr	r3, [pc, #352]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800195a:	4b57      	ldr	r3, [pc, #348]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800195c:	4959      	ldr	r1, [pc, #356]	@ (8001ac4 <HAL_RCC_OscConfig+0x678>)
 800195e:	400a      	ands	r2, r1
 8001960:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d015      	beq.n	8001996 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff f81f 	bl	80009ac <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001972:	e009      	b.n	8001988 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f81a 	bl	80009ac <HAL_GetTick>
 8001978:	0002      	movs	r2, r0
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_RCC_OscConfig+0x67c>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e11a      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001988:	4b4b      	ldr	r3, [pc, #300]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 800198a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d0ef      	beq.n	8001974 <HAL_RCC_OscConfig+0x528>
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff f809 	bl	80009ac <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800199e:	e009      	b.n	80019b4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f804 	bl	80009ac <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4a47      	ldr	r2, [pc, #284]	@ (8001ac8 <HAL_RCC_OscConfig+0x67c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e104      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019b4:	4b40      	ldr	r3, [pc, #256]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	d1ef      	bne.n	80019a0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019c0:	2327      	movs	r3, #39	@ 0x27
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ca:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019ce:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019d0:	493e      	ldr	r1, [pc, #248]	@ (8001acc <HAL_RCC_OscConfig+0x680>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2220      	movs	r2, #32
 80019dc:	4013      	ands	r3, r2
 80019de:	d049      	beq.n	8001a74 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d026      	beq.n	8001a36 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019e8:	4b33      	ldr	r3, [pc, #204]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f8:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 80019fa:	2101      	movs	r1, #1
 80019fc:	430a      	orrs	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a00:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <HAL_RCC_OscConfig+0x684>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	4b32      	ldr	r3, [pc, #200]	@ (8001ad0 <HAL_RCC_OscConfig+0x684>)
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	0189      	lsls	r1, r1, #6
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0e:	f7fe ffcd 	bl	80009ac <HAL_GetTick>
 8001a12:	0003      	movs	r3, r0
 8001a14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a18:	f7fe ffc8 	bl	80009ac <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0c9      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x5cc>
 8001a34:	e01e      	b.n	8001a74 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	438a      	bics	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <HAL_RCC_OscConfig+0x684>)
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_RCC_OscConfig+0x684>)
 8001a48:	4922      	ldr	r1, [pc, #136]	@ (8001ad4 <HAL_RCC_OscConfig+0x688>)
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7fe ffad 	bl	80009ac <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a58:	f7fe ffa8 	bl	80009ac <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0a9      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	d1f1      	bne.n	8001a58 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x632>
 8001a7c:	e09e      	b.n	8001bbc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	2b0c      	cmp	r3, #12
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_OscConfig+0x63a>
 8001a84:	e077      	b.n	8001b76 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d158      	bne.n	8001b40 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_OscConfig+0x66c>)
 8001a94:	4910      	ldr	r1, [pc, #64]	@ (8001ad8 <HAL_RCC_OscConfig+0x68c>)
 8001a96:	400a      	ands	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe ff87 	bl	80009ac <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aa2:	e01b      	b.n	8001adc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7fe ff82 	bl	80009ac <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d914      	bls.n	8001adc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e083      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	fffffeff 	.word	0xfffffeff
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	fffffbff 	.word	0xfffffbff
 8001ac8:	00001388 	.word	0x00001388
 8001acc:	efffffff 	.word	0xefffffff
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	ffffdfff 	.word	0xffffdfff
 8001ad8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001adc:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	049b      	lsls	r3, r3, #18
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d1dd      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae8:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	4a37      	ldr	r2, [pc, #220]	@ (8001bcc <HAL_RCC_OscConfig+0x780>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b00:	431a      	orrs	r2, r3
 8001b02:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	0449      	lsls	r1, r1, #17
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe ff49 	bl	80009ac <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe ff44 	bl	80009ac <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e045      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	2380      	movs	r3, #128	@ 0x80
 8001b38:	049b      	lsls	r3, r3, #18
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x6d4>
 8001b3e:	e03d      	b.n	8001bbc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b46:	4922      	ldr	r1, [pc, #136]	@ (8001bd0 <HAL_RCC_OscConfig+0x784>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ff2e 	bl	80009ac <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe ff29 	bl	80009ac <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e02a      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b68:	4b17      	ldr	r3, [pc, #92]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	049b      	lsls	r3, r3, #18
 8001b70:	4013      	ands	r3, r2
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x70a>
 8001b74:	e022      	b.n	8001bbc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e01d      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b82:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_OscConfig+0x77c>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	025b      	lsls	r3, r3, #9
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d10f      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	23f0      	movs	r3, #240	@ 0xf0
 8001b9c:	039b      	lsls	r3, r3, #14
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d107      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	23c0      	movs	r3, #192	@ 0xc0
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b00a      	add	sp, #40	@ 0x28
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	ff02ffff 	.word	0xff02ffff
 8001bd0:	feffffff 	.word	0xfeffffff

08001bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e128      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b96      	ldr	r3, [pc, #600]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d91e      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b93      	ldr	r3, [pc, #588]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4393      	bics	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	4b90      	ldr	r3, [pc, #576]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c08:	f7fe fed0 	bl	80009ac <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c10:	e009      	b.n	8001c26 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c12:	f7fe fecb 	bl	80009ac <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	4a8a      	ldr	r2, [pc, #552]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e109      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b87      	ldr	r3, [pc, #540]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1ee      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d009      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c3e:	4b83      	ldr	r3, [pc, #524]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	22f0      	movs	r2, #240	@ 0xf0
 8001c44:	4393      	bics	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x8a>
 8001c5c:	e089      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c66:	4b79      	ldr	r3, [pc, #484]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	029b      	lsls	r3, r3, #10
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d120      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0e1      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c7e:	4b73      	ldr	r3, [pc, #460]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	049b      	lsls	r3, r3, #18
 8001c86:	4013      	ands	r3, r2
 8001c88:	d114      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0d5      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d106      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c96:	4b6d      	ldr	r3, [pc, #436]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2204      	movs	r2, #4
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0ca      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ca4:	4b69      	ldr	r3, [pc, #420]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0c2      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb4:	4b65      	ldr	r3, [pc, #404]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4b62      	ldr	r3, [pc, #392]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7fe fe70 	bl	80009ac <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d111      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cd8:	e009      	b.n	8001cee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f7fe fe67 	bl	80009ac <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	4a58      	ldr	r2, [pc, #352]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0a5      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cee:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_ClockConfig+0x106>
 8001cfa:	e03a      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d111      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7fe fe51 	bl	80009ac <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e08f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	220c      	movs	r2, #12
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b0c      	cmp	r3, #12
 8001d24:	d1ef      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x132>
 8001d26:	e024      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d11b      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d32:	f7fe fe3b 	bl	80009ac <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a42      	ldr	r2, [pc, #264]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e079      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d46:	4b41      	ldr	r3, [pc, #260]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d1ef      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x15e>
 8001d52:	e00e      	b.n	8001d72 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7fe fe2a 	bl	80009ac <HAL_GetTick>
 8001d58:	0002      	movs	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e068      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	4013      	ands	r3, r2
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d21e      	bcs.n	8001dbe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d80:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4393      	bics	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d92:	f7fe fe0b 	bl	80009ac <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9a:	e009      	b.n	8001db0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7fe fe06 	bl	80009ac <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <HAL_RCC_ClockConfig+0x274>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e044      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_RCC_ClockConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2204      	movs	r2, #4
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a20      	ldr	r2, [pc, #128]	@ (8001e50 <HAL_RCC_ClockConfig+0x27c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2208      	movs	r2, #8
 8001de2:	4013      	ands	r3, r2
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001de6:	4b19      	ldr	r3, [pc, #100]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a1a      	ldr	r2, [pc, #104]	@ (8001e54 <HAL_RCC_ClockConfig+0x280>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	0019      	movs	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	00da      	lsls	r2, r3, #3
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfc:	f000 f832 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e00:	0001      	movs	r1, r0
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <HAL_RCC_ClockConfig+0x278>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	220f      	movs	r2, #15
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <HAL_RCC_ClockConfig+0x284>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	000a      	movs	r2, r1
 8001e12:	40da      	lsrs	r2, r3
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_RCC_ClockConfig+0x288>)
 8001e16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_RCC_ClockConfig+0x28c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	250b      	movs	r5, #11
 8001e1e:	197c      	adds	r4, r7, r5
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe fd7d 	bl	8000920 <HAL_InitTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e2a:	197b      	adds	r3, r7, r5
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e32:	197b      	adds	r3, r7, r5
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bdb0      	pop	{r4, r5, r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	40022000 	.word	0x40022000
 8001e48:	00001388 	.word	0x00001388
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	fffff8ff 	.word	0xfffff8ff
 8001e54:	ffffc7ff 	.word	0xffffc7ff
 8001e58:	08003bf0 	.word	0x08003bf0
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	20000008 	.word	0x20000008

08001e64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	220c      	movs	r2, #12
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d013      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001e7a:	d85c      	bhi.n	8001f36 <HAL_RCC_GetSysClockFreq+0xd2>
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d002      	beq.n	8001e86 <HAL_RCC_GetSysClockFreq+0x22>
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d00b      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x38>
 8001e84:	e057      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e86:	4b35      	ldr	r3, [pc, #212]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2210      	movs	r2, #16
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d002      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e90:	4b33      	ldr	r3, [pc, #204]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e92:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e94:	e05d      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001e96:	4b33      	ldr	r3, [pc, #204]	@ (8001f64 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	e05a      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	e057      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	220f      	movs	r2, #15
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	4a30      	ldr	r2, [pc, #192]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	0d9b      	lsrs	r3, r3, #22
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	3301      	adds	r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	025b      	lsls	r3, r3, #9
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d00f      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	000a      	movs	r2, r1
 8001ecc:	0152      	lsls	r2, r2, #5
 8001ece:	1a52      	subs	r2, r2, r1
 8001ed0:	0193      	lsls	r3, r2, #6
 8001ed2:	1a9b      	subs	r3, r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	185b      	adds	r3, r3, r1
 8001ed8:	025b      	lsls	r3, r3, #9
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe f913 	bl	8000108 <__udivsi3>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e023      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2210      	movs	r2, #16
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d00f      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	000a      	movs	r2, r1
 8001ef6:	0152      	lsls	r2, r2, #5
 8001ef8:	1a52      	subs	r2, r2, r1
 8001efa:	0193      	lsls	r3, r2, #6
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	185b      	adds	r3, r3, r1
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7fe f8fe 	bl	8000108 <__udivsi3>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e00e      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	000a      	movs	r2, r1
 8001f16:	0152      	lsls	r2, r2, #5
 8001f18:	1a52      	subs	r2, r2, r1
 8001f1a:	0193      	lsls	r3, r2, #6
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	185b      	adds	r3, r3, r1
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7fe f8ee 	bl	8000108 <__udivsi3>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
      break;
 8001f34:	e00d      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	0b5b      	lsrs	r3, r3, #13
 8001f3c:	2207      	movs	r2, #7
 8001f3e:	4013      	ands	r3, r2
 8001f40:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
      break;
 8001f50:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f52:	693b      	ldr	r3, [r7, #16]
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b006      	add	sp, #24
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	003d0900 	.word	0x003d0900
 8001f64:	00f42400 	.word	0x00f42400
 8001f68:	007a1200 	.word	0x007a1200
 8001f6c:	08003c00 	.word	0x08003c00

08001f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e083      	b.n	800208a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	2382      	movs	r3, #130	@ 0x82
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d009      	beq.n	8001faa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
 8001f9c:	e005      	b.n	8001faa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2251      	movs	r2, #81	@ 0x51
 8001fb4:	5c9b      	ldrb	r3, [r3, r2]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d107      	bne.n	8001fcc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2250      	movs	r2, #80	@ 0x50
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7fe fb4e 	bl	8000668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2251      	movs	r2, #81	@ 0x51
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2140      	movs	r1, #64	@ 0x40
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	2382      	movs	r3, #130	@ 0x82
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	2384      	movs	r3, #132	@ 0x84
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	2380      	movs	r3, #128	@ 0x80
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	400b      	ands	r3, r1
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2102      	movs	r1, #2
 800200c:	400b      	ands	r3, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	2101      	movs	r1, #1
 8002016:	400b      	ands	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6999      	ldr	r1, [r3, #24]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2138      	movs	r1, #56	@ 0x38
 800202c:	400b      	ands	r3, r1
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	400b      	ands	r3, r1
 8002038:	431a      	orrs	r2, r3
 800203a:	0011      	movs	r1, r2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	401a      	ands	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	2204      	movs	r2, #4
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	2210      	movs	r2, #16
 8002060:	401a      	ands	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4907      	ldr	r1, [pc, #28]	@ (8002094 <HAL_SPI_Init+0x124>)
 8002076:	400a      	ands	r2, r1
 8002078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2251      	movs	r2, #81	@ 0x51
 8002084:	2101      	movs	r1, #1
 8002086:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	fffff7ff 	.word	0xfffff7ff

08002098 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2251      	movs	r2, #81	@ 0x51
 80020aa:	5c9b      	ldrb	r3, [r3, r2]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
 80020b4:	e09b      	b.n	80021ee <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_SPI_Transmit_DMA+0x2c>
 80020bc:	1dbb      	adds	r3, r7, #6
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_SPI_Transmit_DMA+0x30>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e092      	b.n	80021ee <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2250      	movs	r2, #80	@ 0x50
 80020cc:	5c9b      	ldrb	r3, [r3, r2]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_SPI_Transmit_DMA+0x3e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e08b      	b.n	80021ee <HAL_SPI_Transmit_DMA+0x156>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2250      	movs	r2, #80	@ 0x50
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2251      	movs	r2, #81	@ 0x51
 80020e2:	2103      	movs	r1, #3
 80020e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1dba      	adds	r2, r7, #6
 80020f6:	8812      	ldrh	r2, [r2, #0]
 80020f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1dba      	adds	r2, r7, #6
 80020fe:	8812      	ldrh	r2, [r2, #0]
 8002100:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	429a      	cmp	r2, r3
 800212a:	d110      	bne.n	800214e <HAL_SPI_Transmit_DMA+0xb6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2140      	movs	r1, #64	@ 0x40
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2180      	movs	r1, #128	@ 0x80
 8002148:	01c9      	lsls	r1, r1, #7
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002152:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <HAL_SPI_Transmit_DMA+0x160>)
 8002154:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215a:	4a28      	ldr	r2, [pc, #160]	@ (80021fc <HAL_SPI_Transmit_DMA+0x164>)
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002162:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <HAL_SPI_Transmit_DMA+0x168>)
 8002164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216a:	2200      	movs	r2, #0
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	0019      	movs	r1, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	330c      	adds	r3, #12
 800217e:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002184:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002186:	f7fe fd71 	bl	8000c6c <HAL_DMA_Start_IT>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_SPI_Transmit_DMA+0x10e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002192:	2210      	movs	r2, #16
 8002194:	431a      	orrs	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2250      	movs	r2, #80	@ 0x50
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e023      	b.n	80021ee <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2240      	movs	r2, #64	@ 0x40
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b40      	cmp	r3, #64	@ 0x40
 80021b2:	d007      	beq.n	80021c4 <HAL_SPI_Transmit_DMA+0x12c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2140      	movs	r1, #64	@ 0x40
 80021c0:	430a      	orrs	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2250      	movs	r2, #80	@ 0x50
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2120      	movs	r1, #32
 80021d8:	430a      	orrs	r2, r1
 80021da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2102      	movs	r1, #2
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	0018      	movs	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	080029e3 	.word	0x080029e3
 80021fc:	080027f5 	.word	0x080027f5
 8002200:	08002a3d 	.word	0x08002a3d

08002204 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	1dbb      	adds	r3, r7, #6
 8002210:	801a      	strh	r2, [r3, #0]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2251      	movs	r2, #81	@ 0x51
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e0ae      	b.n	8002380 <HAL_SPI_Receive_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_SPI_Receive_DMA+0x2c>
 8002228:	1dbb      	adds	r3, r7, #6
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0a5      	b.n	8002380 <HAL_SPI_Receive_DMA+0x17c>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d112      	bne.n	8002262 <HAL_SPI_Receive_DMA+0x5e>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	2382      	movs	r3, #130	@ 0x82
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	429a      	cmp	r2, r3
 8002246:	d10c      	bne.n	8002262 <HAL_SPI_Receive_DMA+0x5e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2251      	movs	r2, #81	@ 0x51
 800224c:	2104      	movs	r1, #4
 800224e:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002250:	1dbb      	adds	r3, r7, #6
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f89d 	bl	8002398 <HAL_SPI_TransmitReceive_DMA>
 800225e:	0003      	movs	r3, r0
 8002260:	e08e      	b.n	8002380 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2250      	movs	r2, #80	@ 0x50
 8002266:	5c9b      	ldrb	r3, [r3, r2]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_SPI_Receive_DMA+0x6c>
 800226c:	2302      	movs	r3, #2
 800226e:	e087      	b.n	8002380 <HAL_SPI_Receive_DMA+0x17c>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2250      	movs	r2, #80	@ 0x50
 8002274:	2101      	movs	r1, #1
 8002276:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2251      	movs	r2, #81	@ 0x51
 800227c:	2104      	movs	r1, #4
 800227e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1dba      	adds	r2, r7, #6
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1dba      	adds	r2, r7, #6
 8002298:	8812      	ldrh	r2, [r2, #0]
 800229a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	2380      	movs	r3, #128	@ 0x80
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	429a      	cmp	r2, r3
 80022be:	d10f      	bne.n	80022e0 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2140      	movs	r1, #64	@ 0x40
 80022cc:	438a      	bics	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	492b      	ldr	r1, [pc, #172]	@ (8002388 <HAL_SPI_Receive_DMA+0x184>)
 80022dc:	400a      	ands	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e4:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_SPI_Receive_DMA+0x188>)
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ec:	4a28      	ldr	r2, [pc, #160]	@ (8002390 <HAL_SPI_Receive_DMA+0x18c>)
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f4:	4a27      	ldr	r2, [pc, #156]	@ (8002394 <HAL_SPI_Receive_DMA+0x190>)
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fc:	2200      	movs	r2, #0
 80022fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	330c      	adds	r3, #12
 800230a:	0019      	movs	r1, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002316:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002318:	f7fe fca8 	bl	8000c6c <HAL_DMA_Start_IT>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d00b      	beq.n	8002338 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	2210      	movs	r2, #16
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2250      	movs	r2, #80	@ 0x50
 8002330:	2100      	movs	r1, #0
 8002332:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e023      	b.n	8002380 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	4013      	ands	r3, r2
 8002342:	2b40      	cmp	r3, #64	@ 0x40
 8002344:	d007      	beq.n	8002356 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2140      	movs	r1, #64	@ 0x40
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2250      	movs	r2, #80	@ 0x50
 800235a:	2100      	movs	r1, #0
 800235c:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2120      	movs	r1, #32
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	430a      	orrs	r2, r1
 800237c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}
 8002388:	ffffbfff 	.word	0xffffbfff
 800238c:	08002a01 	.word	0x08002a01
 8002390:	080028a1 	.word	0x080028a1
 8002394:	08002a3d 	.word	0x08002a3d

08002398 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	001a      	movs	r2, r3
 80023a6:	1cbb      	adds	r3, r7, #2
 80023a8:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023aa:	2017      	movs	r0, #23
 80023ac:	183b      	adds	r3, r7, r0
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	2151      	movs	r1, #81	@ 0x51
 80023b2:	5c52      	ldrb	r2, [r2, r1]
 80023b4:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80023bc:	0001      	movs	r1, r0
 80023be:	187b      	adds	r3, r7, r1
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d00e      	beq.n	80023e4 <HAL_SPI_TransmitReceive_DMA+0x4c>
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	2382      	movs	r3, #130	@ 0x82
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_SPI_TransmitReceive_DMA+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <HAL_SPI_TransmitReceive_DMA+0x48>
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d001      	beq.n	80023e4 <HAL_SPI_TransmitReceive_DMA+0x4c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0d2      	b.n	800258a <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d006      	beq.n	80023f8 <HAL_SPI_TransmitReceive_DMA+0x60>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_SPI_TransmitReceive_DMA+0x60>
 80023f0:	1cbb      	adds	r3, r7, #2
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_SPI_TransmitReceive_DMA+0x64>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0c6      	b.n	800258a <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2250      	movs	r2, #80	@ 0x50
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_SPI_TransmitReceive_DMA+0x72>
 8002406:	2302      	movs	r3, #2
 8002408:	e0bf      	b.n	800258a <HAL_SPI_TransmitReceive_DMA+0x1f2>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2250      	movs	r2, #80	@ 0x50
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2251      	movs	r2, #81	@ 0x51
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b04      	cmp	r3, #4
 800241c:	d003      	beq.n	8002426 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2251      	movs	r2, #81	@ 0x51
 8002422:	2105      	movs	r1, #5
 8002424:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1cba      	adds	r2, r7, #2
 8002436:	8812      	ldrh	r2, [r2, #0]
 8002438:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1cba      	adds	r2, r7, #2
 800243e:	8812      	ldrh	r2, [r2, #0]
 8002440:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1cba      	adds	r2, r7, #2
 800244c:	8812      	ldrh	r2, [r2, #0]
 800244e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1cba      	adds	r2, r7, #2
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2251      	movs	r2, #81	@ 0x51
 8002468:	5c9b      	ldrb	r3, [r3, r2]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b04      	cmp	r3, #4
 800246e:	d108      	bne.n	8002482 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247c:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800247e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002480:	e007      	b.n	8002492 <HAL_SPI_TransmitReceive_DMA+0xfa>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	4a45      	ldr	r2, [pc, #276]	@ (800259c <HAL_SPI_TransmitReceive_DMA+0x204>)
 8002488:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	4a44      	ldr	r2, [pc, #272]	@ (80025a0 <HAL_SPI_TransmitReceive_DMA+0x208>)
 8002490:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	4a43      	ldr	r2, [pc, #268]	@ (80025a4 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 8002498:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	2200      	movs	r2, #0
 80024a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	0019      	movs	r1, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80024ba:	f7fe fbd7 	bl	8000c6c <HAL_DMA_Start_IT>
 80024be:	1e03      	subs	r3, r0, #0
 80024c0:	d00b      	beq.n	80024da <HAL_SPI_TransmitReceive_DMA+0x142>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	2210      	movs	r2, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2250      	movs	r2, #80	@ 0x50
 80024d2:	2100      	movs	r1, #0
 80024d4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e057      	b.n	800258a <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	2200      	movs	r2, #0
 80024f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024fe:	2200      	movs	r2, #0
 8002500:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002506:	2200      	movs	r2, #0
 8002508:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	0019      	movs	r1, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002520:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002522:	f7fe fba3 	bl	8000c6c <HAL_DMA_Start_IT>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d00b      	beq.n	8002542 <HAL_SPI_TransmitReceive_DMA+0x1aa>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	2210      	movs	r2, #16
 8002530:	431a      	orrs	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2250      	movs	r2, #80	@ 0x50
 800253a:	2100      	movs	r1, #0
 800253c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e023      	b.n	800258a <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2240      	movs	r2, #64	@ 0x40
 800254a:	4013      	ands	r3, r2
 800254c:	2b40      	cmp	r3, #64	@ 0x40
 800254e:	d007      	beq.n	8002560 <HAL_SPI_TransmitReceive_DMA+0x1c8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2140      	movs	r1, #64	@ 0x40
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2250      	movs	r2, #80	@ 0x50
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2120      	movs	r1, #32
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2102      	movs	r1, #2
 8002584:	430a      	orrs	r2, r1
 8002586:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b006      	add	sp, #24
 8002590:	bd80      	pop	{r7, pc}
 8002592:	46c0      	nop			@ (mov r8, r8)
 8002594:	08002a01 	.word	0x08002a01
 8002598:	080028a1 	.word	0x080028a1
 800259c:	08002a1f 	.word	0x08002a1f
 80025a0:	0800294f 	.word	0x0800294f
 80025a4:	08002a3d 	.word	0x08002a3d

080025a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	001a      	movs	r2, r3
 80025c6:	2301      	movs	r3, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d10f      	bne.n	80025ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80025d2:	d00b      	beq.n	80025ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	001a      	movs	r2, r3
 80025da:	2301      	movs	r3, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d005      	beq.n	80025ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	0010      	movs	r0, r2
 80025e8:	4798      	blx	r3
    return;
 80025ea:	e0d5      	b.n	8002798 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	001a      	movs	r2, r3
 80025f2:	2301      	movs	r3, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d00b      	beq.n	8002610 <HAL_SPI_IRQHandler+0x68>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	09db      	lsrs	r3, r3, #7
 80025fc:	001a      	movs	r2, r3
 80025fe:	2301      	movs	r3, #1
 8002600:	4013      	ands	r3, r2
 8002602:	d005      	beq.n	8002610 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	0010      	movs	r0, r2
 800260c:	4798      	blx	r3
    return;
 800260e:	e0c3      	b.n	8002798 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	001a      	movs	r2, r3
 8002616:	2301      	movs	r3, #1
 8002618:	4013      	ands	r3, r2
 800261a:	d10c      	bne.n	8002636 <HAL_SPI_IRQHandler+0x8e>
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	099b      	lsrs	r3, r3, #6
 8002620:	001a      	movs	r2, r3
 8002622:	2301      	movs	r3, #1
 8002624:	4013      	ands	r3, r2
 8002626:	d106      	bne.n	8002636 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	001a      	movs	r2, r3
 800262e:	2301      	movs	r3, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d100      	bne.n	8002636 <HAL_SPI_IRQHandler+0x8e>
 8002634:	e0b0      	b.n	8002798 <HAL_SPI_IRQHandler+0x1f0>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	001a      	movs	r2, r3
 800263c:	2301      	movs	r3, #1
 800263e:	4013      	ands	r3, r2
 8002640:	d100      	bne.n	8002644 <HAL_SPI_IRQHandler+0x9c>
 8002642:	e0a9      	b.n	8002798 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	001a      	movs	r2, r3
 800264a:	2301      	movs	r3, #1
 800264c:	4013      	ands	r3, r2
 800264e:	d023      	beq.n	8002698 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2251      	movs	r2, #81	@ 0x51
 8002654:	5c9b      	ldrb	r3, [r3, r2]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b03      	cmp	r3, #3
 800265a:	d011      	beq.n	8002680 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	2204      	movs	r2, #4
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	e00b      	b.n	8002698 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
        return;
 8002696:	e07f      	b.n	8002798 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	001a      	movs	r2, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d014      	beq.n	80026ce <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	2201      	movs	r2, #1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2140      	movs	r1, #64	@ 0x40
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	001a      	movs	r2, r3
 80026d4:	2301      	movs	r3, #1
 80026d6:	4013      	ands	r3, r2
 80026d8:	d00c      	beq.n	80026f4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026de:	2208      	movs	r2, #8
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04c      	beq.n	8002796 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	21e0      	movs	r1, #224	@ 0xe0
 8002708:	438a      	bics	r2, r1
 800270a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2251      	movs	r2, #81	@ 0x51
 8002710:	2101      	movs	r1, #1
 8002712:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	d103      	bne.n	8002724 <HAL_SPI_IRQHandler+0x17c>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	d032      	beq.n	800278a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2103      	movs	r1, #3
 8002730:	438a      	bics	r2, r1
 8002732:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002740:	4a17      	ldr	r2, [pc, #92]	@ (80027a0 <HAL_SPI_IRQHandler+0x1f8>)
 8002742:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe faf5 	bl	8000d38 <HAL_DMA_Abort_IT>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d005      	beq.n	800275e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002756:	2240      	movs	r2, #64	@ 0x40
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276a:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <HAL_SPI_IRQHandler+0x1f8>)
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002772:	0018      	movs	r0, r3
 8002774:	f7fe fae0 	bl	8000d38 <HAL_DMA_Abort_IT>
 8002778:	1e03      	subs	r3, r0, #0
 800277a:	d00b      	beq.n	8002794 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	2240      	movs	r2, #64	@ 0x40
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002788:	e004      	b.n	8002794 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	0018      	movs	r0, r3
 800278e:	f000 f829 	bl	80027e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002792:	e000      	b.n	8002796 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002794:	46c0      	nop			@ (mov r8, r8)
    return;
 8002796:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002798:	46bd      	mov	sp, r7
 800279a:	b008      	add	sp, #32
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	08002a7f 	.word	0x08002a7f

080027a4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80027bc:	46c0      	nop			@ (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80027ec:	46c0      	nop			@ (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002802:	f7fe f8d3 	bl	80009ac <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2220      	movs	r2, #32
 8002812:	4013      	ands	r3, r2
 8002814:	2b20      	cmp	r3, #32
 8002816:	d03c      	beq.n	8002892 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2120      	movs	r1, #32
 8002824:	438a      	bics	r2, r1
 8002826:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2102      	movs	r1, #2
 8002834:	438a      	bics	r2, r1
 8002836:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2164      	movs	r1, #100	@ 0x64
 800283e:	0018      	movs	r0, r3
 8002840:	f000 fa2a 	bl	8002c98 <SPI_EndRxTxTransaction>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d005      	beq.n	8002854 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284c:	2220      	movs	r2, #32
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2251      	movs	r2, #81	@ 0x51
 800287c:	2101      	movs	r1, #1
 800287e:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff ffaa 	bl	80027e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002890:	e003      	b.n	800289a <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	0018      	movs	r0, r3
 8002896:	f7fd fe8f 	bl	80005b8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800289a:	46bd      	mov	sp, r7
 800289c:	b006      	add	sp, #24
 800289e:	bd80      	pop	{r7, pc}

080028a0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ae:	f7fe f87d 	bl	80009ac <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2220      	movs	r2, #32
 80028be:	4013      	ands	r3, r2
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d03d      	beq.n	8002940 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2120      	movs	r1, #32
 80028d0:	438a      	bics	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10e      	bne.n	80028fa <SPI_DMAReceiveCplt+0x5a>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	2382      	movs	r3, #130	@ 0x82
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d108      	bne.n	80028fa <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2103      	movs	r1, #3
 80028f4:	438a      	bics	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	e007      	b.n	800290a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2101      	movs	r1, #1
 8002906:	438a      	bics	r2, r1
 8002908:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2164      	movs	r1, #100	@ 0x64
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f957 	bl	8002bc4 <SPI_EndRxTransaction>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d002      	beq.n	8002920 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2251      	movs	r2, #81	@ 0x51
 800292a:	2101      	movs	r1, #1
 800292c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff ff53 	bl	80027e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800293e:	e003      	b.n	8002948 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	0018      	movs	r0, r3
 8002944:	f7fd fe4c 	bl	80005e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}

0800294e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800295c:	f7fe f826 	bl	80009ac <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	2b20      	cmp	r3, #32
 8002970:	d030      	beq.n	80029d4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2120      	movs	r1, #32
 800297e:	438a      	bics	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2164      	movs	r1, #100	@ 0x64
 8002988:	0018      	movs	r0, r3
 800298a:	f000 f985 	bl	8002c98 <SPI_EndRxTxTransaction>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d005      	beq.n	800299e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	2220      	movs	r2, #32
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2103      	movs	r1, #3
 80029aa:	438a      	bics	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2251      	movs	r2, #81	@ 0x51
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff ff09 	bl	80027e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80029d2:	e003      	b.n	80029dc <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7ff fee4 	bl	80027a4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7ff fede 	bl	80027b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff fed7 	bl	80027c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	b004      	add	sp, #16
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fed0 	bl	80027d4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2103      	movs	r1, #3
 8002a56:	438a      	bics	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5e:	2210      	movs	r2, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2251      	movs	r2, #81	@ 0x51
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff feb7 	bl	80027e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a76:	46c0      	nop			@ (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7ff fea2 	bl	80027e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b004      	add	sp, #16
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	1dfb      	adds	r3, r7, #7
 8002ab6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ab8:	f7fd ff78 	bl	80009ac <HAL_GetTick>
 8002abc:	0002      	movs	r2, r0
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	18d3      	adds	r3, r2, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ac8:	f7fd ff70 	bl	80009ac <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	0d1b      	lsrs	r3, r3, #20
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	4353      	muls	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ade:	e059      	b.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	d056      	beq.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ae6:	f7fd ff61 	bl	80009ac <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d902      	bls.n	8002afc <SPI_WaitFlagStateUntilTimeout+0x54>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d142      	bne.n	8002b82 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	21e0      	movs	r1, #224	@ 0xe0
 8002b08:	438a      	bics	r2, r1
 8002b0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	2382      	movs	r3, #130	@ 0x82
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d113      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d005      	beq.n	8002b30 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	2380      	movs	r3, #128	@ 0x80
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d107      	bne.n	8002b40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2140      	movs	r1, #64	@ 0x40
 8002b3c:	438a      	bics	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	019b      	lsls	r3, r3, #6
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d110      	bne.n	8002b6e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	491a      	ldr	r1, [pc, #104]	@ (8002bc0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2180      	movs	r1, #128	@ 0x80
 8002b68:	0189      	lsls	r1, r1, #6
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2251      	movs	r2, #81	@ 0x51
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2250      	movs	r2, #80	@ 0x50
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e018      	b.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e002      	b.n	8002b94 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	425a      	negs	r2, r3
 8002ba4:	4153      	adcs	r3, r2
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	001a      	movs	r2, r3
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d196      	bne.n	8002ae0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b008      	add	sp, #32
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	ffffdfff 	.word	0xffffdfff

08002bc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	2382      	movs	r3, #130	@ 0x82
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d113      	bne.n	8002c04 <SPI_EndRxTransaction+0x40>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d005      	beq.n	8002bf4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2140      	movs	r1, #64	@ 0x40
 8002c00:	438a      	bics	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	2382      	movs	r3, #130	@ 0x82
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d12b      	bne.n	8002c68 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d012      	beq.n	8002c42 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	0013      	movs	r3, r2
 8002c26:	2200      	movs	r2, #0
 8002c28:	2180      	movs	r1, #128	@ 0x80
 8002c2a:	f7ff ff3d 	bl	8002aa8 <SPI_WaitFlagStateUntilTimeout>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d02d      	beq.n	8002c8e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c36:	2220      	movs	r2, #32
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e026      	b.n	8002c90 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	0013      	movs	r3, r2
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	f7ff ff2a 	bl	8002aa8 <SPI_WaitFlagStateUntilTimeout>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d01a      	beq.n	8002c8e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e013      	b.n	8002c90 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	0013      	movs	r3, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	2101      	movs	r1, #1
 8002c76:	f7ff ff17 	bl	8002aa8 <SPI_WaitFlagStateUntilTimeout>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d007      	beq.n	8002c8e <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c82:	2220      	movs	r2, #32
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e000      	b.n	8002c90 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b004      	add	sp, #16
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	0013      	movs	r3, r2
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	f7ff fef9 	bl	8002aa8 <SPI_WaitFlagStateUntilTimeout>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d007      	beq.n	8002cca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e037      	b.n	8002d3a <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002cca:	4b1e      	ldr	r3, [pc, #120]	@ (8002d44 <SPI_EndRxTxTransaction+0xac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	491e      	ldr	r1, [pc, #120]	@ (8002d48 <SPI_EndRxTxTransaction+0xb0>)
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7fd fa19 	bl	8000108 <__udivsi3>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	001a      	movs	r2, r3
 8002cda:	0013      	movs	r3, r2
 8002cdc:	015b      	lsls	r3, r3, #5
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	2382      	movs	r3, #130	@ 0x82
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d112      	bne.n	8002d1a <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	2200      	movs	r2, #0
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	f7ff fed1 	bl	8002aa8 <SPI_WaitFlagStateUntilTimeout>
 8002d06:	1e03      	subs	r3, r0, #0
 8002d08:	d016      	beq.n	8002d38 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d0e:	2220      	movs	r2, #32
 8002d10:	431a      	orrs	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e00f      	b.n	8002d3a <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2280      	movs	r2, #128	@ 0x80
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b80      	cmp	r3, #128	@ 0x80
 8002d32:	d0f2      	beq.n	8002d1a <SPI_EndRxTxTransaction+0x82>
 8002d34:	e000      	b.n	8002d38 <SPI_EndRxTxTransaction+0xa0>
        break;
 8002d36:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b006      	add	sp, #24
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	20000004 	.word	0x20000004
 8002d48:	016e3600 	.word	0x016e3600

08002d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e032      	b.n	8002dc4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2239      	movs	r2, #57	@ 0x39
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2238      	movs	r2, #56	@ 0x38
 8002d6e:	2100      	movs	r1, #0
 8002d70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7fd fd1f 	bl	80007b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2239      	movs	r2, #57	@ 0x39
 8002d7e:	2102      	movs	r1, #2
 8002d80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	0010      	movs	r0, r2
 8002d8e:	f000 f911 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	223e      	movs	r2, #62	@ 0x3e
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223a      	movs	r2, #58	@ 0x3a
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	223b      	movs	r2, #59	@ 0x3b
 8002da6:	2101      	movs	r1, #1
 8002da8:	5499      	strb	r1, [r3, r2]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	223c      	movs	r2, #60	@ 0x3c
 8002dae:	2101      	movs	r1, #1
 8002db0:	5499      	strb	r1, [r3, r2]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	223d      	movs	r2, #61	@ 0x3d
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2239      	movs	r2, #57	@ 0x39
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b002      	add	sp, #8
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2202      	movs	r2, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	d021      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d01d      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4252      	negs	r2, r2
 8002dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f8b6 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e007      	b.n	8002e2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f8a9 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f000 f8b5 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2204      	movs	r2, #4
 8002e34:	4013      	ands	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d01e      	beq.n	8002e7e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2205      	movs	r2, #5
 8002e46:	4252      	negs	r2, r2
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	23c0      	movs	r3, #192	@ 0xc0
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 f88f 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8002e66:	e007      	b.n	8002e78 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f000 f882 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	0018      	movs	r0, r3
 8002e74:	f000 f88e 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2208      	movs	r2, #8
 8002e82:	4013      	ands	r3, r2
 8002e84:	d021      	beq.n	8002eca <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2208      	movs	r2, #8
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d01d      	beq.n	8002eca <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2209      	movs	r2, #9
 8002e94:	4252      	negs	r2, r2
 8002e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 f869 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8002eb2:	e007      	b.n	8002ec4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f85c 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 f868 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d022      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d01e      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2211      	movs	r2, #17
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	23c0      	movs	r3, #192	@ 0xc0
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f842 	bl	8002f84 <HAL_TIM_IC_CaptureCallback>
 8002f00:	e007      	b.n	8002f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 f835 	bl	8002f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 f841 	bl	8002f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d00c      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d008      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4252      	negs	r2, r2
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f815 	bl	8002f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2240      	movs	r2, #64	@ 0x40
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2240      	movs	r2, #64	@ 0x40
 8002f46:	4013      	ands	r3, r2
 8002f48:	d008      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2241      	movs	r2, #65	@ 0x41
 8002f50:	4252      	negs	r2, r2
 8002f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f824 	bl	8002fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b004      	add	sp, #16
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f6c:	46c0      	nop			@ (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f9c:	46c0      	nop			@ (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fac:	46c0      	nop			@ (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	05db      	lsls	r3, r3, #23
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d007      	beq.n	8002fde <TIM_Base_SetConfig+0x2a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <TIM_Base_SetConfig+0xa8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_Base_SetConfig+0x2a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a21      	ldr	r2, [pc, #132]	@ (8003060 <TIM_Base_SetConfig+0xac>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2270      	movs	r2, #112	@ 0x70
 8002fe2:	4393      	bics	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	05db      	lsls	r3, r3, #23
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d007      	beq.n	800300a <TIM_Base_SetConfig+0x56>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	@ (800305c <TIM_Base_SetConfig+0xa8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d003      	beq.n	800300a <TIM_Base_SetConfig+0x56>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a16      	ldr	r2, [pc, #88]	@ (8003060 <TIM_Base_SetConfig+0xac>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d108      	bne.n	800301c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4a15      	ldr	r2, [pc, #84]	@ (8003064 <TIM_Base_SetConfig+0xb0>)
 800300e:	4013      	ands	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2280      	movs	r2, #128	@ 0x80
 8003020:	4393      	bics	r3, r2
 8003022:	001a      	movs	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2204      	movs	r2, #4
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b004      	add	sp, #16
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40010800 	.word	0x40010800
 8003060:	40011400 	.word	0x40011400
 8003064:	fffffcff 	.word	0xfffffcff

08003068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2238      	movs	r2, #56	@ 0x38
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800307c:	2302      	movs	r3, #2
 800307e:	e042      	b.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2238      	movs	r2, #56	@ 0x38
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2239      	movs	r2, #57	@ 0x39
 800308c:	2102      	movs	r1, #2
 800308e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2270      	movs	r2, #112	@ 0x70
 80030a4:	4393      	bics	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	05db      	lsls	r3, r3, #23
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d009      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a11      	ldr	r2, [pc, #68]	@ (8003110 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d004      	beq.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10c      	bne.n	80030f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2280      	movs	r2, #128	@ 0x80
 80030de:	4393      	bics	r3, r2
 80030e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2239      	movs	r2, #57	@ 0x39
 80030f8:	2101      	movs	r1, #1
 80030fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2238      	movs	r2, #56	@ 0x38
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	40010800 	.word	0x40010800
 8003114:	40011400 	.word	0x40011400

08003118 <lis3mdl_process>:
#include <stdio.h>
#include <string.h>
#include "lis3mdl.h"
#include "lis3mdl_registers.h"

LIS3MDL_Process_Status_t lis3mdl_process(LIS3MDL_Device *devices, uint8_t num_of_devices, volatile uint8_t *spi_cplt_flag){
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b08b      	sub	sp, #44	@ 0x2c
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	230b      	movs	r3, #11
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	1c0a      	adds	r2, r1, #0
 8003128:	701a      	strb	r2, [r3, #0]
	if(devices == NULL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <lis3mdl_process+0x1c>
		return LIS3MDL_PROCESS_ERROR;
 8003130:	2303      	movs	r3, #3
 8003132:	e14e      	b.n	80033d2 <lis3mdl_process+0x2ba>

	static int dev_index = 0;
	if(dev_index == 0){
 8003134:	4ba9      	ldr	r3, [pc, #676]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <lis3mdl_process+0x3a>
		dev_index = get_first_non_idling_device_index(devices, num_of_devices);
 800313c:	230b      	movs	r3, #11
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	0011      	movs	r1, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f000 f950 	bl	80033ec <get_first_non_idling_device_index>
 800314c:	0002      	movs	r2, r0
 800314e:	4ba3      	ldr	r3, [pc, #652]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003150:	601a      	str	r2, [r3, #0]
	}

	if(dev_index < 0){
 8003152:	4ba2      	ldr	r3, [pc, #648]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	da04      	bge.n	8003164 <lis3mdl_process+0x4c>
		dev_index = 0;
 800315a:	4ba0      	ldr	r3, [pc, #640]	@ (80033dc <lis3mdl_process+0x2c4>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
		return LIS3MDL_PROCESS_ALL_DEVICES_IDLING;
 8003160:	2301      	movs	r3, #1
 8003162:	e136      	b.n	80033d2 <lis3mdl_process+0x2ba>
	}

	static uint8_t spi_transaction_started = 0;

	if(spi_transaction_started){
 8003164:	4b9e      	ldr	r3, [pc, #632]	@ (80033e0 <lis3mdl_process+0x2c8>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d047      	beq.n	80031fc <lis3mdl_process+0xe4>
		if(!*spi_cplt_flag)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <lis3mdl_process+0x62>
			return LIS3MDL_PROCESS_WAITING_FOR_SPI_CPLT;
 8003176:	2302      	movs	r3, #2
 8003178:	e12b      	b.n	80033d2 <lis3mdl_process+0x2ba>
		*spi_cplt_flag = 0;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]

		if(lis3mdl_change_state_due_to_spi_cplt(&devices[dev_index].state) == LIS3MDL_STATE_CHANGE_INVALID_CHANGE)
 8003180:	4b96      	ldr	r3, [pc, #600]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	001a      	movs	r2, r3
 8003186:	232c      	movs	r3, #44	@ 0x2c
 8003188:	4353      	muls	r3, r2
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	18d3      	adds	r3, r2, r3
 800318e:	330f      	adds	r3, #15
 8003190:	0018      	movs	r0, r3
 8003192:	f000 fcb5 	bl	8003b00 <lis3mdl_change_state_due_to_spi_cplt>
 8003196:	0003      	movs	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <lis3mdl_process+0x88>
			return LIS3MDL_PROCESS_ERROR;
 800319c:	2303      	movs	r3, #3
 800319e:	e118      	b.n	80033d2 <lis3mdl_process+0x2ba>

		if(devices[dev_index].state != LIS3MDL_WRITING_DATA && devices[dev_index].state != LIS3MDL_READING_DATA){
 80031a0:	4b8e      	ldr	r3, [pc, #568]	@ (80033dc <lis3mdl_process+0x2c4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	001a      	movs	r2, r3
 80031a6:	232c      	movs	r3, #44	@ 0x2c
 80031a8:	4353      	muls	r3, r2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	18d3      	adds	r3, r2, r3
 80031ae:	7bdb      	ldrb	r3, [r3, #15]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d01b      	beq.n	80031ec <lis3mdl_process+0xd4>
 80031b4:	4b89      	ldr	r3, [pc, #548]	@ (80033dc <lis3mdl_process+0x2c4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	001a      	movs	r2, r3
 80031ba:	232c      	movs	r3, #44	@ 0x2c
 80031bc:	4353      	muls	r3, r2
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	18d3      	adds	r3, r2, r3
 80031c2:	7bdb      	ldrb	r3, [r3, #15]
 80031c4:	2b07      	cmp	r3, #7
 80031c6:	d011      	beq.n	80031ec <lis3mdl_process+0xd4>
			devices[dev_index].cs_gpio_port_handle->BSRR = devices[dev_index].cs_pin; // Pulling CS High
 80031c8:	4b84      	ldr	r3, [pc, #528]	@ (80033dc <lis3mdl_process+0x2c4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	001a      	movs	r2, r3
 80031ce:	232c      	movs	r3, #44	@ 0x2c
 80031d0:	4353      	muls	r3, r2
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	18d3      	adds	r3, r2, r3
 80031d6:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 80031d8:	4b80      	ldr	r3, [pc, #512]	@ (80033dc <lis3mdl_process+0x2c4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	001a      	movs	r2, r3
 80031de:	232c      	movs	r3, #44	@ 0x2c
 80031e0:	4353      	muls	r3, r2
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	18d3      	adds	r3, r2, r3
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	000a      	movs	r2, r1
 80031ea:	619a      	str	r2, [r3, #24]
		}

		spi_transaction_started = 0;
 80031ec:	4b7c      	ldr	r3, [pc, #496]	@ (80033e0 <lis3mdl_process+0x2c8>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	701a      	strb	r2, [r3, #0]
		dev_index = 0;
 80031f2:	4b7a      	ldr	r3, [pc, #488]	@ (80033dc <lis3mdl_process+0x2c4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
		return LIS3MDL_PROCESS_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e0ea      	b.n	80033d2 <lis3mdl_process+0x2ba>
	}

	// If spi_transaction was not started
	devices[dev_index].cs_gpio_port_handle->BSRR = (devices[dev_index].cs_pin) << 16; // Pulling CS Low
 80031fc:	4b77      	ldr	r3, [pc, #476]	@ (80033dc <lis3mdl_process+0x2c4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	001a      	movs	r2, r3
 8003202:	232c      	movs	r3, #44	@ 0x2c
 8003204:	4353      	muls	r3, r2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800320c:	0019      	movs	r1, r3
 800320e:	4b73      	ldr	r3, [pc, #460]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	001a      	movs	r2, r3
 8003214:	232c      	movs	r3, #44	@ 0x2c
 8003216:	4353      	muls	r3, r2
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	18d3      	adds	r3, r2, r3
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	040a      	lsls	r2, r1, #16
 8003220:	619a      	str	r2, [r3, #24]
	spi_transaction_started = 1;
 8003222:	4b6f      	ldr	r3, [pc, #444]	@ (80033e0 <lis3mdl_process+0x2c8>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
	switch(devices[dev_index].state){
 8003228:	4b6c      	ldr	r3, [pc, #432]	@ (80033dc <lis3mdl_process+0x2c4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	001a      	movs	r2, r3
 800322e:	232c      	movs	r3, #44	@ 0x2c
 8003230:	4353      	muls	r3, r2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	7bdb      	ldrb	r3, [r3, #15]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d900      	bls.n	800323e <lis3mdl_process+0x126>
 800323c:	e0c8      	b.n	80033d0 <lis3mdl_process+0x2b8>
 800323e:	009a      	lsls	r2, r3, #2
 8003240:	4b68      	ldr	r3, [pc, #416]	@ (80033e4 <lis3mdl_process+0x2cc>)
 8003242:	18d3      	adds	r3, r2, r3
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	469f      	mov	pc, r3
	case LIS3MDL_RESETTING_REGISTERS:
		uint8_t tx_reboot[2] = {LIS3MDL_CTRL_REG2_ADDR, LIS3MDL_REBOOT};
 8003248:	2124      	movs	r1, #36	@ 0x24
 800324a:	187b      	adds	r3, r7, r1
 800324c:	4a66      	ldr	r2, [pc, #408]	@ (80033e8 <lis3mdl_process+0x2d0>)
 800324e:	801a      	strh	r2, [r3, #0]
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,tx_reboot, 2) != HAL_OK)
 8003250:	4b62      	ldr	r3, [pc, #392]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	001a      	movs	r2, r3
 8003256:	232c      	movs	r3, #44	@ 0x2c
 8003258:	4353      	muls	r3, r2
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	18d3      	adds	r3, r2, r3
 800325e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003260:	1879      	adds	r1, r7, r1
 8003262:	2202      	movs	r2, #2
 8003264:	0018      	movs	r0, r3
 8003266:	f7fe ff17 	bl	8002098 <HAL_SPI_Transmit_DMA>
 800326a:	1e03      	subs	r3, r0, #0
 800326c:	d001      	beq.n	8003272 <lis3mdl_process+0x15a>
			return LIS3MDL_PROCESS_ERROR;
 800326e:	2303      	movs	r3, #3
 8003270:	e0af      	b.n	80033d2 <lis3mdl_process+0x2ba>
		return LIS3MDL_PROCESS_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e0ad      	b.n	80033d2 <lis3mdl_process+0x2ba>
	case LIS3MDL_INITIALIZING_OFFSET_REGS:
		uint8_t tx_offsets[2];
		tx_offsets[0] = LIS3MDL_OFFSET_X_REG_L_M_ADDR;
 8003276:	2020      	movs	r0, #32
 8003278:	183b      	adds	r3, r7, r0
 800327a:	2205      	movs	r2, #5
 800327c:	701a      	strb	r2, [r3, #0]
		memcpy(tx_offsets + 1, devices[dev_index].config_regs.offsets, 1);
 800327e:	183b      	adds	r3, r7, r0
 8003280:	3301      	adds	r3, #1
 8003282:	4a56      	ldr	r2, [pc, #344]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	0011      	movs	r1, r2
 8003288:	222c      	movs	r2, #44	@ 0x2c
 800328a:	434a      	muls	r2, r1
 800328c:	68f9      	ldr	r1, [r7, #12]
 800328e:	188a      	adds	r2, r1, r2
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,tx_offsets, 2) != HAL_OK)
 8003294:	4b51      	ldr	r3, [pc, #324]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	001a      	movs	r2, r3
 800329a:	232c      	movs	r3, #44	@ 0x2c
 800329c:	4353      	muls	r3, r2
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	18d3      	adds	r3, r2, r3
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	1839      	adds	r1, r7, r0
 80032a6:	2202      	movs	r2, #2
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7fe fef5 	bl	8002098 <HAL_SPI_Transmit_DMA>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d001      	beq.n	80032b6 <lis3mdl_process+0x19e>
			return LIS3MDL_PROCESS_ERROR;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e08d      	b.n	80033d2 <lis3mdl_process+0x2ba>
		return LIS3MDL_PROCESS_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e08b      	b.n	80033d2 <lis3mdl_process+0x2ba>

	case LIS3MDL_INITIALIZING_CTRL_REGS:
		uint8_t tx_ctrls[6];
		tx_ctrls[0] = LIS3MDL_CTRL_REG1_ADDR | LIS3MDL_MD_BIT;
 80032ba:	2418      	movs	r4, #24
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	2260      	movs	r2, #96	@ 0x60
 80032c0:	701a      	strb	r2, [r3, #0]
		memcpy(tx_ctrls + 1, devices[dev_index].config_regs.ctrls, 5);
 80032c2:	193b      	adds	r3, r7, r4
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a45      	ldr	r2, [pc, #276]	@ (80033dc <lis3mdl_process+0x2c4>)
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	0011      	movs	r1, r2
 80032cc:	222c      	movs	r2, #44	@ 0x2c
 80032ce:	434a      	muls	r2, r1
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	188a      	adds	r2, r1, r2
 80032d4:	1d91      	adds	r1, r2, #6
 80032d6:	2205      	movs	r2, #5
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 fc73 	bl	8003bc4 <memcpy>
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,tx_ctrls, 6) != HAL_OK)
 80032de:	4b3f      	ldr	r3, [pc, #252]	@ (80033dc <lis3mdl_process+0x2c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	001a      	movs	r2, r3
 80032e4:	232c      	movs	r3, #44	@ 0x2c
 80032e6:	4353      	muls	r3, r2
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ee:	1939      	adds	r1, r7, r4
 80032f0:	2206      	movs	r2, #6
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fe fed0 	bl	8002098 <HAL_SPI_Transmit_DMA>
 80032f8:	1e03      	subs	r3, r0, #0
 80032fa:	d001      	beq.n	8003300 <lis3mdl_process+0x1e8>
			return LIS3MDL_PROCESS_ERROR;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e068      	b.n	80033d2 <lis3mdl_process+0x2ba>
		return LIS3MDL_PROCESS_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e066      	b.n	80033d2 <lis3mdl_process+0x2ba>

	case LIS3MDL_INITIALIZING_INT_REGS:
		uint8_t tx_ints[5];
		tx_ints[0] = LIS3MDL_INT_CFG_REG_ADDR| LIS3MDL_MD_BIT;
 8003304:	2410      	movs	r4, #16
 8003306:	193b      	adds	r3, r7, r4
 8003308:	2270      	movs	r2, #112	@ 0x70
 800330a:	701a      	strb	r2, [r3, #0]
		memcpy(tx_ints + 1, devices[dev_index].config_regs.ints, 4);
 800330c:	193b      	adds	r3, r7, r4
 800330e:	3301      	adds	r3, #1
 8003310:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	0011      	movs	r1, r2
 8003316:	222c      	movs	r2, #44	@ 0x2c
 8003318:	434a      	muls	r2, r1
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	188a      	adds	r2, r1, r2
 800331e:	320b      	adds	r2, #11
 8003320:	0011      	movs	r1, r2
 8003322:	2204      	movs	r2, #4
 8003324:	0018      	movs	r0, r3
 8003326:	f000 fc4d 	bl	8003bc4 <memcpy>
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,tx_ints, 5) != HAL_OK)
 800332a:	4b2c      	ldr	r3, [pc, #176]	@ (80033dc <lis3mdl_process+0x2c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	001a      	movs	r2, r3
 8003330:	232c      	movs	r3, #44	@ 0x2c
 8003332:	4353      	muls	r3, r2
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	18d3      	adds	r3, r2, r3
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	1939      	adds	r1, r7, r4
 800333c:	2205      	movs	r2, #5
 800333e:	0018      	movs	r0, r3
 8003340:	f7fe feaa 	bl	8002098 <HAL_SPI_Transmit_DMA>
 8003344:	1e03      	subs	r3, r0, #0
 8003346:	d001      	beq.n	800334c <lis3mdl_process+0x234>
			return LIS3MDL_PROCESS_ERROR;
 8003348:	2303      	movs	r3, #3
 800334a:	e042      	b.n	80033d2 <lis3mdl_process+0x2ba>
		return LIS3MDL_PROCESS_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e040      	b.n	80033d2 <lis3mdl_process+0x2ba>

	case LIS3MDL_SENDING_ADDRESS_TO_WRITE_TO:
		// Start the SPI DMA
		return LIS3MDL_PROCESS_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e03e      	b.n	80033d2 <lis3mdl_process+0x2ba>

	case LIS3MDL_SENDING_ADDRESS_TO_READ_FROM:
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,&devices[dev_index].reg_addr, 1) != HAL_OK)
 8003354:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	001a      	movs	r2, r3
 800335a:	232c      	movs	r3, #44	@ 0x2c
 800335c:	4353      	muls	r3, r2
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003364:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <lis3mdl_process+0x2c4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	001a      	movs	r2, r3
 800336a:	232c      	movs	r3, #44	@ 0x2c
 800336c:	4353      	muls	r3, r2
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	18d3      	adds	r3, r2, r3
 8003372:	3310      	adds	r3, #16
 8003374:	2201      	movs	r2, #1
 8003376:	0019      	movs	r1, r3
 8003378:	f7fe fe8e 	bl	8002098 <HAL_SPI_Transmit_DMA>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d001      	beq.n	8003384 <lis3mdl_process+0x26c>
			return LIS3MDL_PROCESS_ERROR;
 8003380:	2303      	movs	r3, #3
 8003382:	e026      	b.n	80033d2 <lis3mdl_process+0x2ba>
		return LIS3MDL_PROCESS_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	e024      	b.n	80033d2 <lis3mdl_process+0x2ba>

	case LIS3MDL_WRITING_DATA:
		// Start the SPI DMA
		return LIS3MDL_PROCESS_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e022      	b.n	80033d2 <lis3mdl_process+0x2ba>

	case LIS3MDL_READING_DATA:
		if(HAL_SPI_Receive_DMA(devices[dev_index].hspi,devices[dev_index].rx, devices[dev_index].data_size) != HAL_OK)
 800338c:	4b13      	ldr	r3, [pc, #76]	@ (80033dc <lis3mdl_process+0x2c4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	001a      	movs	r2, r3
 8003392:	232c      	movs	r3, #44	@ 0x2c
 8003394:	4353      	muls	r3, r2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	18d3      	adds	r3, r2, r3
 800339a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800339c:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <lis3mdl_process+0x2c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	001a      	movs	r2, r3
 80033a2:	232c      	movs	r3, #44	@ 0x2c
 80033a4:	4353      	muls	r3, r2
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	3317      	adds	r3, #23
 80033ac:	0019      	movs	r1, r3
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <lis3mdl_process+0x2c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	001a      	movs	r2, r3
 80033b4:	232c      	movs	r3, #44	@ 0x2c
 80033b6:	4353      	muls	r3, r2
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	18d3      	adds	r3, r2, r3
 80033bc:	7f5b      	ldrb	r3, [r3, #29]
 80033be:	001a      	movs	r2, r3
 80033c0:	f7fe ff20 	bl	8002204 <HAL_SPI_Receive_DMA>
 80033c4:	1e03      	subs	r3, r0, #0
 80033c6:	d001      	beq.n	80033cc <lis3mdl_process+0x2b4>
			return LIS3MDL_PROCESS_ERROR;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e002      	b.n	80033d2 <lis3mdl_process+0x2ba>
		return LIS3MDL_PROCESS_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <lis3mdl_process+0x2ba>

	default:
		return LIS3MDL_PROCESS_ERROR;
 80033d0:	2303      	movs	r3, #3
	}

	return LIS3MDL_PROCESS_ERROR;
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b00b      	add	sp, #44	@ 0x2c
 80033d8:	bd90      	pop	{r4, r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	2000016c 	.word	0x2000016c
 80033e0:	20000170 	.word	0x20000170
 80033e4:	08003c0c 	.word	0x08003c0c
 80033e8:	00000821 	.word	0x00000821

080033ec <get_first_non_idling_device_index>:

int get_first_non_idling_device_index(LIS3MDL_Device *devices, uint8_t num_of_devices){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	000a      	movs	r2, r1
 80033f6:	1cfb      	adds	r3, r7, #3
 80033f8:	701a      	strb	r2, [r3, #0]
	if(devices == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <get_first_non_idling_device_index+0x1a>
		return -1;
 8003400:	2301      	movs	r3, #1
 8003402:	425b      	negs	r3, r3
 8003404:	e016      	b.n	8003434 <get_first_non_idling_device_index+0x48>

	for(int i=0; i<num_of_devices; i++){
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e00c      	b.n	8003426 <get_first_non_idling_device_index+0x3a>
		if(devices[i].state != LIS3MDL_IDLE)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	222c      	movs	r2, #44	@ 0x2c
 8003410:	4353      	muls	r3, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	7bdb      	ldrb	r3, [r3, #15]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d001      	beq.n	8003420 <get_first_non_idling_device_index+0x34>
			return i;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	e009      	b.n	8003434 <get_first_non_idling_device_index+0x48>
	for(int i=0; i<num_of_devices; i++){
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	1cfb      	adds	r3, r7, #3
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	429a      	cmp	r2, r3
 800342e:	dbed      	blt.n	800340c <get_first_non_idling_device_index+0x20>
	}

	return -1;
 8003430:	2301      	movs	r3, #1
 8003432:	425b      	negs	r3, r3
}
 8003434:	0018      	movs	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}

0800343c <lis3mdl_read_reg>:

HAL_StatusTypeDef lis3mdl_read_reg(LIS3MDL_Device *devices, uint8_t num_of_devices, uint8_t device_index, uint8_t reg, uint8_t size){
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	000c      	movs	r4, r1
 8003446:	0010      	movs	r0, r2
 8003448:	0019      	movs	r1, r3
 800344a:	1cfb      	adds	r3, r7, #3
 800344c:	1c22      	adds	r2, r4, #0
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	1cbb      	adds	r3, r7, #2
 8003452:	1c02      	adds	r2, r0, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	1c7b      	adds	r3, r7, #1
 8003458:	1c0a      	adds	r2, r1, #0
 800345a:	701a      	strb	r2, [r3, #0]
	if(devices == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <lis3mdl_read_reg+0x2a>
		return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e059      	b.n	800351a <lis3mdl_read_reg+0xde>

	// Take new commands only if all of the devices are idling
	if(get_first_non_idling_device_index(devices, num_of_devices) >= 0)
 8003466:	1cfb      	adds	r3, r7, #3
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0011      	movs	r1, r2
 800346e:	0018      	movs	r0, r3
 8003470:	f7ff ffbc 	bl	80033ec <get_first_non_idling_device_index>
 8003474:	1e03      	subs	r3, r0, #0
 8003476:	db01      	blt.n	800347c <lis3mdl_read_reg+0x40>
		return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
 800347a:	e04e      	b.n	800351a <lis3mdl_read_reg+0xde>

	if((reg & LIS3MDL_READ_BIT) == LIS3MDL_READ_BIT || (reg & LIS3MDL_MD_BIT) == LIS3MDL_MD_BIT)
 800347c:	1c7b      	adds	r3, r7, #1
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b25b      	sxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	db04      	blt.n	8003490 <lis3mdl_read_reg+0x54>
 8003486:	1c7b      	adds	r3, r7, #1
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	4013      	ands	r3, r2
 800348e:	d001      	beq.n	8003494 <lis3mdl_read_reg+0x58>
		return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e042      	b.n	800351a <lis3mdl_read_reg+0xde>

	if(size < 1 || size > LIS3MDL_BUFFER_SIZE)
 8003494:	2218      	movs	r2, #24
 8003496:	18bb      	adds	r3, r7, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <lis3mdl_read_reg+0x6a>
 800349e:	18bb      	adds	r3, r7, r2
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d901      	bls.n	80034aa <lis3mdl_read_reg+0x6e>
		return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e037      	b.n	800351a <lis3mdl_read_reg+0xde>

	if(lis3mdl_clear_data(&devices[device_index])!=0)
 80034aa:	1cbb      	adds	r3, r7, #2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	222c      	movs	r2, #44	@ 0x2c
 80034b0:	4353      	muls	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	18d3      	adds	r3, r2, r3
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f833 	bl	8003522 <lis3mdl_clear_data>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d001      	beq.n	80034c4 <lis3mdl_read_reg+0x88>
		return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e02a      	b.n	800351a <lis3mdl_read_reg+0xde>

	devices[device_index].reg_addr = reg | LIS3MDL_READ_BIT;
 80034c4:	1cbb      	adds	r3, r7, #2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	222c      	movs	r2, #44	@ 0x2c
 80034ca:	4353      	muls	r3, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	18d3      	adds	r3, r2, r3
 80034d0:	1c7a      	adds	r2, r7, #1
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	2180      	movs	r1, #128	@ 0x80
 80034d6:	4249      	negs	r1, r1
 80034d8:	430a      	orrs	r2, r1
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	741a      	strb	r2, [r3, #16]
	if(size > 1)
 80034de:	2318      	movs	r3, #24
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d905      	bls.n	80034f4 <lis3mdl_read_reg+0xb8>
		reg |= LIS3MDL_MD_BIT;
 80034e8:	1c7b      	adds	r3, r7, #1
 80034ea:	1c7a      	adds	r2, r7, #1
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	2140      	movs	r1, #64	@ 0x40
 80034f0:	430a      	orrs	r2, r1
 80034f2:	701a      	strb	r2, [r3, #0]
	devices[device_index].data_size = size;
 80034f4:	1cbb      	adds	r3, r7, #2
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	222c      	movs	r2, #44	@ 0x2c
 80034fa:	4353      	muls	r3, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	18d2      	adds	r2, r2, r3
 8003500:	2318      	movs	r3, #24
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	7753      	strb	r3, [r2, #29]

	devices[device_index].state = LIS3MDL_SENDING_ADDRESS_TO_READ_FROM;
 8003508:	1cbb      	adds	r3, r7, #2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	222c      	movs	r2, #44	@ 0x2c
 800350e:	4353      	muls	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	18d3      	adds	r3, r2, r3
 8003514:	2205      	movs	r2, #5
 8003516:	73da      	strb	r2, [r3, #15]

	return HAL_OK;
 8003518:	2300      	movs	r3, #0

}
 800351a:	0018      	movs	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	b003      	add	sp, #12
 8003520:	bd90      	pop	{r4, r7, pc}

08003522 <lis3mdl_clear_data>:

uint8_t lis3mdl_clear_data(LIS3MDL_Device *device){
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	if(device == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <lis3mdl_clear_data+0x12>
		return 1;
 8003530:	2301      	movs	r3, #1
 8003532:	e017      	b.n	8003564 <lis3mdl_clear_data+0x42>

	memset(device->tx, 0, LIS3MDL_BUFFER_SIZE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3311      	adds	r3, #17
 8003538:	2206      	movs	r2, #6
 800353a:	2100      	movs	r1, #0
 800353c:	0018      	movs	r0, r3
 800353e:	f000 fb15 	bl	8003b6c <memset>
	memset(device->rx, 0, LIS3MDL_BUFFER_SIZE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3317      	adds	r3, #23
 8003546:	2206      	movs	r2, #6
 8003548:	2100      	movs	r1, #0
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fb0e 	bl	8003b6c <memset>
	device->reg_addr = 0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	741a      	strb	r2, [r3, #16]
	device->data_size = 0;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	775a      	strb	r2, [r3, #29]
	device->read_data_available = 0;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	779a      	strb	r2, [r3, #30]
	return 0;
 8003562:	2300      	movs	r3, #0
}
 8003564:	0018      	movs	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}

0800356c <lis3mdl_initialize_device_struct>:
 */

#include "lis3mdl_device.h"
#include "string.h"

uint8_t lis3mdl_initialize_device_struct(LIS3MDL_Device *device, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_gpio_port_handle, uint16_t cs_pin){
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	001a      	movs	r2, r3
 800357a:	1cbb      	adds	r3, r7, #2
 800357c:	801a      	strh	r2, [r3, #0]
	if (device == NULL || hspi == NULL || cs_gpio_port_handle == NULL)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <lis3mdl_initialize_device_struct+0x24>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <lis3mdl_initialize_device_struct+0x24>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <lis3mdl_initialize_device_struct+0x28>
		return 1;
 8003590:	2301      	movs	r3, #1
 8003592:	e024      	b.n	80035de <lis3mdl_initialize_device_struct+0x72>

	device->state = LIS3MDL_RESETTING_REGISTERS;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	73da      	strb	r2, [r3, #15]

	device->reg_addr = 0;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	741a      	strb	r2, [r3, #16]
	device->data_size = 0;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	775a      	strb	r2, [r3, #29]
	device->read_data_available = 0;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	779a      	strb	r2, [r3, #30]
	memset(device->rx, 0, LIS3MDL_BUFFER_SIZE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3317      	adds	r3, #23
 80035b0:	2206      	movs	r2, #6
 80035b2:	2100      	movs	r1, #0
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 fad9 	bl	8003b6c <memset>
	memset(device->tx, 0, LIS3MDL_BUFFER_SIZE);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3311      	adds	r3, #17
 80035be:	2206      	movs	r2, #6
 80035c0:	2100      	movs	r1, #0
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 fad2 	bl	8003b6c <memset>
	device->hspi = hspi;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	629a      	str	r2, [r3, #40]	@ 0x28
	device->cs_gpio_port_handle = cs_gpio_port_handle;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]
	device->cs_pin = cs_pin;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1cba      	adds	r2, r7, #2
 80035d8:	8812      	ldrh	r2, [r2, #0]
 80035da:	849a      	strh	r2, [r3, #36]	@ 0x24

	return 0;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <lis3mdl_setup_config_registers>:

uint8_t lis3mdl_setup_config_registers(LIS3MDL_Device *device, LIS3MDL_Init_Params input_params){
 80035e6:	b084      	sub	sp, #16
 80035e8:	b5b0      	push	{r4, r5, r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af08      	add	r7, sp, #32
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	2004      	movs	r0, #4
 80035f2:	2418      	movs	r4, #24
 80035f4:	1900      	adds	r0, r0, r4
 80035f6:	19c0      	adds	r0, r0, r7
 80035f8:	6001      	str	r1, [r0, #0]
 80035fa:	6042      	str	r2, [r0, #4]
 80035fc:	6083      	str	r3, [r0, #8]
	return lis3mdl_put_params_into_registers(input_params, device->config_regs.offsets, device->config_regs.ctrls, device->config_regs.ints);
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	1d99      	adds	r1, r3, #6
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	330b      	adds	r3, #11
 8003608:	0018      	movs	r0, r3
 800360a:	2304      	movs	r3, #4
 800360c:	191b      	adds	r3, r3, r4
 800360e:	19db      	adds	r3, r3, r7
 8003610:	9006      	str	r0, [sp, #24]
 8003612:	9105      	str	r1, [sp, #20]
 8003614:	9204      	str	r2, [sp, #16]
 8003616:	466a      	mov	r2, sp
 8003618:	0011      	movs	r1, r2
 800361a:	001a      	movs	r2, r3
 800361c:	3210      	adds	r2, #16
 800361e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003620:	c131      	stmia	r1!, {r0, r4, r5}
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	600a      	str	r2, [r1, #0]
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f000 f86a 	bl	8003706 <lis3mdl_put_params_into_registers>
 8003632:	0003      	movs	r3, r0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bcb0      	pop	{r4, r5, r7}
 800363c:	bc08      	pop	{r3}
 800363e:	b004      	add	sp, #16
 8003640:	4718      	bx	r3

08003642 <lis3mdl_set_default_params>:

#include <stdio.h>
#include "lis3mdl_init_params.h"
#include "lis3mdl_registers.h"

uint8_t lis3mdl_set_default_params(LIS3MDL_Init_Params *init_params){
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
	if(init_params == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <lis3mdl_set_default_params+0x12>
		return 1;
 8003650:	2301      	movs	r3, #1
 8003652:	e054      	b.n	80036fe <lis3mdl_set_default_params+0xbc>

	init_params->offset_x = 0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	801a      	strh	r2, [r3, #0]
	init_params->offset_y = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	805a      	strh	r2, [r3, #2]
	init_params->offset_z = 0;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	809a      	strh	r2, [r3, #4]

	init_params->temp_en = 0;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	719a      	strb	r2, [r3, #6]
	init_params->xy_operation_mode = LIS3MDL_MEDIUM_PERFORMANCE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	71da      	strb	r2, [r3, #7]
	init_params->output_data_rate = LIS3MDL_ODR_10;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	721a      	strb	r2, [r3, #8]
	init_params->fast_odr = 0;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	725a      	strb	r2, [r3, #9]
	init_params->self_test = 0;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	729a      	strb	r2, [r3, #10]

	init_params->full_scale = LIS3MDL_FULL_SCALE_16_GAUSS;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2203      	movs	r2, #3
 8003688:	72da      	strb	r2, [r3, #11]

	init_params->low_power_mode = 0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	731a      	strb	r2, [r3, #12]
	init_params->spi_interface_mode = 0;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	735a      	strb	r2, [r3, #13]
	init_params->conversion_mode = LIS3MDL_CONTINIOUS_CONVERSION;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	739a      	strb	r2, [r3, #14]

	init_params->z_operation_mode = LIS3MDL_MEDIUM_PERFORMANCE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	73da      	strb	r2, [r3, #15]

	init_params->fast_read = 0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	741a      	strb	r2, [r3, #16]
	init_params->block_data_update = 1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	745a      	strb	r2, [r3, #17]

	init_params->x_interrupt_generation = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	749a      	strb	r2, [r3, #18]
	init_params->y_interrupt_generation = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	74da      	strb	r2, [r3, #19]
	init_params->z_interrupt_generation = 0;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	751a      	strb	r2, [r3, #20]
	init_params->interrupt_active_configuration = 0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	755a      	strb	r2, [r3, #21]
	init_params->latch_interrupt = 0;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	759a      	strb	r2, [r3, #22]
	init_params->int_pin = 0;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	75da      	strb	r2, [r3, #23]

	init_params->positive_thresh_x_enable = 0;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	761a      	strb	r2, [r3, #24]
	init_params->positive_thresh_y_enable = 0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	765a      	strb	r2, [r3, #25]
	init_params->positive_thresh_z_enable = 0;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	769a      	strb	r2, [r3, #26]
	init_params->negative_thresh_x_enable = 0;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	76da      	strb	r2, [r3, #27]
	init_params->negative_thresh_y_enable = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]
	init_params->negative_thresh_z_enable = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	775a      	strb	r2, [r3, #29]

	init_params->interrupt_threshold = 0;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	83da      	strh	r2, [r3, #30]
	return 0;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b002      	add	sp, #8
 8003704:	bd80      	pop	{r7, pc}

08003706 <lis3mdl_put_params_into_registers>:

uint8_t lis3mdl_put_params_into_registers(LIS3MDL_Init_Params init_params, uint8_t *offset_regs, uint8_t *ctrl_regs, uint8_t *int_regs){
 8003706:	b084      	sub	sp, #16
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	af00      	add	r7, sp, #0
 800370c:	240c      	movs	r4, #12
 800370e:	193c      	adds	r4, r7, r4
 8003710:	6020      	str	r0, [r4, #0]
 8003712:	6061      	str	r1, [r4, #4]
 8003714:	60a2      	str	r2, [r4, #8]
 8003716:	60e3      	str	r3, [r4, #12]
	if(offset_regs == NULL || ctrl_regs == NULL || int_regs == NULL)
 8003718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <lis3mdl_put_params_into_registers+0x24>
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <lis3mdl_put_params_into_registers+0x24>
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <lis3mdl_put_params_into_registers+0x28>
		return 1;
 800372a:	2301      	movs	r3, #1
 800372c:	e1e1      	b.n	8003af2 <lis3mdl_put_params_into_registers+0x3ec>

	offset_regs[0] = (uint8_t)(init_params.offset_x & 0x00FF);
 800372e:	200c      	movs	r0, #12
 8003730:	183b      	adds	r3, r7, r0
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003738:	701a      	strb	r2, [r3, #0]
	offset_regs[1] = (uint8_t)((init_params.offset_x & 0xFF00)>>8);
 800373a:	183b      	adds	r3, r7, r0
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	b29a      	uxth	r2, r3
 8003742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003744:	3301      	adds	r3, #1
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]
	offset_regs[2] = (uint8_t)(init_params.offset_y & 0x00FF);
 800374a:	183b      	adds	r3, r7, r0
 800374c:	885a      	ldrh	r2, [r3, #2]
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	3302      	adds	r3, #2
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
	offset_regs[3] = (uint8_t)((init_params.offset_y & 0xFF00)>>8);
 8003756:	183b      	adds	r3, r7, r0
 8003758:	885b      	ldrh	r3, [r3, #2]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	b29a      	uxth	r2, r3
 800375e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003760:	3303      	adds	r3, #3
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]
	offset_regs[4] = (uint8_t)(init_params.offset_z & 0x00FF);
 8003766:	183b      	adds	r3, r7, r0
 8003768:	889a      	ldrh	r2, [r3, #4]
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	3304      	adds	r3, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]
	offset_regs[5] = (uint8_t)((init_params.offset_z & 0xFF00)>>8);
 8003772:	183b      	adds	r3, r7, r0
 8003774:	889b      	ldrh	r3, [r3, #4]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b29a      	uxth	r2, r3
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	3305      	adds	r3, #5
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

	ctrl_regs[0] = 0;
 8003782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.temp_en << 7) & LIS3MDL_TEMP_EN;
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b25a      	sxtb	r2, r3
 800378e:	183b      	adds	r3, r7, r0
 8003790:	799b      	ldrb	r3, [r3, #6]
 8003792:	b25b      	sxtb	r3, r3
 8003794:	01db      	lsls	r3, r3, #7
 8003796:	b25b      	sxtb	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b25b      	sxtb	r3, r3
 800379c:	b2da      	uxtb	r2, r3
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.xy_operation_mode << 5) & LIS3MDL_XY_OPERATING_MODE;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b25a      	sxtb	r2, r3
 80037a8:	183b      	adds	r3, r7, r0
 80037aa:	79db      	ldrb	r3, [r3, #7]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	b25b      	sxtb	r3, r3
 80037b2:	2160      	movs	r1, #96	@ 0x60
 80037b4:	400b      	ands	r3, r1
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	4313      	orrs	r3, r2
 80037ba:	b25b      	sxtb	r3, r3
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.output_data_rate << 2) & LIS3MDL_ODR;
 80037c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b25a      	sxtb	r2, r3
 80037c8:	183b      	adds	r3, r7, r0
 80037ca:	7a1b      	ldrb	r3, [r3, #8]
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	211c      	movs	r1, #28
 80037d4:	400b      	ands	r3, r1
 80037d6:	b25b      	sxtb	r3, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.fast_odr << 1) & LIS3MDL_FAST_ODR;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	b25a      	sxtb	r2, r3
 80037e8:	183b      	adds	r3, r7, r0
 80037ea:	7a5b      	ldrb	r3, [r3, #9]
 80037ec:	b25b      	sxtb	r3, r3
 80037ee:	18db      	adds	r3, r3, r3
 80037f0:	b25b      	sxtb	r3, r3
 80037f2:	2102      	movs	r1, #2
 80037f4:	400b      	ands	r3, r1
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.self_test << 0) & LIS3MDL_SELF_TEST;
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b25a      	sxtb	r2, r3
 8003808:	183b      	adds	r3, r7, r0
 800380a:	7a9b      	ldrb	r3, [r3, #10]
 800380c:	b25b      	sxtb	r3, r3
 800380e:	2101      	movs	r1, #1
 8003810:	400b      	ands	r3, r1
 8003812:	b25b      	sxtb	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	b25b      	sxtb	r3, r3
 8003818:	b2da      	uxtb	r2, r3
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	701a      	strb	r2, [r3, #0]

	ctrl_regs[1] = 0;
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	3301      	adds	r3, #1
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
	ctrl_regs[1] |= (init_params.full_scale << 5) & LIS3MDL_FULL_SCALE;
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	3301      	adds	r3, #1
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b25a      	sxtb	r2, r3
 800382e:	183b      	adds	r3, r7, r0
 8003830:	7adb      	ldrb	r3, [r3, #11]
 8003832:	b25b      	sxtb	r3, r3
 8003834:	015b      	lsls	r3, r3, #5
 8003836:	b25b      	sxtb	r3, r3
 8003838:	2160      	movs	r1, #96	@ 0x60
 800383a:	400b      	ands	r3, r1
 800383c:	b25b      	sxtb	r3, r3
 800383e:	4313      	orrs	r3, r2
 8003840:	b25a      	sxtb	r2, r3
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	3301      	adds	r3, #1
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

	ctrl_regs[2] = 0;
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	3302      	adds	r3, #2
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
	ctrl_regs[2] |= (init_params.low_power_mode << 5) & LIS3MDL_LP;
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	3302      	adds	r3, #2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b25a      	sxtb	r2, r3
 800385a:	183b      	adds	r3, r7, r0
 800385c:	7b1b      	ldrb	r3, [r3, #12]
 800385e:	b25b      	sxtb	r3, r3
 8003860:	015b      	lsls	r3, r3, #5
 8003862:	b25b      	sxtb	r3, r3
 8003864:	2120      	movs	r1, #32
 8003866:	400b      	ands	r3, r1
 8003868:	b25b      	sxtb	r3, r3
 800386a:	4313      	orrs	r3, r2
 800386c:	b25a      	sxtb	r2, r3
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	3302      	adds	r3, #2
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
	ctrl_regs[2] |= (init_params.spi_interface_mode << 2) & LIS3MDL_SIM;
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	3302      	adds	r3, #2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	b25a      	sxtb	r2, r3
 800387e:	183b      	adds	r3, r7, r0
 8003880:	7b5b      	ldrb	r3, [r3, #13]
 8003882:	b25b      	sxtb	r3, r3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	b25b      	sxtb	r3, r3
 8003888:	2104      	movs	r1, #4
 800388a:	400b      	ands	r3, r1
 800388c:	b25b      	sxtb	r3, r3
 800388e:	4313      	orrs	r3, r2
 8003890:	b25a      	sxtb	r2, r3
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	3302      	adds	r3, #2
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
	ctrl_regs[2] |= (init_params.conversion_mode << 0) & LIS3MDL_MD;
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	3302      	adds	r3, #2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b25a      	sxtb	r2, r3
 80038a2:	183b      	adds	r3, r7, r0
 80038a4:	7b9b      	ldrb	r3, [r3, #14]
 80038a6:	b25b      	sxtb	r3, r3
 80038a8:	2103      	movs	r1, #3
 80038aa:	400b      	ands	r3, r1
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	4313      	orrs	r3, r2
 80038b0:	b25a      	sxtb	r2, r3
 80038b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b4:	3302      	adds	r3, #2
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

	ctrl_regs[3] = 0;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	3303      	adds	r3, #3
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
	ctrl_regs[3] |= (init_params.z_operation_mode << 2) & LIS3MDL_Z_OPERATING_MODE;
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	3303      	adds	r3, #3
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b25a      	sxtb	r2, r3
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	7bdb      	ldrb	r3, [r3, #15]
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	210c      	movs	r1, #12
 80038d6:	400b      	ands	r3, r1
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	4313      	orrs	r3, r2
 80038dc:	b25a      	sxtb	r2, r3
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	3303      	adds	r3, #3
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

	ctrl_regs[4] = 0;
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	3304      	adds	r3, #4
 80038ea:	2200      	movs	r2, #0
 80038ec:	701a      	strb	r2, [r3, #0]
	ctrl_regs[4] |= (init_params.fast_read << 7) & LIS3MDL_FAST_READ;
 80038ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f0:	3304      	adds	r3, #4
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	b25a      	sxtb	r2, r3
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	7c1b      	ldrb	r3, [r3, #16]
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	01db      	lsls	r3, r3, #7
 80038fe:	b25b      	sxtb	r3, r3
 8003900:	4313      	orrs	r3, r2
 8003902:	b25a      	sxtb	r2, r3
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	3304      	adds	r3, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
	ctrl_regs[4] |= (init_params.fast_read << 6) & LIS3MDL_BDU;
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	3304      	adds	r3, #4
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b25a      	sxtb	r2, r3
 8003914:	183b      	adds	r3, r7, r0
 8003916:	7c1b      	ldrb	r3, [r3, #16]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	019b      	lsls	r3, r3, #6
 800391c:	b25b      	sxtb	r3, r3
 800391e:	2140      	movs	r1, #64	@ 0x40
 8003920:	400b      	ands	r3, r1
 8003922:	b25b      	sxtb	r3, r3
 8003924:	4313      	orrs	r3, r2
 8003926:	b25a      	sxtb	r2, r3
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	3304      	adds	r3, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

	int_regs[0] = 0;
 8003930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.x_interrupt_generation << 7) & LIS3MDL_XIEN;
 8003936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b25a      	sxtb	r2, r3
 800393c:	183b      	adds	r3, r7, r0
 800393e:	7c9b      	ldrb	r3, [r3, #18]
 8003940:	b25b      	sxtb	r3, r3
 8003942:	01db      	lsls	r3, r3, #7
 8003944:	b25b      	sxtb	r3, r3
 8003946:	4313      	orrs	r3, r2
 8003948:	b25b      	sxtb	r3, r3
 800394a:	b2da      	uxtb	r2, r3
 800394c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394e:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.y_interrupt_generation << 6) & LIS3MDL_YIEN;
 8003950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b25a      	sxtb	r2, r3
 8003956:	183b      	adds	r3, r7, r0
 8003958:	7cdb      	ldrb	r3, [r3, #19]
 800395a:	b25b      	sxtb	r3, r3
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	b25b      	sxtb	r3, r3
 8003960:	2140      	movs	r1, #64	@ 0x40
 8003962:	400b      	ands	r3, r1
 8003964:	b25b      	sxtb	r3, r3
 8003966:	4313      	orrs	r3, r2
 8003968:	b25b      	sxtb	r3, r3
 800396a:	b2da      	uxtb	r2, r3
 800396c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396e:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.z_interrupt_generation << 5) & LIS3MDL_YIEN;
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b25a      	sxtb	r2, r3
 8003976:	183b      	adds	r3, r7, r0
 8003978:	7d1b      	ldrb	r3, [r3, #20]
 800397a:	b25b      	sxtb	r3, r3
 800397c:	015b      	lsls	r3, r3, #5
 800397e:	b25b      	sxtb	r3, r3
 8003980:	2140      	movs	r1, #64	@ 0x40
 8003982:	400b      	ands	r3, r1
 8003984:	b25b      	sxtb	r3, r3
 8003986:	4313      	orrs	r3, r2
 8003988:	b25b      	sxtb	r3, r3
 800398a:	b2da      	uxtb	r2, r3
 800398c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398e:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= 0x08; // Reserved
 8003990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2208      	movs	r2, #8
 8003996:	4313      	orrs	r3, r2
 8003998:	b2da      	uxtb	r2, r3
 800399a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399c:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.interrupt_active_configuration << 2) & LIS3MDL_IEA;
 800399e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b25a      	sxtb	r2, r3
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	7d5b      	ldrb	r3, [r3, #21]
 80039a8:	b25b      	sxtb	r3, r3
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	2104      	movs	r1, #4
 80039b0:	400b      	ands	r3, r1
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039bc:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.latch_interrupt << 1) & LIS3MDL_LIR;
 80039be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b25a      	sxtb	r2, r3
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	7d9b      	ldrb	r3, [r3, #22]
 80039c8:	b25b      	sxtb	r3, r3
 80039ca:	18db      	adds	r3, r3, r3
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	2102      	movs	r1, #2
 80039d0:	400b      	ands	r3, r1
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.int_pin << 0) & LIS3MDL_IEN;
 80039de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b25a      	sxtb	r2, r3
 80039e4:	183b      	adds	r3, r7, r0
 80039e6:	7ddb      	ldrb	r3, [r3, #23]
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	2101      	movs	r1, #1
 80039ec:	400b      	ands	r3, r1
 80039ee:	b25b      	sxtb	r3, r3
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f8:	701a      	strb	r2, [r3, #0]

	int_regs[1] = 0;
 80039fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fc:	3301      	adds	r3, #1
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.positive_thresh_x_enable << 7) & LIS3MDL_PTH_X;
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	3301      	adds	r3, #1
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b25a      	sxtb	r2, r3
 8003a0a:	183b      	adds	r3, r7, r0
 8003a0c:	7e1b      	ldrb	r3, [r3, #24]
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	01db      	lsls	r3, r3, #7
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	4313      	orrs	r3, r2
 8003a16:	b25a      	sxtb	r2, r3
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.positive_thresh_y_enable << 6) & LIS3MDL_PTH_Y;
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	3301      	adds	r3, #1
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b25a      	sxtb	r2, r3
 8003a28:	183b      	adds	r3, r7, r0
 8003a2a:	7e5b      	ldrb	r3, [r3, #25]
 8003a2c:	b25b      	sxtb	r3, r3
 8003a2e:	019b      	lsls	r3, r3, #6
 8003a30:	b25b      	sxtb	r3, r3
 8003a32:	2140      	movs	r1, #64	@ 0x40
 8003a34:	400b      	ands	r3, r1
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b25a      	sxtb	r2, r3
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.positive_thresh_z_enable << 5) & LIS3MDL_PTH_Z;
 8003a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a46:	3301      	adds	r3, #1
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b25a      	sxtb	r2, r3
 8003a4c:	183b      	adds	r3, r7, r0
 8003a4e:	7e9b      	ldrb	r3, [r3, #26]
 8003a50:	b25b      	sxtb	r3, r3
 8003a52:	015b      	lsls	r3, r3, #5
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	2120      	movs	r1, #32
 8003a58:	400b      	ands	r3, r1
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b25a      	sxtb	r2, r3
 8003a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a62:	3301      	adds	r3, #1
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.negative_thresh_x_enable << 4) & LIS3MDL_NTH_X;
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b25a      	sxtb	r2, r3
 8003a70:	183b      	adds	r3, r7, r0
 8003a72:	7edb      	ldrb	r3, [r3, #27]
 8003a74:	b25b      	sxtb	r3, r3
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	b25b      	sxtb	r3, r3
 8003a7a:	2110      	movs	r1, #16
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b25a      	sxtb	r2, r3
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	3301      	adds	r3, #1
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.negative_thresh_y_enable << 3) & LIS3MDL_NTH_Y;
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8e:	3301      	adds	r3, #1
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b25a      	sxtb	r2, r3
 8003a94:	183b      	adds	r3, r7, r0
 8003a96:	7f1b      	ldrb	r3, [r3, #28]
 8003a98:	b25b      	sxtb	r3, r3
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	b25b      	sxtb	r3, r3
 8003a9e:	2108      	movs	r1, #8
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	b25a      	sxtb	r2, r3
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.negative_thresh_z_enable << 2) & LIS3MDL_NTH_Z;
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b25a      	sxtb	r2, r3
 8003ab8:	183b      	adds	r3, r7, r0
 8003aba:	7f5b      	ldrb	r3, [r3, #29]
 8003abc:	b25b      	sxtb	r3, r3
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	b25a      	sxtb	r2, r3
 8003acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

	int_regs[2] = (uint8_t)(init_params.interrupt_threshold & 0x00FF);
 8003ad4:	183b      	adds	r3, r7, r0
 8003ad6:	8bda      	ldrh	r2, [r3, #30]
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	3302      	adds	r3, #2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
	int_regs[3] = (uint8_t)((init_params.interrupt_threshold & 0xFF00)>>8);
 8003ae0:	183b      	adds	r3, r7, r0
 8003ae2:	8bdb      	ldrh	r3, [r3, #30]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aea:	3303      	adds	r3, #3
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

	return 0;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc90      	pop	{r4, r7}
 8003af8:	bc08      	pop	{r3}
 8003afa:	b004      	add	sp, #16
 8003afc:	4718      	bx	r3
	...

08003b00 <lis3mdl_change_state_due_to_spi_cplt>:
 *      Author: arvyd
 */

#include "lis3mdl_state_machine.h"

LIS3MDL_State_Change_Error_t lis3mdl_change_state_due_to_spi_cplt(LIS3MDL_State_t *state){
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	switch(*state){
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d824      	bhi.n	8003b5a <lis3mdl_change_state_due_to_spi_cplt+0x5a>
 8003b10:	009a      	lsls	r2, r3, #2
 8003b12:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <lis3mdl_change_state_due_to_spi_cplt+0x68>)
 8003b14:	18d3      	adds	r3, r2, r3
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	469f      	mov	pc, r3
	case LIS3MDL_RESETTING_REGISTERS:
		*state = LIS3MDL_INITIALIZING_OFFSET_REGS;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
		break;
 8003b20:	e01d      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>
	case LIS3MDL_INITIALIZING_OFFSET_REGS:
//		*state = LIS3MDL_INITIALIZING_CTRL_REGS;
		*state = LIS3MDL_IDLE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2204      	movs	r2, #4
 8003b26:	701a      	strb	r2, [r3, #0]
		break;
 8003b28:	e019      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_INITIALIZING_CTRL_REGS:
		*state = LIS3MDL_INITIALIZING_INT_REGS;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	701a      	strb	r2, [r3, #0]
		break;
 8003b30:	e015      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_INITIALIZING_INT_REGS:
		*state = LIS3MDL_IDLE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	701a      	strb	r2, [r3, #0]
		break;
 8003b38:	e011      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_SENDING_ADDRESS_TO_READ_FROM:
		*state = LIS3MDL_READING_DATA;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	701a      	strb	r2, [r3, #0]
		break;
 8003b40:	e00d      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_SENDING_ADDRESS_TO_WRITE_TO:
		*state = LIS3MDL_WRITING_DATA;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2208      	movs	r2, #8
 8003b46:	701a      	strb	r2, [r3, #0]
		break;
 8003b48:	e009      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_WRITING_DATA:
		*state = LIS3MDL_IDLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	701a      	strb	r2, [r3, #0]
		break;
 8003b50:	e005      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_READING_DATA:
		*state = LIS3MDL_IDLE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	701a      	strb	r2, [r3, #0]
		break;
 8003b58:	e001      	b.n	8003b5e <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	default:
		return LIS3MDL_STATE_CHANGE_INVALID_CHANGE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <lis3mdl_change_state_due_to_spi_cplt+0x60>
	}

	return LIS3MDL_STATE_CHANGE_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b002      	add	sp, #8
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	08003c30 	.word	0x08003c30

08003b6c <memset>:
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	1882      	adds	r2, r0, r2
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	7019      	strb	r1, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <__libc_init_array>:
 8003b7c:	b570      	push	{r4, r5, r6, lr}
 8003b7e:	2600      	movs	r6, #0
 8003b80:	4c0c      	ldr	r4, [pc, #48]	@ (8003bb4 <__libc_init_array+0x38>)
 8003b82:	4d0d      	ldr	r5, [pc, #52]	@ (8003bb8 <__libc_init_array+0x3c>)
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	42a6      	cmp	r6, r4
 8003b8a:	d109      	bne.n	8003ba0 <__libc_init_array+0x24>
 8003b8c:	2600      	movs	r6, #0
 8003b8e:	f000 f823 	bl	8003bd8 <_init>
 8003b92:	4c0a      	ldr	r4, [pc, #40]	@ (8003bbc <__libc_init_array+0x40>)
 8003b94:	4d0a      	ldr	r5, [pc, #40]	@ (8003bc0 <__libc_init_array+0x44>)
 8003b96:	1b64      	subs	r4, r4, r5
 8003b98:	10a4      	asrs	r4, r4, #2
 8003b9a:	42a6      	cmp	r6, r4
 8003b9c:	d105      	bne.n	8003baa <__libc_init_array+0x2e>
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ba0:	00b3      	lsls	r3, r6, #2
 8003ba2:	58eb      	ldr	r3, [r5, r3]
 8003ba4:	4798      	blx	r3
 8003ba6:	3601      	adds	r6, #1
 8003ba8:	e7ee      	b.n	8003b88 <__libc_init_array+0xc>
 8003baa:	00b3      	lsls	r3, r6, #2
 8003bac:	58eb      	ldr	r3, [r5, r3]
 8003bae:	4798      	blx	r3
 8003bb0:	3601      	adds	r6, #1
 8003bb2:	e7f2      	b.n	8003b9a <__libc_init_array+0x1e>
 8003bb4:	08003c54 	.word	0x08003c54
 8003bb8:	08003c54 	.word	0x08003c54
 8003bbc:	08003c58 	.word	0x08003c58
 8003bc0:	08003c54 	.word	0x08003c54

08003bc4 <memcpy>:
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d100      	bne.n	8003bce <memcpy+0xa>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	5ccc      	ldrb	r4, [r1, r3]
 8003bd0:	54c4      	strb	r4, [r0, r3]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	e7f8      	b.n	8003bc8 <memcpy+0x4>
	...

08003bd8 <_init>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr

08003be4 <_fini>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr

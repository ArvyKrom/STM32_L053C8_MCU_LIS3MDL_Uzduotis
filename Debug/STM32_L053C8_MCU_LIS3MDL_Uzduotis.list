
STM32_L053C8_MCU_LIS3MDL_Uzduotis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08004480  08004480  00005480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  0000602c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080044e4  080044e4  0000602c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080044e4  080044e4  0000602c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080044ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000002c  08004518  0000602c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004518  000061d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c38a  00000000  00000000  00006054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b5  00000000  00000000  000123de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00014698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092c  00000000  00000000  000152b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e88  00000000  00000000  00015be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f17b  00000000  00000000  0002aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c581  00000000  00000000  00039be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c0  00000000  00000000  000b61ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b8b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004468 	.word	0x08004468

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08004468 	.word	0x08004468

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <light_up_led_towards_magnetic_field>:
 */

#include <stdlib.h>
#include "magnetometer.h"

void light_up_led_towards_magnetic_field(Magnetometer_leds leds, LIS3MDL_Magnetic_Data_t magnetic_data){
 8000220:	b084      	sub	sp, #16
 8000222:	b5b0      	push	{r4, r5, r7, lr}
 8000224:	af00      	add	r7, sp, #0
 8000226:	2510      	movs	r5, #16
 8000228:	197c      	adds	r4, r7, r5
 800022a:	6020      	str	r0, [r4, #0]
 800022c:	6061      	str	r1, [r4, #4]
 800022e:	60a2      	str	r2, [r4, #8]
 8000230:	60e3      	str	r3, [r4, #12]

	HAL_GPIO_WritePin(leds.neg_x_led_gpio_port, leds.neg_x_led_gpio_pin, 0);
 8000232:	002c      	movs	r4, r5
 8000234:	193b      	adds	r3, r7, r4
 8000236:	6898      	ldr	r0, [r3, #8]
 8000238:	193b      	adds	r3, r7, r4
 800023a:	899b      	ldrh	r3, [r3, #12]
 800023c:	2200      	movs	r2, #0
 800023e:	0019      	movs	r1, r3
 8000240:	f001 f936 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(leds.pos_x_led_gpio_port, leds.pos_x_led_gpio_pin, 0);
 8000244:	193b      	adds	r3, r7, r4
 8000246:	6818      	ldr	r0, [r3, #0]
 8000248:	193b      	adds	r3, r7, r4
 800024a:	889b      	ldrh	r3, [r3, #4]
 800024c:	2200      	movs	r2, #0
 800024e:	0019      	movs	r1, r3
 8000250:	f001 f92e 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(leds.neg_y_led_gpio_port, leds.neg_y_led_gpio_pin, 0);
 8000254:	193b      	adds	r3, r7, r4
 8000256:	6998      	ldr	r0, [r3, #24]
 8000258:	193b      	adds	r3, r7, r4
 800025a:	8b9b      	ldrh	r3, [r3, #28]
 800025c:	2200      	movs	r2, #0
 800025e:	0019      	movs	r1, r3
 8000260:	f001 f926 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(leds.pos_y_led_gpio_port, leds.pos_y_led_gpio_pin, 0);
 8000264:	193b      	adds	r3, r7, r4
 8000266:	6918      	ldr	r0, [r3, #16]
 8000268:	193b      	adds	r3, r7, r4
 800026a:	8a9b      	ldrh	r3, [r3, #20]
 800026c:	2200      	movs	r2, #0
 800026e:	0019      	movs	r1, r3
 8000270:	f001 f91e 	bl	80014b0 <HAL_GPIO_WritePin>

	if(abs(magnetic_data.x) > abs(magnetic_data.y)){
 8000274:	2320      	movs	r3, #32
 8000276:	0020      	movs	r0, r4
 8000278:	181b      	adds	r3, r3, r0
 800027a:	19db      	adds	r3, r3, r7
 800027c:	2200      	movs	r2, #0
 800027e:	5e9b      	ldrsh	r3, [r3, r2]
 8000280:	17da      	asrs	r2, r3, #31
 8000282:	189b      	adds	r3, r3, r2
 8000284:	4053      	eors	r3, r2
 8000286:	b29a      	uxth	r2, r3
 8000288:	2320      	movs	r3, #32
 800028a:	181b      	adds	r3, r3, r0
 800028c:	19db      	adds	r3, r3, r7
 800028e:	2102      	movs	r1, #2
 8000290:	5e5b      	ldrsh	r3, [r3, r1]
 8000292:	17d9      	asrs	r1, r3, #31
 8000294:	185b      	adds	r3, r3, r1
 8000296:	404b      	eors	r3, r1
 8000298:	b29b      	uxth	r3, r3
 800029a:	429a      	cmp	r2, r3
 800029c:	d91a      	bls.n	80002d4 <light_up_led_towards_magnetic_field+0xb4>
		if (magnetic_data.x < 0){
 800029e:	2320      	movs	r3, #32
 80002a0:	181b      	adds	r3, r3, r0
 80002a2:	19db      	adds	r3, r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	5e9b      	ldrsh	r3, [r3, r2]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	da09      	bge.n	80002c0 <light_up_led_towards_magnetic_field+0xa0>
			HAL_GPIO_WritePin(leds.neg_x_led_gpio_port, leds.neg_x_led_gpio_pin, 1);
 80002ac:	0002      	movs	r2, r0
 80002ae:	183b      	adds	r3, r7, r0
 80002b0:	6898      	ldr	r0, [r3, #8]
 80002b2:	18bb      	adds	r3, r7, r2
 80002b4:	899b      	ldrh	r3, [r3, #12]
 80002b6:	2201      	movs	r2, #1
 80002b8:	0019      	movs	r1, r3
 80002ba:	f001 f8f9 	bl	80014b0 <HAL_GPIO_WritePin>
			return;
 80002be:	e024      	b.n	800030a <light_up_led_towards_magnetic_field+0xea>
		}
		HAL_GPIO_WritePin(leds.pos_x_led_gpio_port, leds.pos_x_led_gpio_pin, 1);
 80002c0:	2210      	movs	r2, #16
 80002c2:	18bb      	adds	r3, r7, r2
 80002c4:	6818      	ldr	r0, [r3, #0]
 80002c6:	18bb      	adds	r3, r7, r2
 80002c8:	889b      	ldrh	r3, [r3, #4]
 80002ca:	2201      	movs	r2, #1
 80002cc:	0019      	movs	r1, r3
 80002ce:	f001 f8ef 	bl	80014b0 <HAL_GPIO_WritePin>
		return;
 80002d2:	e01a      	b.n	800030a <light_up_led_towards_magnetic_field+0xea>
	}
	if (magnetic_data.y < 0){
 80002d4:	2320      	movs	r3, #32
 80002d6:	2210      	movs	r2, #16
 80002d8:	189b      	adds	r3, r3, r2
 80002da:	19db      	adds	r3, r3, r7
 80002dc:	2102      	movs	r1, #2
 80002de:	5e5b      	ldrsh	r3, [r3, r1]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	da08      	bge.n	80002f6 <light_up_led_towards_magnetic_field+0xd6>
		HAL_GPIO_WritePin(leds.neg_y_led_gpio_port, leds.neg_y_led_gpio_pin, 1);
 80002e4:	18bb      	adds	r3, r7, r2
 80002e6:	6998      	ldr	r0, [r3, #24]
 80002e8:	18bb      	adds	r3, r7, r2
 80002ea:	8b9b      	ldrh	r3, [r3, #28]
 80002ec:	2201      	movs	r2, #1
 80002ee:	0019      	movs	r1, r3
 80002f0:	f001 f8de 	bl	80014b0 <HAL_GPIO_WritePin>
		return;
 80002f4:	e009      	b.n	800030a <light_up_led_towards_magnetic_field+0xea>
	}
	HAL_GPIO_WritePin(leds.pos_y_led_gpio_port, leds.pos_y_led_gpio_pin, 1);
 80002f6:	2210      	movs	r2, #16
 80002f8:	18bb      	adds	r3, r7, r2
 80002fa:	6918      	ldr	r0, [r3, #16]
 80002fc:	18bb      	adds	r3, r7, r2
 80002fe:	8a9b      	ldrh	r3, [r3, #20]
 8000300:	2201      	movs	r2, #1
 8000302:	0019      	movs	r1, r3
 8000304:	f001 f8d4 	bl	80014b0 <HAL_GPIO_WritePin>
	return;
 8000308:	46c0      	nop			@ (mov r8, r8)
}
 800030a:	46bd      	mov	sp, r7
 800030c:	bcb0      	pop	{r4, r5, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	b004      	add	sp, #16
 8000312:	4718      	bx	r3

08000314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000316:	b09b      	sub	sp, #108	@ 0x6c
 8000318:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */

	LIS3MDL_Device lis3mdl_devices[1];
	lis3mdl_initialize_device_struct(&lis3mdl_devices[0], &hspi2, SS2_GPIO_Port, SS2_Pin);
 800031a:	2380      	movs	r3, #128	@ 0x80
 800031c:	015b      	lsls	r3, r3, #5
 800031e:	4a32      	ldr	r2, [pc, #200]	@ (80003e8 <main+0xd4>)
 8000320:	4932      	ldr	r1, [pc, #200]	@ (80003ec <main+0xd8>)
 8000322:	2424      	movs	r4, #36	@ 0x24
 8000324:	1938      	adds	r0, r7, r4
 8000326:	f003 fd6a 	bl	8003dfe <lis3mdl_initialize_device_struct>

	LIS3MDL_Init_Params init_params;
	lis3mdl_set_default_params(&init_params);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	0018      	movs	r0, r3
 800032e:	f003 fdd1 	bl	8003ed4 <lis3mdl_set_default_params>
	// Init parameters can be tweaked manually
	// For example init_params.full_scale = LIS3MDL_FULL_SCALE_4_GAUSS
	// All configurable options available under lis3mdl_init_params.h
	init_params.full_scale = LIS3MDL_FULL_SCALE_16_GAUSS;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2203      	movs	r2, #3
 8000336:	72da      	strb	r2, [r3, #11]
	init_params.xy_operation_mode = LIS3MDL_ULTRA_PERFORMACE;
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2203      	movs	r2, #3
 800033c:	71da      	strb	r2, [r3, #7]

	lis3mdl_setup_config_registers(&lis3mdl_devices[0], init_params);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	1938      	adds	r0, r7, r4
 8000342:	466a      	mov	r2, sp
 8000344:	0011      	movs	r1, r2
 8000346:	001a      	movs	r2, r3
 8000348:	320c      	adds	r2, #12
 800034a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800034c:	c170      	stmia	r1!, {r4, r5, r6}
 800034e:	ca30      	ldmia	r2!, {r4, r5}
 8000350:	c130      	stmia	r1!, {r4, r5}
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	685a      	ldr	r2, [r3, #4]
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	f003 fd8e 	bl	8003e78 <lis3mdl_setup_config_registers>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035c:	f000 fbe2 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000360:	f000 f852 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000364:	f000 f9b4 	bl	80006d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000368:	f000 f994 	bl	8000694 <MX_DMA_Init>
  MX_SPI2_Init();
 800036c:	f000 f8ca 	bl	8000504 <MX_SPI2_Init>
  MX_TIM6_Init();
 8000370:	f000 f956 	bl	8000620 <MX_TIM6_Init>
  MX_IWDG_Init();
 8000374:	f000 f8a8 	bl	80004c8 <MX_IWDG_Init>
  MX_TIM2_Init();
 8000378:	f000 f8fc 	bl	8000574 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800037c:	4b1c      	ldr	r3, [pc, #112]	@ (80003f0 <main+0xdc>)
 800037e:	0018      	movs	r0, r3
 8000380:	f002 fe46 	bl	8003010 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8000384:	4b1b      	ldr	r3, [pc, #108]	@ (80003f4 <main+0xe0>)
 8000386:	0018      	movs	r0, r3
 8000388:	f001 f902 	bl	8001590 <HAL_IWDG_Refresh>
	lis3mdl_process(lis3mdl_devices, 1, &spi_cplt_flag);
 800038c:	4a1a      	ldr	r2, [pc, #104]	@ (80003f8 <main+0xe4>)
 800038e:	2424      	movs	r4, #36	@ 0x24
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2101      	movs	r1, #1
 8000394:	0018      	movs	r0, r3
 8000396:	f003 f993 	bl	80036c0 <lis3mdl_process>
	if(time_to_renew_data){
 800039a:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <main+0xe8>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0f0      	beq.n	8000384 <main+0x70>
		if(lis3mdl_get_magnetic_data(lis3mdl_devices, 1, 0, &magnetic_data) == LIS3MDL_DATA_AVAILABLE){
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <main+0xec>)
 80003a4:	1938      	adds	r0, r7, r4
 80003a6:	2200      	movs	r2, #0
 80003a8:	2101      	movs	r1, #1
 80003aa:	f003 fb7b 	bl	8003aa4 <lis3mdl_get_magnetic_data>
 80003ae:	1e03      	subs	r3, r0, #0
 80003b0:	d1e8      	bne.n	8000384 <main+0x70>
			light_up_led_towards_magnetic_field(magnetometer_leds, magnetic_data);
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <main+0xf0>)
 80003b4:	4912      	ldr	r1, [pc, #72]	@ (8000400 <main+0xec>)
 80003b6:	2210      	movs	r2, #16
 80003b8:	446a      	add	r2, sp
 80003ba:	6808      	ldr	r0, [r1, #0]
 80003bc:	6010      	str	r0, [r2, #0]
 80003be:	8889      	ldrh	r1, [r1, #4]
 80003c0:	8091      	strh	r1, [r2, #4]
 80003c2:	466a      	mov	r2, sp
 80003c4:	0011      	movs	r1, r2
 80003c6:	001a      	movs	r2, r3
 80003c8:	3210      	adds	r2, #16
 80003ca:	ca31      	ldmia	r2!, {r0, r4, r5}
 80003cc:	c131      	stmia	r1!, {r0, r4, r5}
 80003ce:	6812      	ldr	r2, [r2, #0]
 80003d0:	600a      	str	r2, [r1, #0]
 80003d2:	6818      	ldr	r0, [r3, #0]
 80003d4:	6859      	ldr	r1, [r3, #4]
 80003d6:	689a      	ldr	r2, [r3, #8]
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	f7ff ff21 	bl	8000220 <light_up_led_towards_magnetic_field>
			time_to_renew_data = 0;
 80003de:	4b07      	ldr	r3, [pc, #28]	@ (80003fc <main+0xe8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
	HAL_IWDG_Refresh(&hiwdg);
 80003e4:	e7ce      	b.n	8000384 <main+0x70>
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	50000400 	.word	0x50000400
 80003ec:	20000058 	.word	0x20000058
 80003f0:	20000140 	.word	0x20000140
 80003f4:	20000048 	.word	0x20000048
 80003f8:	200001c0 	.word	0x200001c0
 80003fc:	200001ca 	.word	0x200001ca
 8000400:	200001c4 	.word	0x200001c4
 8000404:	20000000 	.word	0x20000000

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b095      	sub	sp, #84	@ 0x54
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	2418      	movs	r4, #24
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2338      	movs	r3, #56	@ 0x38
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f003 ffef 	bl	80043fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	0018      	movs	r0, r3
 8000422:	2314      	movs	r3, #20
 8000424:	001a      	movs	r2, r3
 8000426:	2100      	movs	r1, #0
 8000428:	f003 ffe8 	bl	80043fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800042c:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <SystemClock_Config+0xb8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a24      	ldr	r2, [pc, #144]	@ (80004c4 <SystemClock_Config+0xbc>)
 8000432:	401a      	ands	r2, r3
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <SystemClock_Config+0xb8>)
 8000436:	2180      	movs	r1, #128	@ 0x80
 8000438:	0109      	lsls	r1, r1, #4
 800043a:	430a      	orrs	r2, r1
 800043c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800043e:	0021      	movs	r1, r4
 8000440:	187b      	adds	r3, r7, r1
 8000442:	220a      	movs	r2, #10
 8000444:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2201      	movs	r2, #1
 800044a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800044c:	187b      	adds	r3, r7, r1
 800044e:	2210      	movs	r2, #16
 8000450:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000452:	187b      	adds	r3, r7, r1
 8000454:	2201      	movs	r2, #1
 8000456:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	187b      	adds	r3, r7, r1
 800045a:	2202      	movs	r2, #2
 800045c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2200      	movs	r2, #0
 8000462:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	02d2      	lsls	r2, r2, #11
 800046a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2280      	movs	r2, #128	@ 0x80
 8000470:	03d2      	lsls	r2, r2, #15
 8000472:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	187b      	adds	r3, r7, r1
 8000476:	0018      	movs	r0, r3
 8000478:	f001 f90a 	bl	8001690 <HAL_RCC_OscConfig>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000480:	f000 f9c4 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	220f      	movs	r2, #15
 8000488:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2203      	movs	r2, #3
 800048e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	22e0      	movs	r2, #224	@ 0xe0
 800049a:	00d2      	lsls	r2, r2, #3
 800049c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2101      	movs	r1, #1
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fcb5 	bl	8001e18 <HAL_RCC_ClockConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004b2:	f000 f9ab 	bl	800080c <Error_Handler>
  }
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b015      	add	sp, #84	@ 0x54
 80004bc:	bd90      	pop	{r4, r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	40007000 	.word	0x40007000
 80004c4:	ffffe7ff 	.word	0xffffe7ff

080004c8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <MX_IWDG_Init+0x34>)
 80004ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000500 <MX_IWDG_Init+0x38>)
 80004d0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <MX_IWDG_Init+0x34>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 20;
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <MX_IWDG_Init+0x34>)
 80004da:	2214      	movs	r2, #20
 80004dc:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 20;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <MX_IWDG_Init+0x34>)
 80004e0:	2214      	movs	r2, #20
 80004e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80004e4:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <MX_IWDG_Init+0x34>)
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 f800 	bl	80014ec <HAL_IWDG_Init>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d001      	beq.n	80004f4 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80004f0:	f000 f98c 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80004f4:	46c0      	nop			@ (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	20000048 	.word	0x20000048
 8000500:	40003000 	.word	0x40003000

08000504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000508:	4b18      	ldr	r3, [pc, #96]	@ (800056c <MX_SPI2_Init+0x68>)
 800050a:	4a19      	ldr	r2, [pc, #100]	@ (8000570 <MX_SPI2_Init+0x6c>)
 800050c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_SPI2_Init+0x68>)
 8000510:	2282      	movs	r2, #130	@ 0x82
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_SPI2_Init+0x68>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800051c:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_SPI2_Init+0x68>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_SPI2_Init+0x68>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <MX_SPI2_Init+0x68>)
 800052a:	2200      	movs	r2, #0
 800052c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_SPI2_Init+0x68>)
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0092      	lsls	r2, r2, #2
 8000534:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <MX_SPI2_Init+0x68>)
 8000538:	2238      	movs	r2, #56	@ 0x38
 800053a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_SPI2_Init+0x68>)
 800053e:	2200      	movs	r2, #0
 8000540:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_SPI2_Init+0x68>)
 8000544:	2200      	movs	r2, #0
 8000546:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_SPI2_Init+0x68>)
 800054a:	2200      	movs	r2, #0
 800054c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_SPI2_Init+0x68>)
 8000550:	2207      	movs	r2, #7
 8000552:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <MX_SPI2_Init+0x68>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fe2c 	bl	80021b4 <HAL_SPI_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000560:	f000 f954 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	20000058 	.word	0x20000058
 8000570:	40003800 	.word	0x40003800

08000574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057a:	2308      	movs	r3, #8
 800057c:	18fb      	adds	r3, r7, r3
 800057e:	0018      	movs	r0, r3
 8000580:	2310      	movs	r3, #16
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f003 ff39 	bl	80043fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058a:	003b      	movs	r3, r7
 800058c:	0018      	movs	r0, r3
 800058e:	2308      	movs	r3, #8
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f003 ff32 	bl	80043fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000598:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_TIM2_Init+0xa4>)
 800059a:	2280      	movs	r2, #128	@ 0x80
 800059c:	05d2      	lsls	r2, r2, #23
 800059e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4000-1;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005a2:	4a1e      	ldr	r2, [pc, #120]	@ (800061c <MX_TIM2_Init+0xa8>)
 80005a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005ae:	22f4      	movs	r2, #244	@ 0xf4
 80005b0:	32ff      	adds	r2, #255	@ 0xff
 80005b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 fce4 	bl	8002f90 <HAL_TIM_Base_Init>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005cc:	f000 f91e 	bl	800080c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005d0:	2108      	movs	r1, #8
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	0152      	lsls	r2, r2, #5
 80005d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005da:	187a      	adds	r2, r7, r1
 80005dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fe2d 	bl	8003240 <HAL_TIM_ConfigClockSource>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80005ea:	f000 f90f 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ee:	003b      	movs	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	003b      	movs	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005fa:	003a      	movs	r2, r7
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <MX_TIM2_Init+0xa4>)
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f003 f805 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800060a:	f000 f8ff 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b006      	add	sp, #24
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	20000140 	.word	0x20000140
 800061c:	00000f9f 	.word	0x00000f9f

08000620 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2308      	movs	r3, #8
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 fee4 	bl	80043fc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_TIM6_Init+0x6c>)
 8000636:	4a16      	ldr	r2, [pc, #88]	@ (8000690 <MX_TIM6_Init+0x70>)
 8000638:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_TIM6_Init+0x6c>)
 800063c:	2220      	movs	r2, #32
 800063e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_TIM6_Init+0x6c>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_TIM6_Init+0x6c>)
 8000648:	2263      	movs	r2, #99	@ 0x63
 800064a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_TIM6_Init+0x6c>)
 800064e:	2280      	movs	r2, #128	@ 0x80
 8000650:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000652:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_TIM6_Init+0x6c>)
 8000654:	0018      	movs	r0, r3
 8000656:	f002 fc9b 	bl	8002f90 <HAL_TIM_Base_Init>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800065e:	f000 f8d5 	bl	800080c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000662:	003b      	movs	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	003b      	movs	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800066e:	003a      	movs	r2, r7
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_TIM6_Init+0x6c>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f002 ffcb 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800067e:	f000 f8c5 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	20000180 	.word	0x20000180
 8000690:	40001000 	.word	0x40001000

08000694 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_DMA_Init+0x38>)
 800069c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_DMA_Init+0x38>)
 80006a0:	2101      	movs	r1, #1
 80006a2:	430a      	orrs	r2, r1
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_DMA_Init+0x38>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	2201      	movs	r2, #1
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	200b      	movs	r0, #11
 80006b8:	f000 fb50 	bl	8000d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006bc:	200b      	movs	r0, #11
 80006be:	f000 fb62 	bl	8000d86 <HAL_NVIC_EnableIRQ>

}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b089      	sub	sp, #36	@ 0x24
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	240c      	movs	r4, #12
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f003 fe8b 	bl	80043fc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_GPIO_Init+0xbc>)
 80006e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_GPIO_Init+0xbc>)
 80006ec:	2102      	movs	r1, #2
 80006ee:	430a      	orrs	r2, r1
 80006f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006f2:	4b26      	ldr	r3, [pc, #152]	@ (800078c <MX_GPIO_Init+0xbc>)
 80006f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b23      	ldr	r3, [pc, #140]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_GPIO_Init+0xbc>)
 8000704:	2101      	movs	r1, #1
 8000706:	430a      	orrs	r2, r1
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_GPIO_Init+0xbc>)
 800070c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070e:	2201      	movs	r2, #1
 8000710:	4013      	ands	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	015b      	lsls	r3, r3, #5
 800071a:	481d      	ldr	r0, [pc, #116]	@ (8000790 <MX_GPIO_Init+0xc0>)
 800071c:	2201      	movs	r2, #1
 800071e:	0019      	movs	r1, r3
 8000720:	f000 fec6 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000724:	23f0      	movs	r3, #240	@ 0xf0
 8000726:	0119      	lsls	r1, r3, #4
 8000728:	23a0      	movs	r3, #160	@ 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	2200      	movs	r2, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f000 febe 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS2_Pin */
  GPIO_InitStruct.Pin = SS2_Pin;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	0152      	lsls	r2, r2, #5
 800073a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2201      	movs	r2, #1
 8000740:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 800074e:	193b      	adds	r3, r7, r4
 8000750:	4a0f      	ldr	r2, [pc, #60]	@ (8000790 <MX_GPIO_Init+0xc0>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f000 fd35 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800075a:	0021      	movs	r1, r4
 800075c:	187b      	adds	r3, r7, r1
 800075e:	22f0      	movs	r2, #240	@ 0xf0
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2201      	movs	r2, #1
 8000768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	187a      	adds	r2, r7, r1
 8000778:	23a0      	movs	r3, #160	@ 0xa0
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fd20 	bl	80011c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b009      	add	sp, #36	@ 0x24
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	50000400 	.word	0x50000400

08000794 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_SPI_TxCpltCallback+0x20>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d102      	bne.n	80007ac <HAL_SPI_TxCpltCallback+0x18>
		spi_cplt_flag = 1;
 80007a6:	4b04      	ldr	r3, [pc, #16]	@ (80007b8 <HAL_SPI_TxCpltCallback+0x24>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
	}
}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40003800 	.word	0x40003800
 80007b8:	200001c0 	.word	0x200001c0

080007bc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <HAL_SPI_RxCpltCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d102      	bne.n	80007d4 <HAL_SPI_RxCpltCallback+0x18>
		spi_cplt_flag = 1;
 80007ce:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <HAL_SPI_RxCpltCallback+0x24>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	701a      	strb	r2, [r3, #0]
	}
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	b002      	add	sp, #8
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40003800 	.word	0x40003800
 80007e0:	200001c0 	.word	0x200001c0

080007e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d102      	bne.n	80007fe <HAL_TIM_PeriodElapsedCallback+0x1a>
		time_to_renew_data = 1;
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
	}
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	200001ca 	.word	0x200001ca

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	e7fd      	b.n	8000814 <Error_Handler+0x8>

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800081e:	003b      	movs	r3, r7
 8000820:	0018      	movs	r0, r3
 8000822:	2308      	movs	r3, #8
 8000824:	001a      	movs	r2, r3
 8000826:	2100      	movs	r1, #0
 8000828:	f003 fde8 	bl	80043fc <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <HAL_MspInit+0x50>)
 800082e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <HAL_MspInit+0x50>)
 8000832:	2101      	movs	r1, #1
 8000834:	430a      	orrs	r2, r1
 8000836:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <HAL_MspInit+0x50>)
 800083a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <HAL_MspInit+0x50>)
 800083e:	2180      	movs	r1, #128	@ 0x80
 8000840:	0549      	lsls	r1, r1, #21
 8000842:	430a      	orrs	r2, r1
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000852:	003b      	movs	r3, r7
 8000854:	0018      	movs	r0, r3
 8000856:	f000 feab 	bl	80015b0 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800085a:	f000 ff0b 	bl	8001674 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b089      	sub	sp, #36	@ 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	240c      	movs	r4, #12
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	2314      	movs	r3, #20
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f003 fdbc 	bl	80043fc <memset>
  if(hspi->Instance==SPI2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a45      	ldr	r2, [pc, #276]	@ (80009a0 <HAL_SPI_MspInit+0x134>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d000      	beq.n	8000890 <HAL_SPI_MspInit+0x24>
 800088e:	e083      	b.n	8000998 <HAL_SPI_MspInit+0x12c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000890:	4b44      	ldr	r3, [pc, #272]	@ (80009a4 <HAL_SPI_MspInit+0x138>)
 8000892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000894:	4b43      	ldr	r3, [pc, #268]	@ (80009a4 <HAL_SPI_MspInit+0x138>)
 8000896:	2180      	movs	r1, #128	@ 0x80
 8000898:	01c9      	lsls	r1, r1, #7
 800089a:	430a      	orrs	r2, r1
 800089c:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	4b41      	ldr	r3, [pc, #260]	@ (80009a4 <HAL_SPI_MspInit+0x138>)
 80008a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008a2:	4b40      	ldr	r3, [pc, #256]	@ (80009a4 <HAL_SPI_MspInit+0x138>)
 80008a4:	2102      	movs	r1, #2
 80008a6:	430a      	orrs	r2, r1
 80008a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008aa:	4b3e      	ldr	r3, [pc, #248]	@ (80009a4 <HAL_SPI_MspInit+0x138>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008ae:	2202      	movs	r2, #2
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	22e0      	movs	r2, #224	@ 0xe0
 80008ba:	0212      	lsls	r2, r2, #8
 80008bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2202      	movs	r2, #2
 80008c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2203      	movs	r2, #3
 80008d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	4a33      	ldr	r2, [pc, #204]	@ (80009a8 <HAL_SPI_MspInit+0x13c>)
 80008dc:	0019      	movs	r1, r3
 80008de:	0010      	movs	r0, r2
 80008e0:	f000 fc70 	bl	80011c4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80008e4:	4b31      	ldr	r3, [pc, #196]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 80008e6:	4a32      	ldr	r2, [pc, #200]	@ (80009b0 <HAL_SPI_MspInit+0x144>)
 80008e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80008ea:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f0:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f6:	4b2d      	ldr	r3, [pc, #180]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008fc:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 80008fe:	2280      	movs	r2, #128	@ 0x80
 8000900:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000902:	4b2a      	ldr	r3, [pc, #168]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000908:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800090e:	4b27      	ldr	r3, [pc, #156]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800091a:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fa4f 	bl	8000dc0 <HAL_DMA_Init>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d001      	beq.n	800092a <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000926:	f7ff ff71 	bl	800080c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a1f      	ldr	r2, [pc, #124]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 800092e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <HAL_SPI_MspInit+0x140>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000938:	4a1f      	ldr	r2, [pc, #124]	@ (80009b8 <HAL_SPI_MspInit+0x14c>)
 800093a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 800093e:	2202      	movs	r2, #2
 8000940:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000944:	2210      	movs	r2, #16
 8000946:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000950:	2280      	movs	r2, #128	@ 0x80
 8000952:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fa26 	bl	8000dc0 <HAL_DMA_Init>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000978:	f7ff ff48 	bl	800080c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000980:	649a      	str	r2, [r3, #72]	@ 0x48
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_SPI_MspInit+0x148>)
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	201a      	movs	r0, #26
 800098e:	f000 f9e5 	bl	8000d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000992:	201a      	movs	r0, #26
 8000994:	f000 f9f7 	bl	8000d86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	b009      	add	sp, #36	@ 0x24
 800099e:	bd90      	pop	{r4, r7, pc}
 80009a0:	40003800 	.word	0x40003800
 80009a4:	40021000 	.word	0x40021000
 80009a8:	50000400 	.word	0x50000400
 80009ac:	200000b0 	.word	0x200000b0
 80009b0:	40020044 	.word	0x40020044
 80009b4:	200000f8 	.word	0x200000f8
 80009b8:	40020058 	.word	0x40020058

080009bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2380      	movs	r3, #128	@ 0x80
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d10e      	bne.n	80009ee <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_TIM_Base_MspInit+0x60>)
 80009d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <HAL_TIM_Base_MspInit+0x60>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	430a      	orrs	r2, r1
 80009da:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	200f      	movs	r0, #15
 80009e2:	f000 f9bb 	bl	8000d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f9cd 	bl	8000d86 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80009ec:	e012      	b.n	8000a14 <HAL_TIM_Base_MspInit+0x58>
  else if(htim_base->Instance==TIM6)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <HAL_TIM_Base_MspInit+0x64>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d10d      	bne.n	8000a14 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_TIM_Base_MspInit+0x60>)
 80009fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <HAL_TIM_Base_MspInit+0x60>)
 80009fe:	2110      	movs	r1, #16
 8000a00:	430a      	orrs	r2, r1
 8000a02:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2011      	movs	r0, #17
 8000a0a:	f000 f9a7 	bl	8000d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a0e:	2011      	movs	r0, #17
 8000a10:	f000 f9b9 	bl	8000d86 <HAL_NVIC_EnableIRQ>
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40001000 	.word	0x40001000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 f8be 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fad3 	bl	800100a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 facf 	bl	800100a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	200000f8 	.word	0x200000f8

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <TIM2_IRQHandler+0x14>)
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fb10 	bl	80030a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a88:	46c0      	nop			@ (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	20000140 	.word	0x20000140

08000a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <TIM6_DAC_IRQHandler+0x14>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f002 fb04 	bl	80030a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	20000180 	.word	0x20000180

08000aac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <SPI2_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 fe9a 	bl	80027ec <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	20000058 	.word	0x20000058

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ad0:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ad2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad6:	490e      	ldr	r1, [pc, #56]	@ (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aec:	4c0b      	ldr	r4, [pc, #44]	@ (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000afa:	f7ff ffe3 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f003 fc85 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fc07 	bl	8000314 <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   r0, =_estack
 8000b08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000b14:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8000b18:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000b1c:	200001d8 	.word	0x200001d8

08000b20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_COMP_IRQHandler>
	...

08000b24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <HAL_Init+0x3c>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_Init+0x3c>)
 8000b36:	2140      	movs	r1, #64	@ 0x40
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f811 	bl	8000b64 <HAL_InitTick>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
 8000b4c:	e001      	b.n	8000b52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b4e:	f7ff fe63 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_InitTick+0x5c>)
 8000b6e:	681c      	ldr	r4, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <HAL_InitTick+0x60>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0019      	movs	r1, r3
 8000b76:	23fa      	movs	r3, #250	@ 0xfa
 8000b78:	0098      	lsls	r0, r3, #2
 8000b7a:	f7ff fac5 	bl	8000108 <__udivsi3>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	0019      	movs	r1, r3
 8000b82:	0020      	movs	r0, r4
 8000b84:	f7ff fac0 	bl	8000108 <__udivsi3>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 f90b 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	e00f      	b.n	8000bb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d80b      	bhi.n	8000bb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	425b      	negs	r3, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f8d8 	bl	8000d5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_InitTick+0x64>)
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	0018      	movs	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	20000020 	.word	0x20000020
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	20000024 	.word	0x20000024

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	18d2      	adds	r2, r2, r3
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <HAL_IncTick+0x20>)
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	20000028 	.word	0x20000028
 8000bec:	200001cc 	.word	0x200001cc

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	@ (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	200001cc 	.word	0x200001cc

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c16:	d809      	bhi.n	8000c2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c18:	1dfb      	adds	r3, r7, #7
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	231f      	movs	r3, #31
 8000c20:	401a      	ands	r2, r3
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_EnableIRQ+0x30>)
 8000c24:	2101      	movs	r1, #1
 8000c26:	4091      	lsls	r1, r2
 8000c28:	000a      	movs	r2, r1
 8000c2a:	601a      	str	r2, [r3, #0]
  }
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	0002      	movs	r2, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c4c:	d828      	bhi.n	8000ca0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000d0c <__NVIC_SetPriority+0xd4>)
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	33c0      	adds	r3, #192	@ 0xc0
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	589b      	ldr	r3, [r3, r2]
 8000c5e:	1dfa      	adds	r2, r7, #7
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	0011      	movs	r1, r2
 8000c64:	2203      	movs	r2, #3
 8000c66:	400a      	ands	r2, r1
 8000c68:	00d2      	lsls	r2, r2, #3
 8000c6a:	21ff      	movs	r1, #255	@ 0xff
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	22ff      	movs	r2, #255	@ 0xff
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	2303      	movs	r3, #3
 8000c86:	4003      	ands	r3, r0
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	481f      	ldr	r0, [pc, #124]	@ (8000d0c <__NVIC_SetPriority+0xd4>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	430a      	orrs	r2, r1
 8000c98:	33c0      	adds	r3, #192	@ 0xc0
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c9e:	e031      	b.n	8000d04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <__NVIC_SetPriority+0xd8>)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	0019      	movs	r1, r3
 8000ca8:	230f      	movs	r3, #15
 8000caa:	400b      	ands	r3, r1
 8000cac:	3b08      	subs	r3, #8
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3306      	adds	r3, #6
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	18d3      	adds	r3, r2, r3
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1dfa      	adds	r2, r7, #7
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	21ff      	movs	r1, #255	@ 0xff
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	401a      	ands	r2, r3
 8000cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	22ff      	movs	r2, #255	@ 0xff
 8000cd8:	401a      	ands	r2, r3
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	4003      	ands	r3, r0
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce8:	4809      	ldr	r0, [pc, #36]	@ (8000d10 <__NVIC_SetPriority+0xd8>)
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	001c      	movs	r4, r3
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	4023      	ands	r3, r4
 8000cf4:	3b08      	subs	r3, #8
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	3306      	adds	r3, #6
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	18c3      	adds	r3, r0, r3
 8000d00:	3304      	adds	r3, #4
 8000d02:	601a      	str	r2, [r3, #0]
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b003      	add	sp, #12
 8000d0a:	bd90      	pop	{r4, r7, pc}
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	1e5a      	subs	r2, r3, #1
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	045b      	lsls	r3, r3, #17
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d301      	bcc.n	8000d2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e010      	b.n	8000d4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <SysTick_Config+0x44>)
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	3a01      	subs	r2, #1
 8000d32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d34:	2301      	movs	r3, #1
 8000d36:	425b      	negs	r3, r3
 8000d38:	2103      	movs	r1, #3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff ff7c 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <SysTick_Config+0x44>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <SysTick_Config+0x44>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	0018      	movs	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	b002      	add	sp, #8
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	210f      	movs	r1, #15
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	1c02      	adds	r2, r0, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	0011      	movs	r1, r2
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b004      	add	sp, #16
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	0002      	movs	r2, r0
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ff33 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d9e:	46c0      	nop			@ (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	b002      	add	sp, #8
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff ffaf 	bl	8000d14 <SysTick_Config>
 8000db6:	0003      	movs	r3, r0
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b002      	add	sp, #8
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e061      	b.n	8000e96 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a32      	ldr	r2, [pc, #200]	@ (8000ea0 <HAL_DMA_Init+0xe0>)
 8000dd8:	4694      	mov	ip, r2
 8000dda:	4463      	add	r3, ip
 8000ddc:	2114      	movs	r1, #20
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff f992 	bl	8000108 <__udivsi3>
 8000de4:	0003      	movs	r3, r0
 8000de6:	009a      	lsls	r2, r3, #2
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a2d      	ldr	r2, [pc, #180]	@ (8000ea4 <HAL_DMA_Init+0xe4>)
 8000df0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2225      	movs	r2, #37	@ 0x25
 8000df6:	2102      	movs	r1, #2
 8000df8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4a28      	ldr	r2, [pc, #160]	@ (8000ea8 <HAL_DMA_Init+0xe8>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d018      	beq.n	8000e7e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e4c:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <HAL_DMA_Init+0xec>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e54:	211c      	movs	r1, #28
 8000e56:	400b      	ands	r3, r1
 8000e58:	210f      	movs	r1, #15
 8000e5a:	4099      	lsls	r1, r3
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <HAL_DMA_Init+0xec>)
 8000e62:	400a      	ands	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <HAL_DMA_Init+0xec>)
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	201c      	movs	r0, #28
 8000e74:	4003      	ands	r3, r0
 8000e76:	409a      	lsls	r2, r3
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <HAL_DMA_Init+0xec>)
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2225      	movs	r2, #37	@ 0x25
 8000e88:	2101      	movs	r1, #1
 8000e8a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2224      	movs	r2, #36	@ 0x24
 8000e90:	2100      	movs	r1, #0
 8000e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	bffdfff8 	.word	0xbffdfff8
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	ffff800f 	.word	0xffff800f
 8000eac:	400200a8 	.word	0x400200a8

08000eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ebe:	2317      	movs	r3, #23
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2224      	movs	r2, #36	@ 0x24
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <HAL_DMA_Start_IT+0x24>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e04f      	b.n	8000f74 <HAL_DMA_Start_IT+0xc4>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2224      	movs	r2, #36	@ 0x24
 8000ed8:	2101      	movs	r1, #1
 8000eda:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2225      	movs	r2, #37	@ 0x25
 8000ee0:	5c9b      	ldrb	r3, [r3, r2]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d13a      	bne.n	8000f5e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2225      	movs	r2, #37	@ 0x25
 8000eec:	2102      	movs	r1, #2
 8000eee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	438a      	bics	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f000 f92a 	bl	8001166 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d008      	beq.n	8000f2c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	210e      	movs	r1, #14
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e00f      	b.n	8000f4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2104      	movs	r1, #4
 8000f38:	438a      	bics	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	210a      	movs	r1, #10
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2101      	movs	r1, #1
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2224      	movs	r2, #36	@ 0x24
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f66:	2317      	movs	r3, #23
 8000f68:	18fb      	adds	r3, r7, r3
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000f6e:	2317      	movs	r3, #23
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	781b      	ldrb	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b006      	add	sp, #24
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f84:	210f      	movs	r1, #15
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2225      	movs	r2, #37	@ 0x25
 8000f90:	5c9b      	ldrb	r3, [r3, r2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d006      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e02a      	b.n	8000ffc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	210e      	movs	r1, #14
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	438a      	bics	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	221c      	movs	r2, #28
 8000fcc:	401a      	ands	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4091      	lsls	r1, r2
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2225      	movs	r2, #37	@ 0x25
 8000fde:	2101      	movs	r1, #1
 8000fe0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2224      	movs	r2, #36	@ 0x24
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d004      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	0010      	movs	r0, r2
 8000ffa:	4798      	blx	r3
    }
  }
  return status;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	221c      	movs	r2, #28
 8001028:	4013      	ands	r3, r2
 800102a:	2204      	movs	r2, #4
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	d026      	beq.n	8001084 <HAL_DMA_IRQHandler+0x7a>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2204      	movs	r2, #4
 800103a:	4013      	ands	r3, r2
 800103c:	d022      	beq.n	8001084 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2220      	movs	r2, #32
 8001046:	4013      	ands	r3, r2
 8001048:	d107      	bne.n	800105a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2104      	movs	r1, #4
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	221c      	movs	r2, #28
 8001060:	401a      	ands	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	2104      	movs	r1, #4
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	2b00      	cmp	r3, #0
 8001074:	d100      	bne.n	8001078 <HAL_DMA_IRQHandler+0x6e>
 8001076:	e071      	b.n	800115c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	0010      	movs	r0, r2
 8001080:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001082:	e06b      	b.n	800115c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001088:	221c      	movs	r2, #28
 800108a:	4013      	ands	r3, r2
 800108c:	2202      	movs	r2, #2
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	d02d      	beq.n	80010f4 <HAL_DMA_IRQHandler+0xea>
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d029      	beq.n	80010f4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2220      	movs	r2, #32
 80010a8:	4013      	ands	r3, r2
 80010aa:	d10b      	bne.n	80010c4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	210a      	movs	r1, #10
 80010b8:	438a      	bics	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2225      	movs	r2, #37	@ 0x25
 80010c0:	2101      	movs	r1, #1
 80010c2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c8:	221c      	movs	r2, #28
 80010ca:	401a      	ands	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	2102      	movs	r1, #2
 80010d2:	4091      	lsls	r1, r2
 80010d4:	000a      	movs	r2, r1
 80010d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2224      	movs	r2, #36	@ 0x24
 80010dc:	2100      	movs	r1, #0
 80010de:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d039      	beq.n	800115c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	0010      	movs	r0, r2
 80010f0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80010f2:	e033      	b.n	800115c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f8:	221c      	movs	r2, #28
 80010fa:	4013      	ands	r3, r2
 80010fc:	2208      	movs	r2, #8
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	d02a      	beq.n	800115e <HAL_DMA_IRQHandler+0x154>
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	2208      	movs	r2, #8
 800110c:	4013      	ands	r3, r2
 800110e:	d026      	beq.n	800115e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	210e      	movs	r1, #14
 800111c:	438a      	bics	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001124:	221c      	movs	r2, #28
 8001126:	401a      	ands	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	2101      	movs	r1, #1
 800112e:	4091      	lsls	r1, r2
 8001130:	000a      	movs	r2, r1
 8001132:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2225      	movs	r2, #37	@ 0x25
 800113e:	2101      	movs	r1, #1
 8001140:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2224      	movs	r2, #36	@ 0x24
 8001146:	2100      	movs	r1, #0
 8001148:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	0010      	movs	r0, r2
 800115a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46c0      	nop			@ (mov r8, r8)
}
 8001160:	46bd      	mov	sp, r7
 8001162:	b004      	add	sp, #16
 8001164:	bd80      	pop	{r7, pc}

08001166 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	60f8      	str	r0, [r7, #12]
 800116e:	60b9      	str	r1, [r7, #8]
 8001170:	607a      	str	r2, [r7, #4]
 8001172:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001178:	221c      	movs	r2, #28
 800117a:	401a      	ands	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	2101      	movs	r1, #1
 8001182:	4091      	lsls	r1, r2
 8001184:	000a      	movs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b10      	cmp	r3, #16
 8001196:	d108      	bne.n	80011aa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011a8:	e007      	b.n	80011ba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	60da      	str	r2, [r3, #12]
}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b004      	add	sp, #16
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011da:	e14f      	b.n	800147c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2101      	movs	r1, #1
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4091      	lsls	r1, r2
 80011e6:	000a      	movs	r2, r1
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d100      	bne.n	80011f4 <HAL_GPIO_Init+0x30>
 80011f2:	e140      	b.n	8001476 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d005      	beq.n	800120c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2203      	movs	r2, #3
 8001206:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001208:	2b02      	cmp	r3, #2
 800120a:	d130      	bne.n	800126e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	2203      	movs	r2, #3
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	409a      	lsls	r2, r3
 800122e:	0013      	movs	r3, r2
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001242:	2201      	movs	r2, #1
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	2201      	movs	r2, #1
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2203      	movs	r2, #3
 8001274:	4013      	ands	r3, r2
 8001276:	2b03      	cmp	r3, #3
 8001278:	d017      	beq.n	80012aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	409a      	lsls	r2, r3
 800129c:	0013      	movs	r3, r2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2203      	movs	r2, #3
 80012b0:	4013      	ands	r3, r2
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d123      	bne.n	80012fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	58d3      	ldr	r3, [r2, r3]
 80012c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	2207      	movs	r2, #7
 80012c8:	4013      	ands	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2107      	movs	r1, #7
 80012e2:	400b      	ands	r3, r1
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	08da      	lsrs	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	6939      	ldr	r1, [r7, #16]
 80012fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	401a      	ands	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	23c0      	movs	r3, #192	@ 0xc0
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d100      	bne.n	8001340 <HAL_GPIO_Init+0x17c>
 800133e:	e09a      	b.n	8001476 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001340:	4b54      	ldr	r3, [pc, #336]	@ (8001494 <HAL_GPIO_Init+0x2d0>)
 8001342:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001344:	4b53      	ldr	r3, [pc, #332]	@ (8001494 <HAL_GPIO_Init+0x2d0>)
 8001346:	2101      	movs	r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800134c:	4a52      	ldr	r2, [pc, #328]	@ (8001498 <HAL_GPIO_Init+0x2d4>)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	589b      	ldr	r3, [r3, r2]
 8001358:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2203      	movs	r2, #3
 800135e:	4013      	ands	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	409a      	lsls	r2, r3
 8001366:	0013      	movs	r3, r2
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	23a0      	movs	r3, #160	@ 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	429a      	cmp	r2, r3
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x1ea>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a47      	ldr	r2, [pc, #284]	@ (800149c <HAL_GPIO_Init+0x2d8>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x1e6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a46      	ldr	r2, [pc, #280]	@ (80014a0 <HAL_GPIO_Init+0x2dc>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x1e2>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a45      	ldr	r2, [pc, #276]	@ (80014a4 <HAL_GPIO_Init+0x2e0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x1de>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a44      	ldr	r2, [pc, #272]	@ (80014a8 <HAL_GPIO_Init+0x2e4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x1da>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x1ec>
 800139e:	2306      	movs	r3, #6
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x1ec>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x1ec>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x1ec>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x1ec>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	2103      	movs	r1, #3
 80013b4:	400a      	ands	r2, r1
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c0:	4935      	ldr	r1, [pc, #212]	@ (8001498 <HAL_GPIO_Init+0x2d4>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ce:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	035b      	lsls	r3, r3, #13
 80013e6:	4013      	ands	r3, r2
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013f2:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013f8:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	039b      	lsls	r3, r3, #14
 8001410:	4013      	ands	r3, r2
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001422:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	2380      	movs	r3, #128	@ 0x80
 8001438:	029b      	lsls	r3, r3, #10
 800143a:	4013      	ands	r3, r2
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43da      	mvns	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	025b      	lsls	r3, r3, #9
 8001464:	4013      	ands	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	40da      	lsrs	r2, r3
 8001484:	1e13      	subs	r3, r2, #0
 8001486:	d000      	beq.n	800148a <HAL_GPIO_Init+0x2c6>
 8001488:	e6a8      	b.n	80011dc <HAL_GPIO_Init+0x18>
  }
}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b006      	add	sp, #24
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000
 800149c:	50000400 	.word	0x50000400
 80014a0:	50000800 	.word	0x50000800
 80014a4:	50000c00 	.word	0x50000c00
 80014a8:	50001c00 	.word	0x50001c00
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	0008      	movs	r0, r1
 80014ba:	0011      	movs	r1, r2
 80014bc:	1cbb      	adds	r3, r7, #2
 80014be:	1c02      	adds	r2, r0, #0
 80014c0:	801a      	strh	r2, [r3, #0]
 80014c2:	1c7b      	adds	r3, r7, #1
 80014c4:	1c0a      	adds	r2, r1, #0
 80014c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c8:	1c7b      	adds	r3, r7, #1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d0:	1cbb      	adds	r3, r7, #2
 80014d2:	881a      	ldrh	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014da:	1cbb      	adds	r3, r7, #2
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e03d      	b.n	800157a <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a20      	ldr	r2, [pc, #128]	@ (8001584 <HAL_IWDG_Init+0x98>)
 8001504:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <HAL_IWDG_Init+0x9c>)
 800150c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6852      	ldr	r2, [r2, #4]
 8001516:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6892      	ldr	r2, [r2, #8]
 8001520:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001522:	f7ff fb65 	bl	8000bf0 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800152a:	e00e      	b.n	800154a <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800152c:	f7ff fb60 	bl	8000bf0 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b2a      	cmp	r3, #42	@ 0x2a
 8001538:	d907      	bls.n	800154a <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2207      	movs	r2, #7
 8001542:	4013      	ands	r3, r2
 8001544:	d001      	beq.n	800154a <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e017      	b.n	800157a <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2207      	movs	r2, #7
 8001552:	4013      	ands	r3, r2
 8001554:	d1ea      	bne.n	800152c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	d005      	beq.n	8001570 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68d2      	ldr	r2, [r2, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	e003      	b.n	8001578 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a05      	ldr	r2, [pc, #20]	@ (800158c <HAL_IWDG_Init+0xa0>)
 8001576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	0000cccc 	.word	0x0000cccc
 8001588:	00005555 	.word	0x00005555
 800158c:	0000aaaa 	.word	0x0000aaaa

08001590 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a03      	ldr	r2, [pc, #12]	@ (80015ac <HAL_IWDG_Refresh+0x1c>)
 800159e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	0000aaaa 	.word	0x0000aaaa

080015b0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <HAL_PWR_ConfigPVD+0xb8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	22e0      	movs	r2, #224	@ 0xe0
 80015be:	4393      	bics	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <HAL_PWR_ConfigPVD+0xb8>)
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015d2:	4927      	ldr	r1, [pc, #156]	@ (8001670 <HAL_PWR_ConfigPVD+0xc0>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b23      	ldr	r3, [pc, #140]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015de:	4924      	ldr	r1, [pc, #144]	@ (8001670 <HAL_PWR_ConfigPVD+0xc0>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015ea:	4921      	ldr	r1, [pc, #132]	@ (8001670 <HAL_PWR_ConfigPVD+0xc0>)
 80015ec:	400a      	ands	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 80015f6:	491e      	ldr	r1, [pc, #120]	@ (8001670 <HAL_PWR_ConfigPVD+0xc0>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	025b      	lsls	r3, r3, #9
 8001604:	4013      	ands	r3, r2
 8001606:	d006      	beq.n	8001616 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	0249      	lsls	r1, r1, #9
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d006      	beq.n	8001630 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	0249      	lsls	r1, r1, #9
 800162c:	430a      	orrs	r2, r1
 800162e:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d006      	beq.n	8001648 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	0249      	lsls	r1, r1, #9
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d006      	beq.n	8001660 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_PWR_ConfigPVD+0xbc>)
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	0249      	lsls	r1, r1, #9
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]
  }
}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40007000 	.word	0x40007000
 800166c:	40010400 	.word	0x40010400
 8001670:	fffeffff 	.word	0xfffeffff

08001674 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8001678:	4b04      	ldr	r3, [pc, #16]	@ (800168c <HAL_PWR_EnablePVD+0x18>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <HAL_PWR_EnablePVD+0x18>)
 800167e:	2110      	movs	r1, #16
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	40007000 	.word	0x40007000

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b08a      	sub	sp, #40	@ 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f000 fbaf 	bl	8001e02 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a4:	4bcf      	ldr	r3, [pc, #828]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	220c      	movs	r2, #12
 80016aa:	4013      	ands	r3, r2
 80016ac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016ae:	4bcd      	ldr	r3, [pc, #820]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4013      	ands	r3, r2
 80016b8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x36>
 80016c4:	e07e      	b.n	80017c4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d007      	beq.n	80016dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d112      	bne.n	80016f8 <HAL_RCC_OscConfig+0x68>
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	025b      	lsls	r3, r3, #9
 80016d8:	429a      	cmp	r2, r3
 80016da:	d10d      	bne.n	80016f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	4bc1      	ldr	r3, [pc, #772]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	029b      	lsls	r3, r3, #10
 80016e4:	4013      	ands	r3, r2
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x5a>
 80016e8:	e06b      	b.n	80017c2 <HAL_RCC_OscConfig+0x132>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d167      	bne.n	80017c2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f000 fb85 	bl	8001e02 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	025b      	lsls	r3, r3, #9
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x84>
 8001704:	4bb7      	ldr	r3, [pc, #732]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4bb6      	ldr	r3, [pc, #728]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800170a:	2180      	movs	r1, #128	@ 0x80
 800170c:	0249      	lsls	r1, r1, #9
 800170e:	430a      	orrs	r2, r1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e027      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	23a0      	movs	r3, #160	@ 0xa0
 800171a:	02db      	lsls	r3, r3, #11
 800171c:	429a      	cmp	r2, r3
 800171e:	d10e      	bne.n	800173e <HAL_RCC_OscConfig+0xae>
 8001720:	4bb0      	ldr	r3, [pc, #704]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4baf      	ldr	r3, [pc, #700]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	02c9      	lsls	r1, r1, #11
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	4bad      	ldr	r3, [pc, #692]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4bac      	ldr	r3, [pc, #688]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001734:	2180      	movs	r1, #128	@ 0x80
 8001736:	0249      	lsls	r1, r1, #9
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e012      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 800173e:	4ba9      	ldr	r3, [pc, #676]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4ba8      	ldr	r3, [pc, #672]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001744:	49a8      	ldr	r1, [pc, #672]	@ (80019e8 <HAL_RCC_OscConfig+0x358>)
 8001746:	400a      	ands	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	4ba6      	ldr	r3, [pc, #664]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	@ 0x80
 8001750:	025b      	lsls	r3, r3, #9
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4ba2      	ldr	r3, [pc, #648]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4ba1      	ldr	r3, [pc, #644]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800175e:	49a3      	ldr	r1, [pc, #652]	@ (80019ec <HAL_RCC_OscConfig+0x35c>)
 8001760:	400a      	ands	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d015      	beq.n	8001798 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fa40 	bl	8000bf0 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001774:	e009      	b.n	800178a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001776:	f7ff fa3b 	bl	8000bf0 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	@ 0x64
 8001782:	d902      	bls.n	800178a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	f000 fb3c 	bl	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800178a:	4b96      	ldr	r3, [pc, #600]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	029b      	lsls	r3, r3, #10
 8001792:	4013      	ands	r3, r2
 8001794:	d0ef      	beq.n	8001776 <HAL_RCC_OscConfig+0xe6>
 8001796:	e015      	b.n	80017c4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fa2a 	bl	8000bf0 <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a2:	f7ff fa25 	bl	8000bf0 <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b64      	cmp	r3, #100	@ 0x64
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e326      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017b4:	4b8b      	ldr	r3, [pc, #556]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	@ 0x80
 80017ba:	029b      	lsls	r3, r3, #10
 80017bc:	4013      	ands	r3, r2
 80017be:	d1f0      	bne.n	80017a2 <HAL_RCC_OscConfig+0x112>
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d100      	bne.n	80017d0 <HAL_RCC_OscConfig+0x140>
 80017ce:	e08b      	b.n	80018e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d005      	beq.n	80017e8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d13e      	bne.n	8001860 <HAL_RCC_OscConfig+0x1d0>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d13b      	bne.n	8001860 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017e8:	4b7e      	ldr	r3, [pc, #504]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2204      	movs	r2, #4
 80017ee:	4013      	ands	r3, r2
 80017f0:	d004      	beq.n	80017fc <HAL_RCC_OscConfig+0x16c>
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e302      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b79      	ldr	r3, [pc, #484]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a7b      	ldr	r2, [pc, #492]	@ (80019f0 <HAL_RCC_OscConfig+0x360>)
 8001802:	4013      	ands	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	021a      	lsls	r2, r3, #8
 800180c:	4b75      	ldr	r3, [pc, #468]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800180e:	430a      	orrs	r2, r1
 8001810:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001812:	4b74      	ldr	r3, [pc, #464]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2209      	movs	r2, #9
 8001818:	4393      	bics	r3, r2
 800181a:	0019      	movs	r1, r3
 800181c:	4b71      	ldr	r3, [pc, #452]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001824:	f000 fc40 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8001828:	0001      	movs	r1, r0
 800182a:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	220f      	movs	r2, #15
 8001832:	4013      	ands	r3, r2
 8001834:	4a6f      	ldr	r2, [pc, #444]	@ (80019f4 <HAL_RCC_OscConfig+0x364>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	000a      	movs	r2, r1
 800183a:	40da      	lsrs	r2, r3
 800183c:	4b6e      	ldr	r3, [pc, #440]	@ (80019f8 <HAL_RCC_OscConfig+0x368>)
 800183e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001840:	4b6e      	ldr	r3, [pc, #440]	@ (80019fc <HAL_RCC_OscConfig+0x36c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2513      	movs	r5, #19
 8001846:	197c      	adds	r4, r7, r5
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff f98b 	bl	8000b64 <HAL_InitTick>
 800184e:	0003      	movs	r3, r0
 8001850:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001852:	197b      	adds	r3, r7, r5
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d046      	beq.n	80018e8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800185a:	197b      	adds	r3, r7, r5
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	e2d0      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d027      	beq.n	80018b6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001866:	4b5f      	ldr	r3, [pc, #380]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2209      	movs	r2, #9
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	4b5c      	ldr	r3, [pc, #368]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff f9ba 	bl	8000bf0 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff f9b5 	bl	8000bf0 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e2b6      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2204      	movs	r2, #4
 800189a:	4013      	ands	r3, r2
 800189c:	d0f1      	beq.n	8001882 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189e:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a53      	ldr	r2, [pc, #332]	@ (80019f0 <HAL_RCC_OscConfig+0x360>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	021a      	lsls	r2, r3, #8
 80018ae:	4b4d      	ldr	r3, [pc, #308]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b4b      	ldr	r3, [pc, #300]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80018bc:	2101      	movs	r1, #1
 80018be:	438a      	bics	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff f995 	bl	8000bf0 <HAL_GetTick>
 80018c6:	0003      	movs	r3, r0
 80018c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff f990 	bl	8000bf0 <HAL_GetTick>
 80018d0:	0002      	movs	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e291      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018de:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2204      	movs	r2, #4
 80018e4:	4013      	ands	r3, r2
 80018e6:	d1f1      	bne.n	80018cc <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2210      	movs	r2, #16
 80018ee:	4013      	ands	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_RCC_OscConfig+0x264>
 80018f2:	e0a1      	b.n	8001a38 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d140      	bne.n	800197c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fa:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x282>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e277      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001912:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4a3a      	ldr	r2, [pc, #232]	@ (8001a00 <HAL_RCC_OscConfig+0x370>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001920:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001926:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	0a19      	lsrs	r1, r3, #8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	061a      	lsls	r2, r3, #24
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193e:	0b5b      	lsrs	r3, r3, #13
 8001940:	3301      	adds	r3, #1
 8001942:	2280      	movs	r2, #128	@ 0x80
 8001944:	0212      	lsls	r2, r2, #8
 8001946:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001948:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	210f      	movs	r1, #15
 8001950:	400b      	ands	r3, r1
 8001952:	4928      	ldr	r1, [pc, #160]	@ (80019f4 <HAL_RCC_OscConfig+0x364>)
 8001954:	5ccb      	ldrb	r3, [r1, r3]
 8001956:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <HAL_RCC_OscConfig+0x368>)
 800195a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800195c:	4b27      	ldr	r3, [pc, #156]	@ (80019fc <HAL_RCC_OscConfig+0x36c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2513      	movs	r5, #19
 8001962:	197c      	adds	r4, r7, r5
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff f8fd 	bl	8000b64 <HAL_InitTick>
 800196a:	0003      	movs	r3, r0
 800196c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800196e:	197b      	adds	r3, r7, r5
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d060      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001976:	197b      	adds	r3, r7, r5
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	e242      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03f      	beq.n	8001a04 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0049      	lsls	r1, r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff f92d 	bl	8000bf0 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199c:	f7ff f928 	bl	8000bf0 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e229      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <HAL_RCC_OscConfig+0x370>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	0a19      	lsrs	r1, r3, #8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	061a      	lsls	r2, r3, #24
 80019dc:	4b01      	ldr	r3, [pc, #4]	@ (80019e4 <HAL_RCC_OscConfig+0x354>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	e029      	b.n	8001a38 <HAL_RCC_OscConfig+0x3a8>
 80019e4:	40021000 	.word	0x40021000
 80019e8:	fffeffff 	.word	0xfffeffff
 80019ec:	fffbffff 	.word	0xfffbffff
 80019f0:	ffffe0ff 	.word	0xffffe0ff
 80019f4:	08004480 	.word	0x08004480
 80019f8:	20000020 	.word	0x20000020
 80019fc:	20000024 	.word	0x20000024
 8001a00:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a04:	4bbd      	ldr	r3, [pc, #756]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4bbc      	ldr	r3, [pc, #752]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a0a:	49bd      	ldr	r1, [pc, #756]	@ (8001d00 <HAL_RCC_OscConfig+0x670>)
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff f8ee 	bl	8000bf0 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a1a:	f7ff f8e9 	bl	8000bf0 <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1ea      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a2c:	4bb3      	ldr	r3, [pc, #716]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d036      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d019      	beq.n	8001a7e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4bac      	ldr	r3, [pc, #688]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a4e:	4bab      	ldr	r3, [pc, #684]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	430a      	orrs	r2, r1
 8001a54:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f8cb 	bl	8000bf0 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f8c6 	bl	8000bf0 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1c7      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a72:	4ba2      	ldr	r3, [pc, #648]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0f1      	beq.n	8001a60 <HAL_RCC_OscConfig+0x3d0>
 8001a7c:	e018      	b.n	8001ab0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b9f      	ldr	r3, [pc, #636]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a82:	4b9e      	ldr	r3, [pc, #632]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	438a      	bics	r2, r1
 8001a88:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f8b1 	bl	8000bf0 <HAL_GetTick>
 8001a8e:	0003      	movs	r3, r0
 8001a90:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff f8ac 	bl	8000bf0 <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1ad      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aa6:	4b95      	ldr	r3, [pc, #596]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4013      	ands	r3, r2
 8001aae:	d1f1      	bne.n	8001a94 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d100      	bne.n	8001abc <HAL_RCC_OscConfig+0x42c>
 8001aba:	e0ae      	b.n	8001c1a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abc:	2027      	movs	r0, #39	@ 0x27
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac4:	4b8d      	ldr	r3, [pc, #564]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001ac6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	4013      	ands	r3, r2
 8001ace:	d109      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	4b8a      	ldr	r3, [pc, #552]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad4:	4b89      	ldr	r3, [pc, #548]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001ad6:	2180      	movs	r1, #128	@ 0x80
 8001ad8:	0549      	lsls	r1, r1, #21
 8001ada:	430a      	orrs	r2, r1
 8001adc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ade:	183b      	adds	r3, r7, r0
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b87      	ldr	r3, [pc, #540]	@ (8001d04 <HAL_RCC_OscConfig+0x674>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	@ 0x80
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d11a      	bne.n	8001b26 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af0:	4b84      	ldr	r3, [pc, #528]	@ (8001d04 <HAL_RCC_OscConfig+0x674>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b83      	ldr	r3, [pc, #524]	@ (8001d04 <HAL_RCC_OscConfig+0x674>)
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7ff f877 	bl	8000bf0 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7ff f872 	bl	8000bf0 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	@ 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e173      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d04 <HAL_RCC_OscConfig+0x674>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	@ 0x80
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_OscConfig+0x4b2>
 8001b32:	4b72      	ldr	r3, [pc, #456]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b36:	4b71      	ldr	r3, [pc, #452]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b38:	2180      	movs	r1, #128	@ 0x80
 8001b3a:	0049      	lsls	r1, r1, #1
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b40:	e031      	b.n	8001ba6 <HAL_RCC_OscConfig+0x516>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4d4>
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b50:	496b      	ldr	r1, [pc, #428]	@ (8001d00 <HAL_RCC_OscConfig+0x670>)
 8001b52:	400a      	ands	r2, r1
 8001b54:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b56:	4b69      	ldr	r3, [pc, #420]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b5a:	4b68      	ldr	r3, [pc, #416]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b5c:	496a      	ldr	r1, [pc, #424]	@ (8001d08 <HAL_RCC_OscConfig+0x678>)
 8001b5e:	400a      	ands	r2, r1
 8001b60:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b62:	e020      	b.n	8001ba6 <HAL_RCC_OscConfig+0x516>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	23a0      	movs	r3, #160	@ 0xa0
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d10e      	bne.n	8001b8e <HAL_RCC_OscConfig+0x4fe>
 8001b70:	4b62      	ldr	r3, [pc, #392]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b74:	4b61      	ldr	r3, [pc, #388]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b76:	2180      	movs	r1, #128	@ 0x80
 8001b78:	00c9      	lsls	r1, r1, #3
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b82:	4b5e      	ldr	r3, [pc, #376]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b84:	2180      	movs	r1, #128	@ 0x80
 8001b86:	0049      	lsls	r1, r1, #1
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b8c:	e00b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x516>
 8001b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b92:	4b5a      	ldr	r3, [pc, #360]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b94:	495a      	ldr	r1, [pc, #360]	@ (8001d00 <HAL_RCC_OscConfig+0x670>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b9a:	4b58      	ldr	r3, [pc, #352]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b9e:	4b57      	ldr	r3, [pc, #348]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001ba0:	4959      	ldr	r1, [pc, #356]	@ (8001d08 <HAL_RCC_OscConfig+0x678>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d015      	beq.n	8001bda <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f81f 	bl	8000bf0 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f81a 	bl	8000bf0 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_OscConfig+0x67c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e11a      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001bce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0ef      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x528>
 8001bd8:	e014      	b.n	8001c04 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff f809 	bl	8000bf0 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001be2:	e009      	b.n	8001bf8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff f804 	bl	8000bf0 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	4a47      	ldr	r2, [pc, #284]	@ (8001d0c <HAL_RCC_OscConfig+0x67c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e104      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bf8:	4b40      	ldr	r3, [pc, #256]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001bfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bfc:	2380      	movs	r3, #128	@ 0x80
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4013      	ands	r3, r2
 8001c02:	d1ef      	bne.n	8001be4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c04:	2327      	movs	r3, #39	@ 0x27
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c12:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c14:	493e      	ldr	r1, [pc, #248]	@ (8001d10 <HAL_RCC_OscConfig+0x680>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	4013      	ands	r3, r2
 8001c22:	d049      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d026      	beq.n	8001c7a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c2c:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	4b30      	ldr	r3, [pc, #192]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c44:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <HAL_RCC_OscConfig+0x684>)
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_RCC_OscConfig+0x684>)
 8001c4a:	2180      	movs	r1, #128	@ 0x80
 8001c4c:	0189      	lsls	r1, r1, #6
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7fe ffcd 	bl	8000bf0 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5c:	f7fe ffc8 	bl	8000bf0 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0c9      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c6e:	4b23      	ldr	r3, [pc, #140]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d0f1      	beq.n	8001c5c <HAL_RCC_OscConfig+0x5cc>
 8001c78:	e01e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c7a:	4b20      	ldr	r3, [pc, #128]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	438a      	bics	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	4b23      	ldr	r3, [pc, #140]	@ (8001d14 <HAL_RCC_OscConfig+0x684>)
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_RCC_OscConfig+0x684>)
 8001c8c:	4922      	ldr	r1, [pc, #136]	@ (8001d18 <HAL_RCC_OscConfig+0x688>)
 8001c8e:	400a      	ands	r2, r1
 8001c90:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7fe ffad 	bl	8000bf0 <HAL_GetTick>
 8001c96:	0003      	movs	r3, r0
 8001c98:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c9c:	f7fe ffa8 	bl	8000bf0 <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0a9      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d1f1      	bne.n	8001c9c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x632>
 8001cc0:	e09e      	b.n	8001e00 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d100      	bne.n	8001cca <HAL_RCC_OscConfig+0x63a>
 8001cc8:	e077      	b.n	8001dba <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d158      	bne.n	8001d84 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_RCC_OscConfig+0x66c>)
 8001cd8:	4910      	ldr	r1, [pc, #64]	@ (8001d1c <HAL_RCC_OscConfig+0x68c>)
 8001cda:	400a      	ands	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7fe ff87 	bl	8000bf0 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ce6:	e01b      	b.n	8001d20 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7fe ff82 	bl	8000bf0 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d914      	bls.n	8001d20 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e083      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	fffffeff 	.word	0xfffffeff
 8001d04:	40007000 	.word	0x40007000
 8001d08:	fffffbff 	.word	0xfffffbff
 8001d0c:	00001388 	.word	0x00001388
 8001d10:	efffffff 	.word	0xefffffff
 8001d14:	40010000 	.word	0x40010000
 8001d18:	ffffdfff 	.word	0xffffdfff
 8001d1c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d20:	4b3a      	ldr	r3, [pc, #232]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	049b      	lsls	r3, r3, #18
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d1dd      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d2c:	4b37      	ldr	r3, [pc, #220]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a37      	ldr	r2, [pc, #220]	@ (8001e10 <HAL_RCC_OscConfig+0x780>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d44:	431a      	orrs	r2, r3
 8001d46:	4b31      	ldr	r3, [pc, #196]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d52:	2180      	movs	r1, #128	@ 0x80
 8001d54:	0449      	lsls	r1, r1, #17
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe ff49 	bl	8000bf0 <HAL_GetTick>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d64:	f7fe ff44 	bl	8000bf0 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e045      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d76:	4b25      	ldr	r3, [pc, #148]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	049b      	lsls	r3, r3, #18
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x6d4>
 8001d82:	e03d      	b.n	8001e00 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d8a:	4922      	ldr	r1, [pc, #136]	@ (8001e14 <HAL_RCC_OscConfig+0x784>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe ff2e 	bl	8000bf0 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7fe ff29 	bl	8000bf0 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e02a      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dac:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	049b      	lsls	r3, r3, #18
 8001db4:	4013      	ands	r3, r2
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x70a>
 8001db8:	e022      	b.n	8001e00 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01d      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	025b      	lsls	r3, r3, #9
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d10f      	bne.n	8001dfc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	23f0      	movs	r3, #240	@ 0xf0
 8001de0:	039b      	lsls	r3, r3, #14
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	23c0      	movs	r3, #192	@ 0xc0
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b00a      	add	sp, #40	@ 0x28
 8001e08:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	ff02ffff 	.word	0xff02ffff
 8001e14:	feffffff 	.word	0xfeffffff

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e128      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b96      	ldr	r3, [pc, #600]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4013      	ands	r3, r2
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d91e      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b93      	ldr	r3, [pc, #588]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4393      	bics	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	4b90      	ldr	r3, [pc, #576]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e4c:	f7fe fed0 	bl	8000bf0 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e56:	f7fe fecb 	bl	8000bf0 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a8a      	ldr	r2, [pc, #552]	@ (800208c <HAL_RCC_ClockConfig+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e109      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b87      	ldr	r3, [pc, #540]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1ee      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e82:	4b83      	ldr	r3, [pc, #524]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	22f0      	movs	r2, #240	@ 0xf0
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	4b7f      	ldr	r3, [pc, #508]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d100      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x8a>
 8001ea0:	e089      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d107      	bne.n	8001eba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eaa:	4b79      	ldr	r3, [pc, #484]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	029b      	lsls	r3, r3, #10
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d120      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0e1      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec2:	4b73      	ldr	r3, [pc, #460]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	@ 0x80
 8001ec8:	049b      	lsls	r3, r3, #18
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d114      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0d5      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eda:	4b6d      	ldr	r3, [pc, #436]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d109      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0ca      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ee8:	4b69      	ldr	r3, [pc, #420]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0c2      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	4b65      	ldr	r3, [pc, #404]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2203      	movs	r2, #3
 8001efe:	4393      	bics	r3, r2
 8001f00:	0019      	movs	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4b62      	ldr	r3, [pc, #392]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fe70 	bl	8000bf0 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d111      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f1c:	e009      	b.n	8001f32 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7fe fe67 	bl	8000bf0 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a58      	ldr	r2, [pc, #352]	@ (800208c <HAL_RCC_ClockConfig+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e0a5      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f32:	4b57      	ldr	r3, [pc, #348]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	220c      	movs	r2, #12
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d1ef      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x106>
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d111      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7fe fe51 	bl	8000bf0 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a4d      	ldr	r2, [pc, #308]	@ (800208c <HAL_RCC_ClockConfig+0x274>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e08f      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d1ef      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x132>
 8001f6a:	e024      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d11b      	bne.n	8001fac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f74:	e009      	b.n	8001f8a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f76:	f7fe fe3b 	bl	8000bf0 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a42      	ldr	r2, [pc, #264]	@ (800208c <HAL_RCC_ClockConfig+0x274>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e079      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8a:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	220c      	movs	r2, #12
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d1ef      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x15e>
 8001f96:	e00e      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7fe fe2a 	bl	8000bf0 <HAL_GetTick>
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	4a3a      	ldr	r2, [pc, #232]	@ (800208c <HAL_RCC_ClockConfig+0x274>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e068      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fac:	4b38      	ldr	r3, [pc, #224]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d21e      	bcs.n	8002002 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc4:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4393      	bics	r3, r2
 8001fcc:	0019      	movs	r1, r3
 8001fce:	4b2e      	ldr	r3, [pc, #184]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fd6:	f7fe fe0b 	bl	8000bf0 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fe06 	bl	8000bf0 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	4a28      	ldr	r2, [pc, #160]	@ (800208c <HAL_RCC_ClockConfig+0x274>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e044      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff4:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_RCC_ClockConfig+0x270>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d1ee      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2204      	movs	r2, #4
 8002008:	4013      	ands	r3, r2
 800200a:	d009      	beq.n	8002020 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a20      	ldr	r2, [pc, #128]	@ (8002094 <HAL_RCC_ClockConfig+0x27c>)
 8002012:	4013      	ands	r3, r2
 8002014:	0019      	movs	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b1d      	ldr	r3, [pc, #116]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2208      	movs	r2, #8
 8002026:	4013      	ands	r3, r2
 8002028:	d00a      	beq.n	8002040 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202a:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	4a1a      	ldr	r2, [pc, #104]	@ (8002098 <HAL_RCC_ClockConfig+0x280>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	00da      	lsls	r2, r3, #3
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002040:	f000 f832 	bl	80020a8 <HAL_RCC_GetSysClockFreq>
 8002044:	0001      	movs	r1, r0
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_RCC_ClockConfig+0x278>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	220f      	movs	r2, #15
 800204e:	4013      	ands	r3, r2
 8002050:	4a12      	ldr	r2, [pc, #72]	@ (800209c <HAL_RCC_ClockConfig+0x284>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	000a      	movs	r2, r1
 8002056:	40da      	lsrs	r2, r3
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_RCC_ClockConfig+0x288>)
 800205a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800205c:	4b11      	ldr	r3, [pc, #68]	@ (80020a4 <HAL_RCC_ClockConfig+0x28c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	250b      	movs	r5, #11
 8002062:	197c      	adds	r4, r7, r5
 8002064:	0018      	movs	r0, r3
 8002066:	f7fe fd7d 	bl	8000b64 <HAL_InitTick>
 800206a:	0003      	movs	r3, r0
 800206c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800206e:	197b      	adds	r3, r7, r5
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d002      	beq.n	800207c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002076:	197b      	adds	r3, r7, r5
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	e000      	b.n	800207e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	0018      	movs	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	b004      	add	sp, #16
 8002084:	bdb0      	pop	{r4, r5, r7, pc}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	40022000 	.word	0x40022000
 800208c:	00001388 	.word	0x00001388
 8002090:	40021000 	.word	0x40021000
 8002094:	fffff8ff 	.word	0xfffff8ff
 8002098:	ffffc7ff 	.word	0xffffc7ff
 800209c:	08004480 	.word	0x08004480
 80020a0:	20000020 	.word	0x20000020
 80020a4:	20000024 	.word	0x20000024

080020a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80020ae:	4b3c      	ldr	r3, [pc, #240]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	220c      	movs	r2, #12
 80020b8:	4013      	ands	r3, r2
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d013      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80020be:	d85c      	bhi.n	800217a <HAL_RCC_GetSysClockFreq+0xd2>
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d002      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x22>
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d00b      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x38>
 80020c8:	e057      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020ca:	4b35      	ldr	r3, [pc, #212]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2210      	movs	r2, #16
 80020d0:	4013      	ands	r3, r2
 80020d2:	d002      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020d4:	4b33      	ldr	r3, [pc, #204]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020d6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80020d8:	e05d      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80020da:	4b33      	ldr	r3, [pc, #204]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80020dc:	613b      	str	r3, [r7, #16]
      break;
 80020de:	e05a      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e0:	4b32      	ldr	r3, [pc, #200]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x104>)
 80020e2:	613b      	str	r3, [r7, #16]
      break;
 80020e4:	e057      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	220f      	movs	r2, #15
 80020ec:	4013      	ands	r3, r2
 80020ee:	4a30      	ldr	r2, [pc, #192]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	5cd3      	ldrb	r3, [r2, r3]
 80020f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0d9b      	lsrs	r3, r3, #22
 80020f8:	2203      	movs	r2, #3
 80020fa:	4013      	ands	r3, r2
 80020fc:	3301      	adds	r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002100:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	4013      	ands	r3, r2
 800210a:	d00f      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	000a      	movs	r2, r1
 8002110:	0152      	lsls	r2, r2, #5
 8002112:	1a52      	subs	r2, r2, r1
 8002114:	0193      	lsls	r3, r2, #6
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	185b      	adds	r3, r3, r1
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	0018      	movs	r0, r3
 8002122:	f7fd fff1 	bl	8000108 <__udivsi3>
 8002126:	0003      	movs	r3, r0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e023      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2210      	movs	r2, #16
 8002132:	4013      	ands	r3, r2
 8002134:	d00f      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	000a      	movs	r2, r1
 800213a:	0152      	lsls	r2, r2, #5
 800213c:	1a52      	subs	r2, r2, r1
 800213e:	0193      	lsls	r3, r2, #6
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	185b      	adds	r3, r3, r1
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	0018      	movs	r0, r3
 800214c:	f7fd ffdc 	bl	8000108 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e00e      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	000a      	movs	r2, r1
 800215a:	0152      	lsls	r2, r2, #5
 800215c:	1a52      	subs	r2, r2, r1
 800215e:	0193      	lsls	r3, r2, #6
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	185b      	adds	r3, r3, r1
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f7fd ffcc 	bl	8000108 <__udivsi3>
 8002170:	0003      	movs	r3, r0
 8002172:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
      break;
 8002178:	e00d      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800217a:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	0212      	lsls	r2, r2, #8
 800218e:	409a      	lsls	r2, r3
 8002190:	0013      	movs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
      break;
 8002194:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002196:	693b      	ldr	r3, [r7, #16]
}
 8002198:	0018      	movs	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	b006      	add	sp, #24
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	003d0900 	.word	0x003d0900
 80021a8:	00f42400 	.word	0x00f42400
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	08004490 	.word	0x08004490

080021b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e083      	b.n	80022ce <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	2382      	movs	r3, #130	@ 0x82
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d009      	beq.n	80021ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
 80021e0:	e005      	b.n	80021ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2251      	movs	r2, #81	@ 0x51
 80021f8:	5c9b      	ldrb	r3, [r3, r2]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2250      	movs	r2, #80	@ 0x50
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	f7fe fb2e 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2251      	movs	r2, #81	@ 0x51
 8002214:	2102      	movs	r1, #2
 8002216:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2140      	movs	r1, #64	@ 0x40
 8002224:	438a      	bics	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	2382      	movs	r3, #130	@ 0x82
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	401a      	ands	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	2384      	movs	r3, #132	@ 0x84
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	400b      	ands	r3, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2102      	movs	r1, #2
 8002250:	400b      	ands	r3, r1
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	2101      	movs	r1, #1
 800225a:	400b      	ands	r3, r1
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6999      	ldr	r1, [r3, #24]
 8002262:	2380      	movs	r3, #128	@ 0x80
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	400b      	ands	r3, r1
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	2138      	movs	r1, #56	@ 0x38
 8002270:	400b      	ands	r3, r1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	400b      	ands	r3, r1
 800227c:	431a      	orrs	r2, r3
 800227e:	0011      	movs	r1, r2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	019b      	lsls	r3, r3, #6
 8002288:	401a      	ands	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	0c1b      	lsrs	r3, r3, #16
 8002298:	2204      	movs	r2, #4
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	2210      	movs	r2, #16
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4907      	ldr	r1, [pc, #28]	@ (80022d8 <HAL_SPI_Init+0x124>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2251      	movs	r2, #81	@ 0x51
 80022c8:	2101      	movs	r1, #1
 80022ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	fffff7ff 	.word	0xfffff7ff

080022dc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	1dbb      	adds	r3, r7, #6
 80022e8:	801a      	strh	r2, [r3, #0]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2251      	movs	r2, #81	@ 0x51
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
 80022f8:	e09b      	b.n	8002432 <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_SPI_Transmit_DMA+0x2c>
 8002300:	1dbb      	adds	r3, r7, #6
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_SPI_Transmit_DMA+0x30>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e092      	b.n	8002432 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2250      	movs	r2, #80	@ 0x50
 8002310:	5c9b      	ldrb	r3, [r3, r2]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_SPI_Transmit_DMA+0x3e>
 8002316:	2302      	movs	r3, #2
 8002318:	e08b      	b.n	8002432 <HAL_SPI_Transmit_DMA+0x156>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2250      	movs	r2, #80	@ 0x50
 800231e:	2101      	movs	r1, #1
 8002320:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2251      	movs	r2, #81	@ 0x51
 8002326:	2103      	movs	r1, #3
 8002328:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1dba      	adds	r2, r7, #6
 800233a:	8812      	ldrh	r2, [r2, #0]
 800233c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1dba      	adds	r2, r7, #6
 8002342:	8812      	ldrh	r2, [r2, #0]
 8002344:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	429a      	cmp	r2, r3
 800236e:	d110      	bne.n	8002392 <HAL_SPI_Transmit_DMA+0xb6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2140      	movs	r1, #64	@ 0x40
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2180      	movs	r1, #128	@ 0x80
 800238c:	01c9      	lsls	r1, r1, #7
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002396:	4a29      	ldr	r2, [pc, #164]	@ (800243c <HAL_SPI_Transmit_DMA+0x160>)
 8002398:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239e:	4a28      	ldr	r2, [pc, #160]	@ (8002440 <HAL_SPI_Transmit_DMA+0x164>)
 80023a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a6:	4a27      	ldr	r2, [pc, #156]	@ (8002444 <HAL_SPI_Transmit_DMA+0x168>)
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ae:	2200      	movs	r2, #0
 80023b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	0019      	movs	r1, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023ca:	f7fe fd71 	bl	8000eb0 <HAL_DMA_Start_IT>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_SPI_Transmit_DMA+0x10e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	2210      	movs	r2, #16
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2250      	movs	r2, #80	@ 0x50
 80023e2:	2100      	movs	r1, #0
 80023e4:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e023      	b.n	8002432 <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2240      	movs	r2, #64	@ 0x40
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b40      	cmp	r3, #64	@ 0x40
 80023f6:	d007      	beq.n	8002408 <HAL_SPI_Transmit_DMA+0x12c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2140      	movs	r1, #64	@ 0x40
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2250      	movs	r2, #80	@ 0x50
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2120      	movs	r1, #32
 800241c:	430a      	orrs	r2, r1
 800241e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2102      	movs	r1, #2
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	08002c27 	.word	0x08002c27
 8002440:	08002a39 	.word	0x08002a39
 8002444:	08002c81 	.word	0x08002c81

08002448 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	1dbb      	adds	r3, r7, #6
 8002454:	801a      	strh	r2, [r3, #0]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2251      	movs	r2, #81	@ 0x51
 800245a:	5c9b      	ldrb	r3, [r3, r2]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d001      	beq.n	8002466 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
 8002464:	e0ae      	b.n	80025c4 <HAL_SPI_Receive_DMA+0x17c>
  }

  if ((pData == NULL) || (Size == 0U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_SPI_Receive_DMA+0x2c>
 800246c:	1dbb      	adds	r3, r7, #6
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_SPI_Receive_DMA+0x30>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0a5      	b.n	80025c4 <HAL_SPI_Receive_DMA+0x17c>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d112      	bne.n	80024a6 <HAL_SPI_Receive_DMA+0x5e>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	2382      	movs	r3, #130	@ 0x82
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	429a      	cmp	r2, r3
 800248a:	d10c      	bne.n	80024a6 <HAL_SPI_Receive_DMA+0x5e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2251      	movs	r2, #81	@ 0x51
 8002490:	2104      	movs	r1, #4
 8002492:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002494:	1dbb      	adds	r3, r7, #6
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	68b9      	ldr	r1, [r7, #8]
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f89d 	bl	80025dc <HAL_SPI_TransmitReceive_DMA>
 80024a2:	0003      	movs	r3, r0
 80024a4:	e08e      	b.n	80025c4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2250      	movs	r2, #80	@ 0x50
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_SPI_Receive_DMA+0x6c>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e087      	b.n	80025c4 <HAL_SPI_Receive_DMA+0x17c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2250      	movs	r2, #80	@ 0x50
 80024b8:	2101      	movs	r1, #1
 80024ba:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2251      	movs	r2, #81	@ 0x51
 80024c0:	2104      	movs	r1, #4
 80024c2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1dba      	adds	r2, r7, #6
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1dba      	adds	r2, r7, #6
 80024dc:	8812      	ldrh	r2, [r2, #0]
 80024de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	429a      	cmp	r2, r3
 8002502:	d10f      	bne.n	8002524 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2140      	movs	r1, #64	@ 0x40
 8002510:	438a      	bics	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	492b      	ldr	r1, [pc, #172]	@ (80025cc <HAL_SPI_Receive_DMA+0x184>)
 8002520:	400a      	ands	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	4a29      	ldr	r2, [pc, #164]	@ (80025d0 <HAL_SPI_Receive_DMA+0x188>)
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002530:	4a28      	ldr	r2, [pc, #160]	@ (80025d4 <HAL_SPI_Receive_DMA+0x18c>)
 8002532:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002538:	4a27      	ldr	r2, [pc, #156]	@ (80025d8 <HAL_SPI_Receive_DMA+0x190>)
 800253a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002540:	2200      	movs	r2, #0
 8002542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	330c      	adds	r3, #12
 800254e:	0019      	movs	r1, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800255a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800255c:	f7fe fca8 	bl	8000eb0 <HAL_DMA_Start_IT>
 8002560:	1e03      	subs	r3, r0, #0
 8002562:	d00b      	beq.n	800257c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	2210      	movs	r2, #16
 800256a:	431a      	orrs	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2250      	movs	r2, #80	@ 0x50
 8002574:	2100      	movs	r1, #0
 8002576:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e023      	b.n	80025c4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	4013      	ands	r3, r2
 8002586:	2b40      	cmp	r3, #64	@ 0x40
 8002588:	d007      	beq.n	800259a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2140      	movs	r1, #64	@ 0x40
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2250      	movs	r2, #80	@ 0x50
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2120      	movs	r1, #32
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	430a      	orrs	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b004      	add	sp, #16
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	ffffbfff 	.word	0xffffbfff
 80025d0:	08002c45 	.word	0x08002c45
 80025d4:	08002ae5 	.word	0x08002ae5
 80025d8:	08002c81 	.word	0x08002c81

080025dc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	001a      	movs	r2, r3
 80025ea:	1cbb      	adds	r3, r7, #2
 80025ec:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025ee:	2017      	movs	r0, #23
 80025f0:	183b      	adds	r3, r7, r0
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	2151      	movs	r1, #81	@ 0x51
 80025f6:	5c52      	ldrb	r2, [r2, r1]
 80025f8:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002600:	0001      	movs	r1, r0
 8002602:	187b      	adds	r3, r7, r1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d00e      	beq.n	8002628 <HAL_SPI_TransmitReceive_DMA+0x4c>
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	2382      	movs	r3, #130	@ 0x82
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	429a      	cmp	r2, r3
 8002612:	d107      	bne.n	8002624 <HAL_SPI_TransmitReceive_DMA+0x48>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <HAL_SPI_TransmitReceive_DMA+0x48>
 800261c:	187b      	adds	r3, r7, r1
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d001      	beq.n	8002628 <HAL_SPI_TransmitReceive_DMA+0x4c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002624:	2302      	movs	r3, #2
 8002626:	e0d2      	b.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_SPI_TransmitReceive_DMA+0x60>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_SPI_TransmitReceive_DMA+0x60>
 8002634:	1cbb      	adds	r3, r7, #2
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_SPI_TransmitReceive_DMA+0x64>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0c6      	b.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2250      	movs	r2, #80	@ 0x50
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_SPI_TransmitReceive_DMA+0x72>
 800264a:	2302      	movs	r3, #2
 800264c:	e0bf      	b.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x1f2>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2250      	movs	r2, #80	@ 0x50
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2251      	movs	r2, #81	@ 0x51
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b04      	cmp	r3, #4
 8002660:	d003      	beq.n	800266a <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2251      	movs	r2, #81	@ 0x51
 8002666:	2105      	movs	r1, #5
 8002668:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1cba      	adds	r2, r7, #2
 800267a:	8812      	ldrh	r2, [r2, #0]
 800267c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1cba      	adds	r2, r7, #2
 8002682:	8812      	ldrh	r2, [r2, #0]
 8002684:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1cba      	adds	r2, r7, #2
 8002690:	8812      	ldrh	r2, [r2, #0]
 8002692:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1cba      	adds	r2, r7, #2
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2251      	movs	r2, #81	@ 0x51
 80026ac:	5c9b      	ldrb	r3, [r3, r2]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d108      	bne.n	80026c6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b8:	4a47      	ldr	r2, [pc, #284]	@ (80027d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80026ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c0:	4a46      	ldr	r2, [pc, #280]	@ (80027dc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80026c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026c4:	e007      	b.n	80026d6 <HAL_SPI_TransmitReceive_DMA+0xfa>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	4a45      	ldr	r2, [pc, #276]	@ (80027e0 <HAL_SPI_TransmitReceive_DMA+0x204>)
 80026cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d2:	4a44      	ldr	r2, [pc, #272]	@ (80027e4 <HAL_SPI_TransmitReceive_DMA+0x208>)
 80026d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026da:	4a43      	ldr	r2, [pc, #268]	@ (80027e8 <HAL_SPI_TransmitReceive_DMA+0x20c>)
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	2200      	movs	r2, #0
 80026e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	0019      	movs	r1, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f6:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026fe:	f7fe fbd7 	bl	8000eb0 <HAL_DMA_Start_IT>
 8002702:	1e03      	subs	r3, r0, #0
 8002704:	d00b      	beq.n	800271e <HAL_SPI_TransmitReceive_DMA+0x142>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	2210      	movs	r2, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2250      	movs	r2, #80	@ 0x50
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e057      	b.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273a:	2200      	movs	r2, #0
 800273c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002742:	2200      	movs	r2, #0
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274a:	2200      	movs	r2, #0
 800274c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	0019      	movs	r1, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	330c      	adds	r3, #12
 800275e:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002764:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002766:	f7fe fba3 	bl	8000eb0 <HAL_DMA_Start_IT>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d00b      	beq.n	8002786 <HAL_SPI_TransmitReceive_DMA+0x1aa>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002772:	2210      	movs	r2, #16
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2250      	movs	r2, #80	@ 0x50
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e023      	b.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x1f2>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2240      	movs	r2, #64	@ 0x40
 800278e:	4013      	ands	r3, r2
 8002790:	2b40      	cmp	r3, #64	@ 0x40
 8002792:	d007      	beq.n	80027a4 <HAL_SPI_TransmitReceive_DMA+0x1c8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2140      	movs	r1, #64	@ 0x40
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2250      	movs	r2, #80	@ 0x50
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2120      	movs	r1, #32
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2102      	movs	r1, #2
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b006      	add	sp, #24
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	08002c45 	.word	0x08002c45
 80027dc:	08002ae5 	.word	0x08002ae5
 80027e0:	08002c63 	.word	0x08002c63
 80027e4:	08002b93 	.word	0x08002b93
 80027e8:	08002c81 	.word	0x08002c81

080027ec <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	099b      	lsrs	r3, r3, #6
 8002808:	001a      	movs	r2, r3
 800280a:	2301      	movs	r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d10f      	bne.n	8002830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002816:	d00b      	beq.n	8002830 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	001a      	movs	r2, r3
 800281e:	2301      	movs	r3, #1
 8002820:	4013      	ands	r3, r2
 8002822:	d005      	beq.n	8002830 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	0010      	movs	r0, r2
 800282c:	4798      	blx	r3
    return;
 800282e:	e0d5      	b.n	80029dc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	001a      	movs	r2, r3
 8002836:	2301      	movs	r3, #1
 8002838:	4013      	ands	r3, r2
 800283a:	d00b      	beq.n	8002854 <HAL_SPI_IRQHandler+0x68>
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	09db      	lsrs	r3, r3, #7
 8002840:	001a      	movs	r2, r3
 8002842:	2301      	movs	r3, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d005      	beq.n	8002854 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	0010      	movs	r0, r2
 8002850:	4798      	blx	r3
    return;
 8002852:	e0c3      	b.n	80029dc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	001a      	movs	r2, r3
 800285a:	2301      	movs	r3, #1
 800285c:	4013      	ands	r3, r2
 800285e:	d10c      	bne.n	800287a <HAL_SPI_IRQHandler+0x8e>
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	001a      	movs	r2, r3
 8002866:	2301      	movs	r3, #1
 8002868:	4013      	ands	r3, r2
 800286a:	d106      	bne.n	800287a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	0a1b      	lsrs	r3, r3, #8
 8002870:	001a      	movs	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	4013      	ands	r3, r2
 8002876:	d100      	bne.n	800287a <HAL_SPI_IRQHandler+0x8e>
 8002878:	e0b0      	b.n	80029dc <HAL_SPI_IRQHandler+0x1f0>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	095b      	lsrs	r3, r3, #5
 800287e:	001a      	movs	r2, r3
 8002880:	2301      	movs	r3, #1
 8002882:	4013      	ands	r3, r2
 8002884:	d100      	bne.n	8002888 <HAL_SPI_IRQHandler+0x9c>
 8002886:	e0a9      	b.n	80029dc <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	001a      	movs	r2, r3
 800288e:	2301      	movs	r3, #1
 8002890:	4013      	ands	r3, r2
 8002892:	d023      	beq.n	80028dc <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2251      	movs	r2, #81	@ 0x51
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b03      	cmp	r3, #3
 800289e:	d011      	beq.n	80028c4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a4:	2204      	movs	r2, #4
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	e00b      	b.n	80028dc <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
        return;
 80028da:	e07f      	b.n	80029dc <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	001a      	movs	r2, r3
 80028e2:	2301      	movs	r3, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d014      	beq.n	8002912 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	2201      	movs	r2, #1
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	438a      	bics	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	001a      	movs	r2, r3
 8002918:	2301      	movs	r3, #1
 800291a:	4013      	ands	r3, r2
 800291c:	d00c      	beq.n	8002938 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002922:	2208      	movs	r2, #8
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293c:	2b00      	cmp	r3, #0
 800293e:	d04c      	beq.n	80029da <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	21e0      	movs	r1, #224	@ 0xe0
 800294c:	438a      	bics	r2, r1
 800294e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2251      	movs	r2, #81	@ 0x51
 8002954:	2101      	movs	r1, #1
 8002956:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2202      	movs	r2, #2
 800295c:	4013      	ands	r3, r2
 800295e:	d103      	bne.n	8002968 <HAL_SPI_IRQHandler+0x17c>
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d032      	beq.n	80029ce <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2103      	movs	r1, #3
 8002974:	438a      	bics	r2, r1
 8002976:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d010      	beq.n	80029a2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	4a17      	ldr	r2, [pc, #92]	@ (80029e4 <HAL_SPI_IRQHandler+0x1f8>)
 8002986:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298c:	0018      	movs	r0, r3
 800298e:	f7fe faf5 	bl	8000f7c <HAL_DMA_Abort_IT>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d005      	beq.n	80029a2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299a:	2240      	movs	r2, #64	@ 0x40
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ae:	4a0d      	ldr	r2, [pc, #52]	@ (80029e4 <HAL_SPI_IRQHandler+0x1f8>)
 80029b0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7fe fae0 	bl	8000f7c <HAL_DMA_Abort_IT>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80029cc:	e004      	b.n	80029d8 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 f829 	bl	8002a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029d6:	e000      	b.n	80029da <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80029d8:	46c0      	nop			@ (mov r8, r8)
    return;
 80029da:	46c0      	nop			@ (mov r8, r8)
  }
}
 80029dc:	46bd      	mov	sp, r7
 80029de:	b008      	add	sp, #32
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	08002cc3 	.word	0x08002cc3

080029e8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a00:	46c0      	nop			@ (mov r8, r8)
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b002      	add	sp, #8
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a46:	f7fe f8d3 	bl	8000bf0 <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2220      	movs	r2, #32
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d03c      	beq.n	8002ad6 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2120      	movs	r1, #32
 8002a68:	438a      	bics	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2102      	movs	r1, #2
 8002a78:	438a      	bics	r2, r1
 8002a7a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2164      	movs	r1, #100	@ 0x64
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fa2a 	bl	8002edc <SPI_EndRxTxTransaction>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d005      	beq.n	8002a98 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a90:	2220      	movs	r2, #32
 8002a92:	431a      	orrs	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2251      	movs	r2, #81	@ 0x51
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ffaa 	bl	8002a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ad4:	e003      	b.n	8002ade <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7fd fe5b 	bl	8000794 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b006      	add	sp, #24
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002af2:	f7fe f87d 	bl	8000bf0 <HAL_GetTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2220      	movs	r2, #32
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d03d      	beq.n	8002b84 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2120      	movs	r1, #32
 8002b14:	438a      	bics	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10e      	bne.n	8002b3e <SPI_DMAReceiveCplt+0x5a>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	2382      	movs	r3, #130	@ 0x82
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d108      	bne.n	8002b3e <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2103      	movs	r1, #3
 8002b38:	438a      	bics	r2, r1
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	e007      	b.n	8002b4e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	438a      	bics	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2164      	movs	r1, #100	@ 0x64
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 f957 	bl	8002e08 <SPI_EndRxTransaction>
 8002b5a:	1e03      	subs	r3, r0, #0
 8002b5c:	d002      	beq.n	8002b64 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2251      	movs	r2, #81	@ 0x51
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff ff53 	bl	8002a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002b82:	e003      	b.n	8002b8c <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	0018      	movs	r0, r3
 8002b88:	f7fd fe18 	bl	80007bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b004      	add	sp, #16
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ba0:	f7fe f826 	bl	8000bf0 <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d030      	beq.n	8002c18 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2164      	movs	r1, #100	@ 0x64
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 f985 	bl	8002edc <SPI_EndRxTxTransaction>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d005      	beq.n	8002be2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bda:	2220      	movs	r2, #32
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2103      	movs	r1, #3
 8002bee:	438a      	bics	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2251      	movs	r2, #81	@ 0x51
 8002c02:	2101      	movs	r1, #1
 8002c04:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff09 	bl	8002a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002c16:	e003      	b.n	8002c20 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7ff fee4 	bl	80029e8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b004      	add	sp, #16
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff fede 	bl	80029f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c3c:	46c0      	nop			@ (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff fed7 	bl	8002a08 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fed0 	bl	8002a18 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c78:	46c0      	nop			@ (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2103      	movs	r1, #3
 8002c9a:	438a      	bics	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2251      	movs	r2, #81	@ 0x51
 8002cae:	2101      	movs	r1, #1
 8002cb0:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff feb7 	bl	8002a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cce:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7ff fea2 	bl	8002a28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b004      	add	sp, #16
 8002cea:	bd80      	pop	{r7, pc}

08002cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cfc:	f7fd ff78 	bl	8000bf0 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	18d3      	adds	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d0c:	f7fd ff70 	bl	8000bf0 <HAL_GetTick>
 8002d10:	0003      	movs	r3, r0
 8002d12:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d14:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	015b      	lsls	r3, r3, #5
 8002d1a:	0d1b      	lsrs	r3, r3, #20
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	4353      	muls	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d22:	e059      	b.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	d056      	beq.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d2a:	f7fd ff61 	bl	8000bf0 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d902      	bls.n	8002d40 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d142      	bne.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	21e0      	movs	r1, #224	@ 0xe0
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	2382      	movs	r3, #130	@ 0x82
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d113      	bne.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	021b      	lsls	r3, r3, #8
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d005      	beq.n	8002d74 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d107      	bne.n	8002d84 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2140      	movs	r1, #64	@ 0x40
 8002d80:	438a      	bics	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d88:	2380      	movs	r3, #128	@ 0x80
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d110      	bne.n	8002db2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	491a      	ldr	r1, [pc, #104]	@ (8002e04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2180      	movs	r1, #128	@ 0x80
 8002dac:	0189      	lsls	r1, r1, #6
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2251      	movs	r2, #81	@ 0x51
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2250      	movs	r2, #80	@ 0x50
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e018      	b.n	8002df8 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e002      	b.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	425a      	negs	r2, r3
 8002de8:	4153      	adcs	r3, r2
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	001a      	movs	r2, r3
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d196      	bne.n	8002d24 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b008      	add	sp, #32
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000020 	.word	0x20000020
 8002e04:	ffffdfff 	.word	0xffffdfff

08002e08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	2382      	movs	r3, #130	@ 0x82
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d113      	bne.n	8002e48 <SPI_EndRxTransaction+0x40>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	021b      	lsls	r3, r3, #8
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d005      	beq.n	8002e38 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2140      	movs	r1, #64	@ 0x40
 8002e44:	438a      	bics	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	2382      	movs	r3, #130	@ 0x82
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d12b      	bne.n	8002eac <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d012      	beq.n	8002e86 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	0013      	movs	r3, r2
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2180      	movs	r1, #128	@ 0x80
 8002e6e:	f7ff ff3d 	bl	8002cec <SPI_WaitFlagStateUntilTimeout>
 8002e72:	1e03      	subs	r3, r0, #0
 8002e74:	d02d      	beq.n	8002ed2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e026      	b.n	8002ed4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	0013      	movs	r3, r2
 8002e90:	2200      	movs	r2, #0
 8002e92:	2101      	movs	r1, #1
 8002e94:	f7ff ff2a 	bl	8002cec <SPI_WaitFlagStateUntilTimeout>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d01a      	beq.n	8002ed2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e013      	b.n	8002ed4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2101      	movs	r1, #1
 8002eba:	f7ff ff17 	bl	8002cec <SPI_WaitFlagStateUntilTimeout>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d007      	beq.n	8002ed2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e000      	b.n	8002ed4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b004      	add	sp, #16
 8002eda:	bd80      	pop	{r7, pc}

08002edc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	0013      	movs	r3, r2
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	f7ff fef9 	bl	8002cec <SPI_WaitFlagStateUntilTimeout>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d007      	beq.n	8002f0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f02:	2220      	movs	r2, #32
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e037      	b.n	8002f7e <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f88 <SPI_EndRxTxTransaction+0xac>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	491e      	ldr	r1, [pc, #120]	@ (8002f8c <SPI_EndRxTxTransaction+0xb0>)
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fd f8f7 	bl	8000108 <__udivsi3>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	0013      	movs	r3, r2
 8002f20:	015b      	lsls	r3, r3, #5
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	189b      	adds	r3, r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	2382      	movs	r3, #130	@ 0x82
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d112      	bne.n	8002f5e <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	0013      	movs	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	2180      	movs	r1, #128	@ 0x80
 8002f46:	f7ff fed1 	bl	8002cec <SPI_WaitFlagStateUntilTimeout>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d016      	beq.n	8002f7c <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f52:	2220      	movs	r2, #32
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e00f      	b.n	8002f7e <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b80      	cmp	r3, #128	@ 0x80
 8002f76:	d0f2      	beq.n	8002f5e <SPI_EndRxTxTransaction+0x82>
 8002f78:	e000      	b.n	8002f7c <SPI_EndRxTxTransaction+0xa0>
        break;
 8002f7a:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b006      	add	sp, #24
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	20000020 	.word	0x20000020
 8002f8c:	016e3600 	.word	0x016e3600

08002f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e032      	b.n	8003008 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2239      	movs	r2, #57	@ 0x39
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d107      	bne.n	8002fbe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2238      	movs	r2, #56	@ 0x38
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f7fd fcff 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2239      	movs	r2, #57	@ 0x39
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	0019      	movs	r1, r3
 8002fd0:	0010      	movs	r0, r2
 8002fd2:	f000 fa29 	bl	8003428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	223e      	movs	r2, #62	@ 0x3e
 8002fda:	2101      	movs	r1, #1
 8002fdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	223a      	movs	r2, #58	@ 0x3a
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	5499      	strb	r1, [r3, r2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	223b      	movs	r2, #59	@ 0x3b
 8002fea:	2101      	movs	r1, #1
 8002fec:	5499      	strb	r1, [r3, r2]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	223c      	movs	r2, #60	@ 0x3c
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	5499      	strb	r1, [r3, r2]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223d      	movs	r2, #61	@ 0x3d
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2239      	movs	r2, #57	@ 0x39
 8003002:	2101      	movs	r1, #1
 8003004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b002      	add	sp, #8
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2239      	movs	r2, #57	@ 0x39
 800301c:	5c9b      	ldrb	r3, [r3, r2]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d001      	beq.n	8003028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e036      	b.n	8003096 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2239      	movs	r2, #57	@ 0x39
 800302c:	2102      	movs	r1, #2
 800302e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2101      	movs	r1, #1
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	429a      	cmp	r2, r3
 800304a:	d009      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x50>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a13      	ldr	r2, [pc, #76]	@ (80030a0 <HAL_TIM_Base_Start_IT+0x90>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x50>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <HAL_TIM_Base_Start_IT+0x94>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d111      	bne.n	8003084 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2207      	movs	r2, #7
 8003068:	4013      	ands	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b06      	cmp	r3, #6
 8003070:	d010      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	e007      	b.n	8003094 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	0018      	movs	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40011400 	.word	0x40011400

080030a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2202      	movs	r2, #2
 80030c4:	4013      	ands	r3, r2
 80030c6:	d021      	beq.n	800310c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2202      	movs	r2, #2
 80030cc:	4013      	ands	r3, r2
 80030ce:	d01d      	beq.n	800310c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2203      	movs	r2, #3
 80030d6:	4252      	negs	r2, r2
 80030d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 f982 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e007      	b.n	8003106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 f975 	bl	80033e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	0018      	movs	r0, r3
 8003102:	f000 f981 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2204      	movs	r2, #4
 8003110:	4013      	ands	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2204      	movs	r2, #4
 8003118:	4013      	ands	r3, r2
 800311a:	d01e      	beq.n	800315a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2205      	movs	r2, #5
 8003122:	4252      	negs	r2, r2
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2202      	movs	r2, #2
 800312a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	23c0      	movs	r3, #192	@ 0xc0
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4013      	ands	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 f95b 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 8003142:	e007      	b.n	8003154 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 f94e 	bl	80033e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f95a 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2208      	movs	r2, #8
 800315e:	4013      	ands	r3, r2
 8003160:	d021      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2208      	movs	r2, #8
 8003166:	4013      	ands	r3, r2
 8003168:	d01d      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2209      	movs	r2, #9
 8003170:	4252      	negs	r2, r2
 8003172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2204      	movs	r2, #4
 8003178:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2203      	movs	r2, #3
 8003182:	4013      	ands	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 f935 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 800318e:	e007      	b.n	80031a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f928 	bl	80033e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 f934 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2210      	movs	r2, #16
 80031aa:	4013      	ands	r3, r2
 80031ac:	d022      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2210      	movs	r2, #16
 80031b2:	4013      	ands	r3, r2
 80031b4:	d01e      	beq.n	80031f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2211      	movs	r2, #17
 80031bc:	4252      	negs	r2, r2
 80031be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2208      	movs	r2, #8
 80031c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	23c0      	movs	r3, #192	@ 0xc0
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4013      	ands	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f90e 	bl	80033f8 <HAL_TIM_IC_CaptureCallback>
 80031dc:	e007      	b.n	80031ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 f901 	bl	80033e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 f90d 	bl	8003408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2201      	movs	r2, #1
 80031f8:	4013      	ands	r3, r2
 80031fa:	d00c      	beq.n	8003216 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d008      	beq.n	8003216 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2202      	movs	r2, #2
 800320a:	4252      	negs	r2, r2
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd fae7 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	4013      	ands	r3, r2
 800321c:	d00c      	beq.n	8003238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2240      	movs	r2, #64	@ 0x40
 8003222:	4013      	ands	r3, r2
 8003224:	d008      	beq.n	8003238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2241      	movs	r2, #65	@ 0x41
 800322c:	4252      	negs	r2, r2
 800322e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0018      	movs	r0, r3
 8003234:	f000 f8f0 	bl	8003418 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b004      	add	sp, #16
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	230f      	movs	r3, #15
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2238      	movs	r2, #56	@ 0x38
 8003256:	5c9b      	ldrb	r3, [r3, r2]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIM_ConfigClockSource+0x20>
 800325c:	2302      	movs	r3, #2
 800325e:	e0bc      	b.n	80033da <HAL_TIM_ConfigClockSource+0x19a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2238      	movs	r2, #56	@ 0x38
 8003264:	2101      	movs	r1, #1
 8003266:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2239      	movs	r2, #57	@ 0x39
 800326c:	2102      	movs	r1, #2
 800326e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2277      	movs	r2, #119	@ 0x77
 800327c:	4393      	bics	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a58      	ldr	r2, [pc, #352]	@ (80033e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003284:	4013      	ands	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2280      	movs	r2, #128	@ 0x80
 8003296:	0192      	lsls	r2, r2, #6
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_TIM_ConfigClockSource+0xde>
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	0192      	lsls	r2, r2, #6
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d900      	bls.n	80032a6 <HAL_TIM_ConfigClockSource+0x66>
 80032a4:	e088      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032a6:	2280      	movs	r2, #128	@ 0x80
 80032a8:	0152      	lsls	r2, r2, #5
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d100      	bne.n	80032b0 <HAL_TIM_ConfigClockSource+0x70>
 80032ae:	e088      	b.n	80033c2 <HAL_TIM_ConfigClockSource+0x182>
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	0152      	lsls	r2, r2, #5
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d900      	bls.n	80032ba <HAL_TIM_ConfigClockSource+0x7a>
 80032b8:	e07e      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032ba:	2b70      	cmp	r3, #112	@ 0x70
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0xb0>
 80032be:	d900      	bls.n	80032c2 <HAL_TIM_ConfigClockSource+0x82>
 80032c0:	e07a      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032c2:	2b60      	cmp	r3, #96	@ 0x60
 80032c4:	d04f      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x126>
 80032c6:	d900      	bls.n	80032ca <HAL_TIM_ConfigClockSource+0x8a>
 80032c8:	e076      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032ca:	2b50      	cmp	r3, #80	@ 0x50
 80032cc:	d03b      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0x106>
 80032ce:	d900      	bls.n	80032d2 <HAL_TIM_ConfigClockSource+0x92>
 80032d0:	e072      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	d057      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x146>
 80032d6:	d900      	bls.n	80032da <HAL_TIM_ConfigClockSource+0x9a>
 80032d8:	e06e      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032da:	2b30      	cmp	r3, #48	@ 0x30
 80032dc:	d063      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032de:	d86b      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d060      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032e4:	d868      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d05d      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d05b      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x166>
 80032ee:	e063      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003300:	f000 f966 	bl	80035d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2277      	movs	r2, #119	@ 0x77
 8003310:	4313      	orrs	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]
      break;
 800331c:	e052      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	f000 f94f 	bl	80035d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2180      	movs	r1, #128	@ 0x80
 800333e:	01c9      	lsls	r1, r1, #7
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
      break;
 8003344:	e03e      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003352:	001a      	movs	r2, r3
 8003354:	f000 f8c2 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2150      	movs	r1, #80	@ 0x50
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f91c 	bl	800359c <TIM_ITRx_SetConfig>
      break;
 8003364:	e02e      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003372:	001a      	movs	r2, r3
 8003374:	f000 f8e0 	bl	8003538 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2160      	movs	r1, #96	@ 0x60
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f90c 	bl	800359c <TIM_ITRx_SetConfig>
      break;
 8003384:	e01e      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	001a      	movs	r2, r3
 8003394:	f000 f8a2 	bl	80034dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2140      	movs	r1, #64	@ 0x40
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 f8fc 	bl	800359c <TIM_ITRx_SetConfig>
      break;
 80033a4:	e00e      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f000 f8f3 	bl	800359c <TIM_ITRx_SetConfig>
      break;
 80033b6:	e005      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
      break;
 80033c0:	e000      	b.n	80033c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80033c2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2239      	movs	r2, #57	@ 0x39
 80033c8:	2101      	movs	r1, #1
 80033ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2238      	movs	r2, #56	@ 0x38
 80033d0:	2100      	movs	r1, #0
 80033d2:	5499      	strb	r1, [r3, r2]

  return status;
 80033d4:	230f      	movs	r3, #15
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	781b      	ldrb	r3, [r3, #0]
}
 80033da:	0018      	movs	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	b004      	add	sp, #16
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	ffff00ff 	.word	0xffff00ff

080033e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003400:	46c0      	nop			@ (mov r8, r8)
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003410:	46c0      	nop			@ (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003420:	46c0      	nop			@ (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	05db      	lsls	r3, r3, #23
 800343e:	429a      	cmp	r2, r3
 8003440:	d007      	beq.n	8003452 <TIM_Base_SetConfig+0x2a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a22      	ldr	r2, [pc, #136]	@ (80034d0 <TIM_Base_SetConfig+0xa8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_Base_SetConfig+0x2a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <TIM_Base_SetConfig+0xac>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2270      	movs	r2, #112	@ 0x70
 8003456:	4393      	bics	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	05db      	lsls	r3, r3, #23
 800346a:	429a      	cmp	r2, r3
 800346c:	d007      	beq.n	800347e <TIM_Base_SetConfig+0x56>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <TIM_Base_SetConfig+0xa8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d003      	beq.n	800347e <TIM_Base_SetConfig+0x56>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <TIM_Base_SetConfig+0xac>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d108      	bne.n	8003490 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <TIM_Base_SetConfig+0xb0>)
 8003482:	4013      	ands	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	4393      	bics	r3, r2
 8003496:	001a      	movs	r2, r3
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2204      	movs	r2, #4
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]
}
 80034c8:	46c0      	nop			@ (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b004      	add	sp, #16
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40010800 	.word	0x40010800
 80034d4:	40011400 	.word	0x40011400
 80034d8:	fffffcff 	.word	0xfffffcff

080034dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4393      	bics	r3, r2
 80034f6:	001a      	movs	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	22f0      	movs	r2, #240	@ 0xf0
 8003506:	4393      	bics	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	220a      	movs	r2, #10
 8003518:	4393      	bics	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b006      	add	sp, #24
 8003536:	bd80      	pop	{r7, pc}

08003538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	2210      	movs	r2, #16
 8003550:	4393      	bics	r3, r2
 8003552:	001a      	movs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <TIM_TI2_ConfigInputStage+0x60>)
 8003562:	4013      	ands	r3, r2
 8003564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	22a0      	movs	r2, #160	@ 0xa0
 8003574:	4393      	bics	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b006      	add	sp, #24
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	ffff0fff 	.word	0xffff0fff

0800359c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2270      	movs	r2, #112	@ 0x70
 80035b0:	4393      	bics	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	2207      	movs	r2, #7
 80035bc:	4313      	orrs	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	4a09      	ldr	r2, [pc, #36]	@ (800360c <TIM_ETR_SetConfig+0x3c>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	021a      	lsls	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b006      	add	sp, #24
 800360a:	bd80      	pop	{r7, pc}
 800360c:	ffff00ff 	.word	0xffff00ff

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2238      	movs	r2, #56	@ 0x38
 800361e:	5c9b      	ldrb	r3, [r3, r2]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e042      	b.n	80036ae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2238      	movs	r2, #56	@ 0x38
 800362c:	2101      	movs	r1, #1
 800362e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2239      	movs	r2, #57	@ 0x39
 8003634:	2102      	movs	r1, #2
 8003636:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2270      	movs	r2, #112	@ 0x70
 800364c:	4393      	bics	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	@ 0x80
 8003668:	05db      	lsls	r3, r3, #23
 800366a:	429a      	cmp	r2, r3
 800366c:	d009      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a11      	ldr	r2, [pc, #68]	@ (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0f      	ldr	r2, [pc, #60]	@ (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10c      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2280      	movs	r2, #128	@ 0x80
 8003686:	4393      	bics	r3, r2
 8003688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4313      	orrs	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2239      	movs	r2, #57	@ 0x39
 80036a0:	2101      	movs	r1, #1
 80036a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2238      	movs	r2, #56	@ 0x38
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	40010800 	.word	0x40010800
 80036bc:	40011400 	.word	0x40011400

080036c0 <lis3mdl_process>:
  * once the `spi_cplt_flag` is set by the ISR.
  * @retval LIS3MDL_PROCESS_OK If a processing step was successfully initiated (e.g., a DMA transfer started)
  * or successfully completed, and the state machine can progress.
  */

LIS3MDL_Process_Status_t lis3mdl_process(LIS3MDL_Device *devices, uint8_t num_of_devices, volatile uint8_t *spi_cplt_flag){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	230b      	movs	r3, #11
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	1c0a      	adds	r2, r1, #0
 80036d0:	701a      	strb	r2, [r3, #0]
	if(devices == NULL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <lis3mdl_process+0x1c>
		return LIS3MDL_PROCESS_ERROR;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1dc      	b.n	8003a96 <lis3mdl_process+0x3d6>

	static int dev_index = 0;
	if(dev_index == 0){
 80036dc:	4bd9      	ldr	r3, [pc, #868]	@ (8003a44 <lis3mdl_process+0x384>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <lis3mdl_process+0x3a>
		dev_index = get_first_non_idling_device_index(devices, num_of_devices);
 80036e4:	230b      	movs	r3, #11
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fac4 	bl	8003c7c <get_first_non_idling_device_index>
 80036f4:	0002      	movs	r2, r0
 80036f6:	4bd3      	ldr	r3, [pc, #844]	@ (8003a44 <lis3mdl_process+0x384>)
 80036f8:	601a      	str	r2, [r3, #0]
	}

	if(dev_index < 0){
 80036fa:	4bd2      	ldr	r3, [pc, #840]	@ (8003a44 <lis3mdl_process+0x384>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da04      	bge.n	800370c <lis3mdl_process+0x4c>
		dev_index = 0;
 8003702:	4bd0      	ldr	r3, [pc, #832]	@ (8003a44 <lis3mdl_process+0x384>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
		return LIS3MDL_PROCESS_ALL_DEVICES_IDLING;
 8003708:	2301      	movs	r3, #1
 800370a:	e1c4      	b.n	8003a96 <lis3mdl_process+0x3d6>
	}

	static uint8_t spi_transaction_started = 0;

	if(spi_transaction_started){
 800370c:	4bce      	ldr	r3, [pc, #824]	@ (8003a48 <lis3mdl_process+0x388>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d047      	beq.n	80037a4 <lis3mdl_process+0xe4>
		if(!*spi_cplt_flag)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <lis3mdl_process+0x62>
			return LIS3MDL_PROCESS_WAITING_FOR_SPI_CPLT;
 800371e:	2302      	movs	r3, #2
 8003720:	e1b9      	b.n	8003a96 <lis3mdl_process+0x3d6>
		*spi_cplt_flag = 0;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]

		if(lis3mdl_change_state_due_to_spi_cplt(&devices[dev_index].process_state) == LIS3MDL_STATE_CHANGE_INVALID_CHANGE)
 8003728:	4bc6      	ldr	r3, [pc, #792]	@ (8003a44 <lis3mdl_process+0x384>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	001a      	movs	r2, r3
 800372e:	232c      	movs	r3, #44	@ 0x2c
 8003730:	4353      	muls	r3, r2
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	18d3      	adds	r3, r2, r3
 8003736:	330f      	adds	r3, #15
 8003738:	0018      	movs	r0, r3
 800373a:	f000 fe29 	bl	8004390 <lis3mdl_change_state_due_to_spi_cplt>
 800373e:	0003      	movs	r3, r0
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <lis3mdl_process+0x88>
			return LIS3MDL_PROCESS_ERROR;
 8003744:	2303      	movs	r3, #3
 8003746:	e1a6      	b.n	8003a96 <lis3mdl_process+0x3d6>

		if(devices[dev_index].process_state != LIS3MDL_WRITING_DATA && devices[dev_index].process_state != LIS3MDL_READING_DATA){
 8003748:	4bbe      	ldr	r3, [pc, #760]	@ (8003a44 <lis3mdl_process+0x384>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	001a      	movs	r2, r3
 800374e:	232c      	movs	r3, #44	@ 0x2c
 8003750:	4353      	muls	r3, r2
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	7bdb      	ldrb	r3, [r3, #15]
 8003758:	2b08      	cmp	r3, #8
 800375a:	d01b      	beq.n	8003794 <lis3mdl_process+0xd4>
 800375c:	4bb9      	ldr	r3, [pc, #740]	@ (8003a44 <lis3mdl_process+0x384>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	001a      	movs	r2, r3
 8003762:	232c      	movs	r3, #44	@ 0x2c
 8003764:	4353      	muls	r3, r2
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	7bdb      	ldrb	r3, [r3, #15]
 800376c:	2b07      	cmp	r3, #7
 800376e:	d011      	beq.n	8003794 <lis3mdl_process+0xd4>
			devices[dev_index].cs_gpio_port_handle->BSRR = devices[dev_index].cs_pin; // Pulling CS High
 8003770:	4bb4      	ldr	r3, [pc, #720]	@ (8003a44 <lis3mdl_process+0x384>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	001a      	movs	r2, r3
 8003776:	232c      	movs	r3, #44	@ 0x2c
 8003778:	4353      	muls	r3, r2
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	18d3      	adds	r3, r2, r3
 800377e:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
 8003780:	4bb0      	ldr	r3, [pc, #704]	@ (8003a44 <lis3mdl_process+0x384>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	001a      	movs	r2, r3
 8003786:	232c      	movs	r3, #44	@ 0x2c
 8003788:	4353      	muls	r3, r2
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	18d3      	adds	r3, r2, r3
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	000a      	movs	r2, r1
 8003792:	619a      	str	r2, [r3, #24]
		}

		spi_transaction_started = 0;
 8003794:	4bac      	ldr	r3, [pc, #688]	@ (8003a48 <lis3mdl_process+0x388>)
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
		dev_index = 0;
 800379a:	4baa      	ldr	r3, [pc, #680]	@ (8003a44 <lis3mdl_process+0x384>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
		return LIS3MDL_PROCESS_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e178      	b.n	8003a96 <lis3mdl_process+0x3d6>
	}

	// If spi_transaction was not started
	devices[dev_index].cs_gpio_port_handle->BSRR = (devices[dev_index].cs_pin) << 16; // Pulling CS Low
 80037a4:	4ba7      	ldr	r3, [pc, #668]	@ (8003a44 <lis3mdl_process+0x384>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	001a      	movs	r2, r3
 80037aa:	232c      	movs	r3, #44	@ 0x2c
 80037ac:	4353      	muls	r3, r2
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80037b4:	0019      	movs	r1, r3
 80037b6:	4ba3      	ldr	r3, [pc, #652]	@ (8003a44 <lis3mdl_process+0x384>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	001a      	movs	r2, r3
 80037bc:	232c      	movs	r3, #44	@ 0x2c
 80037be:	4353      	muls	r3, r2
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	18d3      	adds	r3, r2, r3
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	040a      	lsls	r2, r1, #16
 80037c8:	619a      	str	r2, [r3, #24]
	spi_transaction_started = 1;
 80037ca:	4b9f      	ldr	r3, [pc, #636]	@ (8003a48 <lis3mdl_process+0x388>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
	switch(devices[dev_index].process_state){
 80037d0:	4b9c      	ldr	r3, [pc, #624]	@ (8003a44 <lis3mdl_process+0x384>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	001a      	movs	r2, r3
 80037d6:	232c      	movs	r3, #44	@ 0x2c
 80037d8:	4353      	muls	r3, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	18d3      	adds	r3, r2, r3
 80037de:	7bdb      	ldrb	r3, [r3, #15]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d900      	bls.n	80037e6 <lis3mdl_process+0x126>
 80037e4:	e156      	b.n	8003a94 <lis3mdl_process+0x3d4>
 80037e6:	009a      	lsls	r2, r3, #2
 80037e8:	4b98      	ldr	r3, [pc, #608]	@ (8003a4c <lis3mdl_process+0x38c>)
 80037ea:	18d3      	adds	r3, r2, r3
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	469f      	mov	pc, r3
	case LIS3MDL_RESETTING_REGISTERS:
		devices[dev_index].tx[0] = LIS3MDL_CTRL_REG2_ADDR;
 80037f0:	4b94      	ldr	r3, [pc, #592]	@ (8003a44 <lis3mdl_process+0x384>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	001a      	movs	r2, r3
 80037f6:	232c      	movs	r3, #44	@ 0x2c
 80037f8:	4353      	muls	r3, r2
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	18d3      	adds	r3, r2, r3
 80037fe:	2221      	movs	r2, #33	@ 0x21
 8003800:	749a      	strb	r2, [r3, #18]
		devices[dev_index].tx[1] = LIS3MDL_REBOOT;
 8003802:	4b90      	ldr	r3, [pc, #576]	@ (8003a44 <lis3mdl_process+0x384>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	001a      	movs	r2, r3
 8003808:	232c      	movs	r3, #44	@ 0x2c
 800380a:	4353      	muls	r3, r2
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	2208      	movs	r2, #8
 8003812:	74da      	strb	r2, [r3, #19]
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi, devices[dev_index].tx, 2) != HAL_OK)
 8003814:	4b8b      	ldr	r3, [pc, #556]	@ (8003a44 <lis3mdl_process+0x384>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	001a      	movs	r2, r3
 800381a:	232c      	movs	r3, #44	@ 0x2c
 800381c:	4353      	muls	r3, r2
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	18d3      	adds	r3, r2, r3
 8003822:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003824:	4b87      	ldr	r3, [pc, #540]	@ (8003a44 <lis3mdl_process+0x384>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	232c      	movs	r3, #44	@ 0x2c
 800382c:	4353      	muls	r3, r2
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	18d3      	adds	r3, r2, r3
 8003832:	3312      	adds	r3, #18
 8003834:	2202      	movs	r2, #2
 8003836:	0019      	movs	r1, r3
 8003838:	f7fe fd50 	bl	80022dc <HAL_SPI_Transmit_DMA>
 800383c:	1e03      	subs	r3, r0, #0
 800383e:	d001      	beq.n	8003844 <lis3mdl_process+0x184>
			return LIS3MDL_PROCESS_ERROR;
 8003840:	2303      	movs	r3, #3
 8003842:	e128      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e126      	b.n	8003a96 <lis3mdl_process+0x3d6>
	case LIS3MDL_INITIALIZING_OFFSET_REGS:
		devices[dev_index].tx[0] = LIS3MDL_OFFSET_X_REG_L_M_ADDR | LIS3MDL_MD_BIT;
 8003848:	4b7e      	ldr	r3, [pc, #504]	@ (8003a44 <lis3mdl_process+0x384>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	001a      	movs	r2, r3
 800384e:	232c      	movs	r3, #44	@ 0x2c
 8003850:	4353      	muls	r3, r2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	18d3      	adds	r3, r2, r3
 8003856:	2245      	movs	r2, #69	@ 0x45
 8003858:	749a      	strb	r2, [r3, #18]
		memcpy(devices[dev_index].tx + 1, devices[dev_index].config_regs.offsets, 6);
 800385a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a44 <lis3mdl_process+0x384>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	001a      	movs	r2, r3
 8003860:	232c      	movs	r3, #44	@ 0x2c
 8003862:	4353      	muls	r3, r2
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	18d3      	adds	r3, r2, r3
 8003868:	3312      	adds	r3, #18
 800386a:	1c58      	adds	r0, r3, #1
 800386c:	4b75      	ldr	r3, [pc, #468]	@ (8003a44 <lis3mdl_process+0x384>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	001a      	movs	r2, r3
 8003872:	232c      	movs	r3, #44	@ 0x2c
 8003874:	4353      	muls	r3, r2
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	18d3      	adds	r3, r2, r3
 800387a:	2206      	movs	r2, #6
 800387c:	0019      	movs	r1, r3
 800387e:	f000 fde9 	bl	8004454 <memcpy>
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi, devices[dev_index].tx, 7) != HAL_OK)
 8003882:	4b70      	ldr	r3, [pc, #448]	@ (8003a44 <lis3mdl_process+0x384>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	001a      	movs	r2, r3
 8003888:	232c      	movs	r3, #44	@ 0x2c
 800388a:	4353      	muls	r3, r2
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	18d3      	adds	r3, r2, r3
 8003890:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003892:	4b6c      	ldr	r3, [pc, #432]	@ (8003a44 <lis3mdl_process+0x384>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	001a      	movs	r2, r3
 8003898:	232c      	movs	r3, #44	@ 0x2c
 800389a:	4353      	muls	r3, r2
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	3312      	adds	r3, #18
 80038a2:	2207      	movs	r2, #7
 80038a4:	0019      	movs	r1, r3
 80038a6:	f7fe fd19 	bl	80022dc <HAL_SPI_Transmit_DMA>
 80038aa:	1e03      	subs	r3, r0, #0
 80038ac:	d001      	beq.n	80038b2 <lis3mdl_process+0x1f2>
			return LIS3MDL_PROCESS_ERROR;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0f1      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e0ef      	b.n	8003a96 <lis3mdl_process+0x3d6>

	case LIS3MDL_INITIALIZING_CTRL_REGS:
		devices[dev_index].tx[0] = LIS3MDL_CTRL_REG1_ADDR | LIS3MDL_MD_BIT;
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <lis3mdl_process+0x384>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	001a      	movs	r2, r3
 80038bc:	232c      	movs	r3, #44	@ 0x2c
 80038be:	4353      	muls	r3, r2
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	18d3      	adds	r3, r2, r3
 80038c4:	2260      	movs	r2, #96	@ 0x60
 80038c6:	749a      	strb	r2, [r3, #18]
		memcpy(devices[dev_index].tx + 1, devices[dev_index].config_regs.ctrls, 5);
 80038c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <lis3mdl_process+0x384>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	001a      	movs	r2, r3
 80038ce:	232c      	movs	r3, #44	@ 0x2c
 80038d0:	4353      	muls	r3, r2
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	3312      	adds	r3, #18
 80038d8:	1c58      	adds	r0, r3, #1
 80038da:	4b5a      	ldr	r3, [pc, #360]	@ (8003a44 <lis3mdl_process+0x384>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	001a      	movs	r2, r3
 80038e0:	232c      	movs	r3, #44	@ 0x2c
 80038e2:	4353      	muls	r3, r2
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	18d3      	adds	r3, r2, r3
 80038e8:	3306      	adds	r3, #6
 80038ea:	2205      	movs	r2, #5
 80038ec:	0019      	movs	r1, r3
 80038ee:	f000 fdb1 	bl	8004454 <memcpy>
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi, devices[dev_index].tx, 6) != HAL_OK)
 80038f2:	4b54      	ldr	r3, [pc, #336]	@ (8003a44 <lis3mdl_process+0x384>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	001a      	movs	r2, r3
 80038f8:	232c      	movs	r3, #44	@ 0x2c
 80038fa:	4353      	muls	r3, r2
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	18d3      	adds	r3, r2, r3
 8003900:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003902:	4b50      	ldr	r3, [pc, #320]	@ (8003a44 <lis3mdl_process+0x384>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	001a      	movs	r2, r3
 8003908:	232c      	movs	r3, #44	@ 0x2c
 800390a:	4353      	muls	r3, r2
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	18d3      	adds	r3, r2, r3
 8003910:	3312      	adds	r3, #18
 8003912:	2206      	movs	r2, #6
 8003914:	0019      	movs	r1, r3
 8003916:	f7fe fce1 	bl	80022dc <HAL_SPI_Transmit_DMA>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d001      	beq.n	8003922 <lis3mdl_process+0x262>
			return LIS3MDL_PROCESS_ERROR;
 800391e:	2303      	movs	r3, #3
 8003920:	e0b9      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e0b7      	b.n	8003a96 <lis3mdl_process+0x3d6>

	case LIS3MDL_INITIALIZING_INT_REGS:
		devices[dev_index].tx[0] = LIS3MDL_INT_CFG_REG_ADDR| LIS3MDL_MD_BIT;
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <lis3mdl_process+0x384>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	001a      	movs	r2, r3
 800392c:	232c      	movs	r3, #44	@ 0x2c
 800392e:	4353      	muls	r3, r2
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	18d3      	adds	r3, r2, r3
 8003934:	2270      	movs	r2, #112	@ 0x70
 8003936:	749a      	strb	r2, [r3, #18]
		memcpy(devices[dev_index].tx + 1, devices[dev_index].config_regs.ints, 4);
 8003938:	4b42      	ldr	r3, [pc, #264]	@ (8003a44 <lis3mdl_process+0x384>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	001a      	movs	r2, r3
 800393e:	232c      	movs	r3, #44	@ 0x2c
 8003940:	4353      	muls	r3, r2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	18d3      	adds	r3, r2, r3
 8003946:	3312      	adds	r3, #18
 8003948:	1c58      	adds	r0, r3, #1
 800394a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a44 <lis3mdl_process+0x384>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	001a      	movs	r2, r3
 8003950:	232c      	movs	r3, #44	@ 0x2c
 8003952:	4353      	muls	r3, r2
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	18d3      	adds	r3, r2, r3
 8003958:	330b      	adds	r3, #11
 800395a:	2204      	movs	r2, #4
 800395c:	0019      	movs	r1, r3
 800395e:	f000 fd79 	bl	8004454 <memcpy>
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi, devices[dev_index].tx, 5) != HAL_OK)
 8003962:	4b38      	ldr	r3, [pc, #224]	@ (8003a44 <lis3mdl_process+0x384>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	001a      	movs	r2, r3
 8003968:	232c      	movs	r3, #44	@ 0x2c
 800396a:	4353      	muls	r3, r2
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	18d3      	adds	r3, r2, r3
 8003970:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <lis3mdl_process+0x384>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	001a      	movs	r2, r3
 8003978:	232c      	movs	r3, #44	@ 0x2c
 800397a:	4353      	muls	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	18d3      	adds	r3, r2, r3
 8003980:	3312      	adds	r3, #18
 8003982:	2205      	movs	r2, #5
 8003984:	0019      	movs	r1, r3
 8003986:	f7fe fca9 	bl	80022dc <HAL_SPI_Transmit_DMA>
 800398a:	1e03      	subs	r3, r0, #0
 800398c:	d001      	beq.n	8003992 <lis3mdl_process+0x2d2>
			return LIS3MDL_PROCESS_ERROR;
 800398e:	2303      	movs	r3, #3
 8003990:	e081      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e07f      	b.n	8003a96 <lis3mdl_process+0x3d6>

	case LIS3MDL_SENDING_ADDRESS_TO_WRITE_TO:
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,&devices[dev_index].reg_addr, 1) != HAL_OK)
 8003996:	4b2b      	ldr	r3, [pc, #172]	@ (8003a44 <lis3mdl_process+0x384>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	001a      	movs	r2, r3
 800399c:	232c      	movs	r3, #44	@ 0x2c
 800399e:	4353      	muls	r3, r2
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	18d3      	adds	r3, r2, r3
 80039a4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80039a6:	4b27      	ldr	r3, [pc, #156]	@ (8003a44 <lis3mdl_process+0x384>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	001a      	movs	r2, r3
 80039ac:	232c      	movs	r3, #44	@ 0x2c
 80039ae:	4353      	muls	r3, r2
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	18d3      	adds	r3, r2, r3
 80039b4:	3311      	adds	r3, #17
 80039b6:	2201      	movs	r2, #1
 80039b8:	0019      	movs	r1, r3
 80039ba:	f7fe fc8f 	bl	80022dc <HAL_SPI_Transmit_DMA>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d001      	beq.n	80039c6 <lis3mdl_process+0x306>
					return LIS3MDL_PROCESS_ERROR;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e067      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e065      	b.n	8003a96 <lis3mdl_process+0x3d6>

	case LIS3MDL_SENDING_ADDRESS_TO_READ_FROM:
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,&devices[dev_index].reg_addr, 1) != HAL_OK)
 80039ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <lis3mdl_process+0x384>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	001a      	movs	r2, r3
 80039d0:	232c      	movs	r3, #44	@ 0x2c
 80039d2:	4353      	muls	r3, r2
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	18d3      	adds	r3, r2, r3
 80039d8:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80039da:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <lis3mdl_process+0x384>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	001a      	movs	r2, r3
 80039e0:	232c      	movs	r3, #44	@ 0x2c
 80039e2:	4353      	muls	r3, r2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	18d3      	adds	r3, r2, r3
 80039e8:	3311      	adds	r3, #17
 80039ea:	2201      	movs	r2, #1
 80039ec:	0019      	movs	r1, r3
 80039ee:	f7fe fc75 	bl	80022dc <HAL_SPI_Transmit_DMA>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d001      	beq.n	80039fa <lis3mdl_process+0x33a>
			return LIS3MDL_PROCESS_ERROR;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e04d      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e04b      	b.n	8003a96 <lis3mdl_process+0x3d6>

	case LIS3MDL_WRITING_DATA:
		if(HAL_SPI_Transmit_DMA(devices[dev_index].hspi,devices[dev_index].tx, devices[dev_index].data_size) != HAL_OK)
 80039fe:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <lis3mdl_process+0x384>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	001a      	movs	r2, r3
 8003a04:	232c      	movs	r3, #44	@ 0x2c
 8003a06:	4353      	muls	r3, r2
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	18d3      	adds	r3, r2, r3
 8003a0c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <lis3mdl_process+0x384>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	001a      	movs	r2, r3
 8003a14:	232c      	movs	r3, #44	@ 0x2c
 8003a16:	4353      	muls	r3, r2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	3312      	adds	r3, #18
 8003a1e:	0019      	movs	r1, r3
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <lis3mdl_process+0x384>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	001a      	movs	r2, r3
 8003a26:	232c      	movs	r3, #44	@ 0x2c
 8003a28:	4353      	muls	r3, r2
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	18d3      	adds	r3, r2, r3
 8003a2e:	7f9b      	ldrb	r3, [r3, #30]
 8003a30:	001a      	movs	r2, r3
 8003a32:	f7fe fc53 	bl	80022dc <HAL_SPI_Transmit_DMA>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <lis3mdl_process+0x37e>
					return LIS3MDL_PROCESS_ERROR;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e02b      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e029      	b.n	8003a96 <lis3mdl_process+0x3d6>
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	200001d0 	.word	0x200001d0
 8003a48:	200001d4 	.word	0x200001d4
 8003a4c:	0800449c 	.word	0x0800449c

	case LIS3MDL_READING_DATA:
		if(HAL_SPI_Receive_DMA(devices[dev_index].hspi,devices[dev_index].rx, devices[dev_index].data_size) != HAL_OK)
 8003a50:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <lis3mdl_process+0x3e0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	001a      	movs	r2, r3
 8003a56:	232c      	movs	r3, #44	@ 0x2c
 8003a58:	4353      	muls	r3, r2
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003a60:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <lis3mdl_process+0x3e0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	001a      	movs	r2, r3
 8003a66:	232c      	movs	r3, #44	@ 0x2c
 8003a68:	4353      	muls	r3, r2
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	3318      	adds	r3, #24
 8003a70:	0019      	movs	r1, r3
 8003a72:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <lis3mdl_process+0x3e0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	001a      	movs	r2, r3
 8003a78:	232c      	movs	r3, #44	@ 0x2c
 8003a7a:	4353      	muls	r3, r2
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	18d3      	adds	r3, r2, r3
 8003a80:	7f9b      	ldrb	r3, [r3, #30]
 8003a82:	001a      	movs	r2, r3
 8003a84:	f7fe fce0 	bl	8002448 <HAL_SPI_Receive_DMA>
 8003a88:	1e03      	subs	r3, r0, #0
 8003a8a:	d001      	beq.n	8003a90 <lis3mdl_process+0x3d0>
			return LIS3MDL_PROCESS_ERROR;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e002      	b.n	8003a96 <lis3mdl_process+0x3d6>
		return LIS3MDL_PROCESS_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <lis3mdl_process+0x3d6>

	default:
		return LIS3MDL_PROCESS_ERROR;
 8003a94:	2303      	movs	r3, #3
	}

	return LIS3MDL_PROCESS_ERROR;
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	200001d0 	.word	0x200001d0

08003aa4 <lis3mdl_get_magnetic_data>:
  * for the `lis3mdl_process` to complete the underlying SPI transaction).
  * @retval LIS3MDL_DATA_AVAILABLE If magnetic data has been successfully retrieved and
  * parsed into the `results` structure. The process then resets to start a new status check.
  */

LIS3MDL_Data_Retrieval_State_t lis3mdl_get_magnetic_data(LIS3MDL_Device *devices, uint8_t num_of_devices, uint8_t dev_index, LIS3MDL_Magnetic_Data_t *results){
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	0008      	movs	r0, r1
 8003aae:	0011      	movs	r1, r2
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	230b      	movs	r3, #11
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	1c02      	adds	r2, r0, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	230a      	movs	r3, #10
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	1c0a      	adds	r2, r1, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	if(devices == NULL || results == NULL){
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <lis3mdl_get_magnetic_data+0x2a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <lis3mdl_get_magnetic_data+0x2e>
		return LIS3MDL_DATA_RETRIEVAL_ERROR;
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e0d0      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
	}

	switch(devices[dev_index].data_retrieval_state){
 8003ad2:	230a      	movs	r3, #10
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	222c      	movs	r2, #44	@ 0x2c
 8003ada:	4353      	muls	r3, r2
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	18d3      	adds	r3, r2, r3
 8003ae0:	7c1b      	ldrb	r3, [r3, #16]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d100      	bne.n	8003ae8 <lis3mdl_get_magnetic_data+0x44>
 8003ae6:	e06b      	b.n	8003bc0 <lis3mdl_get_magnetic_data+0x11c>
 8003ae8:	dd00      	ble.n	8003aec <lis3mdl_get_magnetic_data+0x48>
 8003aea:	e0c2      	b.n	8003c72 <lis3mdl_get_magnetic_data+0x1ce>
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d04d      	beq.n	8003b8c <lis3mdl_get_magnetic_data+0xe8>
 8003af0:	dd00      	ble.n	8003af4 <lis3mdl_get_magnetic_data+0x50>
 8003af2:	e0be      	b.n	8003c72 <lis3mdl_get_magnetic_data+0x1ce>
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d002      	beq.n	8003afe <lis3mdl_get_magnetic_data+0x5a>
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d01a      	beq.n	8003b32 <lis3mdl_get_magnetic_data+0x8e>
 8003afc:	e0b9      	b.n	8003c72 <lis3mdl_get_magnetic_data+0x1ce>
	case LIS3MDL_STARTING_STATUS_CHECK:
		if(lis3mdl_read_reg(devices, num_of_devices, dev_index, LIS3MDL_STATUS_REG_ADDR, 1) == HAL_OK){
 8003afe:	240a      	movs	r4, #10
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	230b      	movs	r3, #11
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	7819      	ldrb	r1, [r3, #0]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2327      	movs	r3, #39	@ 0x27
 8003b12:	f000 f8db 	bl	8003ccc <lis3mdl_read_reg>
 8003b16:	1e03      	subs	r3, r0, #0
 8003b18:	d109      	bne.n	8003b2e <lis3mdl_get_magnetic_data+0x8a>
			devices[dev_index].data_retrieval_state = LIS3MDL_STATUS_CHECK_IN_PROGRESS;
 8003b1a:	193b      	adds	r3, r7, r4
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	222c      	movs	r2, #44	@ 0x2c
 8003b20:	4353      	muls	r3, r2
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	18d3      	adds	r3, r2, r3
 8003b26:	2202      	movs	r2, #2
 8003b28:	741a      	strb	r2, [r3, #16]
			return LIS3MDL_STATUS_CHECK_IN_PROGRESS;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0a2      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
		}
		return LIS3MDL_STARTING_STATUS_CHECK;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0a0      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>

	case LIS3MDL_STATUS_CHECK_IN_PROGRESS:
		if(get_first_non_idling_device_index(devices, num_of_devices) < 0){ // Every device is idling including this one
 8003b32:	230b      	movs	r3, #11
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 f89d 	bl	8003c7c <get_first_non_idling_device_index>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	da20      	bge.n	8003b88 <lis3mdl_get_magnetic_data+0xe4>
			if(devices[dev_index].rx[0] & LIS3MDL_ZYXDA){ // Data available bit from status register
 8003b46:	210a      	movs	r1, #10
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	222c      	movs	r2, #44	@ 0x2c
 8003b4e:	4353      	muls	r3, r2
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	18d3      	adds	r3, r2, r3
 8003b54:	7e1b      	ldrb	r3, [r3, #24]
 8003b56:	001a      	movs	r2, r3
 8003b58:	2308      	movs	r3, #8
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <lis3mdl_get_magnetic_data+0xce>
				devices[dev_index].data_retrieval_state = LIS3MDL_STARTING_DATA_RETRIEVAL;
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	222c      	movs	r2, #44	@ 0x2c
 8003b64:	4353      	muls	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	18d3      	adds	r3, r2, r3
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	741a      	strb	r2, [r3, #16]
				return LIS3MDL_STARTING_DATA_RETRIEVAL;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e080      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
			}
			devices[dev_index].data_retrieval_state = LIS3MDL_STARTING_STATUS_CHECK; // Data is not yet available reread the status reg until it is available
 8003b72:	230a      	movs	r3, #10
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	222c      	movs	r2, #44	@ 0x2c
 8003b7a:	4353      	muls	r3, r2
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	18d3      	adds	r3, r2, r3
 8003b80:	2201      	movs	r2, #1
 8003b82:	741a      	strb	r2, [r3, #16]
			return LIS3MDL_STARTING_STATUS_CHECK;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e075      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
		}
		return LIS3MDL_STATUS_CHECK_IN_PROGRESS;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	e073      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>

	case LIS3MDL_STARTING_DATA_RETRIEVAL:
		if(lis3mdl_read_reg(devices, num_of_devices, dev_index, LIS3MDL_OUT_X_L_ADDR, 6) == HAL_OK){
 8003b8c:	240a      	movs	r4, #10
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	781a      	ldrb	r2, [r3, #0]
 8003b92:	230b      	movs	r3, #11
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	7819      	ldrb	r1, [r3, #0]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2329      	movs	r3, #41	@ 0x29
 8003ba0:	f000 f894 	bl	8003ccc <lis3mdl_read_reg>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d109      	bne.n	8003bbc <lis3mdl_get_magnetic_data+0x118>
			devices[dev_index].data_retrieval_state = LIS3MDL_DATA_RETRIEVAL_IN_PROGRESS;
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	222c      	movs	r2, #44	@ 0x2c
 8003bae:	4353      	muls	r3, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	18d3      	adds	r3, r2, r3
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	741a      	strb	r2, [r3, #16]
			return LIS3MDL_DATA_RETRIEVAL_IN_PROGRESS;
 8003bb8:	2304      	movs	r3, #4
 8003bba:	e05b      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
		}
		return LIS3MDL_STARTING_DATA_RETRIEVAL;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e059      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>

	case LIS3MDL_DATA_RETRIEVAL_IN_PROGRESS:
		if(get_first_non_idling_device_index(devices, num_of_devices) < 0){ // Every device is idling including this one
 8003bc0:	230b      	movs	r3, #11
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 f856 	bl	8003c7c <get_first_non_idling_device_index>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	da4c      	bge.n	8003c6e <lis3mdl_get_magnetic_data+0x1ca>
			results->x = (devices[dev_index].rx[1]) | (devices[dev_index].rx[0] << 8);
 8003bd4:	200a      	movs	r0, #10
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	222c      	movs	r2, #44	@ 0x2c
 8003bdc:	4353      	muls	r3, r2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	18d3      	adds	r3, r2, r3
 8003be2:	7e5b      	ldrb	r3, [r3, #25]
 8003be4:	b21a      	sxth	r2, r3
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	212c      	movs	r1, #44	@ 0x2c
 8003bec:	434b      	muls	r3, r1
 8003bee:	68f9      	ldr	r1, [r7, #12]
 8003bf0:	18cb      	adds	r3, r1, r3
 8003bf2:	7e1b      	ldrb	r3, [r3, #24]
 8003bf4:	b21b      	sxth	r3, r3
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	b21b      	sxth	r3, r3
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	b21a      	sxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	801a      	strh	r2, [r3, #0]
			results->y = (devices[dev_index].rx[3]) | (devices[dev_index].rx[2] << 8);
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	222c      	movs	r2, #44	@ 0x2c
 8003c08:	4353      	muls	r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	18d3      	adds	r3, r2, r3
 8003c0e:	7edb      	ldrb	r3, [r3, #27]
 8003c10:	b21a      	sxth	r2, r3
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	212c      	movs	r1, #44	@ 0x2c
 8003c18:	434b      	muls	r3, r1
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	18cb      	adds	r3, r1, r3
 8003c1e:	7e9b      	ldrb	r3, [r3, #26]
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	b21b      	sxth	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b21a      	sxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	805a      	strh	r2, [r3, #2]
			results->z = (devices[dev_index].rx[5]) | (devices[dev_index].rx[4] << 8);
 8003c2e:	183b      	adds	r3, r7, r0
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	222c      	movs	r2, #44	@ 0x2c
 8003c34:	4353      	muls	r3, r2
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	7f5b      	ldrb	r3, [r3, #29]
 8003c3c:	b21a      	sxth	r2, r3
 8003c3e:	183b      	adds	r3, r7, r0
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	212c      	movs	r1, #44	@ 0x2c
 8003c44:	434b      	muls	r3, r1
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	18cb      	adds	r3, r1, r3
 8003c4a:	7f1b      	ldrb	r3, [r3, #28]
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	809a      	strh	r2, [r3, #4]

			devices[dev_index].data_retrieval_state = LIS3MDL_STARTING_STATUS_CHECK;
 8003c5a:	183b      	adds	r3, r7, r0
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	222c      	movs	r2, #44	@ 0x2c
 8003c60:	4353      	muls	r3, r2
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	18d3      	adds	r3, r2, r3
 8003c66:	2201      	movs	r2, #1
 8003c68:	741a      	strb	r2, [r3, #16]
			return LIS3MDL_DATA_AVAILABLE;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e002      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
		}
		return LIS3MDL_DATA_RETRIEVAL_IN_PROGRESS;
 8003c6e:	2304      	movs	r3, #4
 8003c70:	e000      	b.n	8003c74 <lis3mdl_get_magnetic_data+0x1d0>
	default:
		return LIS3MDL_DATA_RETRIEVAL_ERROR;
 8003c72:	2305      	movs	r3, #5
	}

}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b005      	add	sp, #20
 8003c7a:	bd90      	pop	{r4, r7, pc}

08003c7c <get_first_non_idling_device_index>:
  * @retval The zero-based index of the first non-idling device.
  * @retval -1 if all devices in the array are in the `LIS3MDL_IDLE` state,
  * or if the `devices` pointer is NULL.
  */

int get_first_non_idling_device_index(LIS3MDL_Device *devices, uint8_t num_of_devices){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	000a      	movs	r2, r1
 8003c86:	1cfb      	adds	r3, r7, #3
 8003c88:	701a      	strb	r2, [r3, #0]
	if(devices == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <get_first_non_idling_device_index+0x1a>
		return -1;
 8003c90:	2301      	movs	r3, #1
 8003c92:	425b      	negs	r3, r3
 8003c94:	e016      	b.n	8003cc4 <get_first_non_idling_device_index+0x48>

	for(int i=0; i<num_of_devices; i++){
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	e00c      	b.n	8003cb6 <get_first_non_idling_device_index+0x3a>
		if(devices[i].process_state != LIS3MDL_IDLE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	222c      	movs	r2, #44	@ 0x2c
 8003ca0:	4353      	muls	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	18d3      	adds	r3, r2, r3
 8003ca6:	7bdb      	ldrb	r3, [r3, #15]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d001      	beq.n	8003cb0 <get_first_non_idling_device_index+0x34>
			return i;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	e009      	b.n	8003cc4 <get_first_non_idling_device_index+0x48>
	for(int i=0; i<num_of_devices; i++){
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	1cfb      	adds	r3, r7, #3
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	dbed      	blt.n	8003c9c <get_first_non_idling_device_index+0x20>
	}

	return -1;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	425b      	negs	r3, r3
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b004      	add	sp, #16
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <lis3mdl_read_reg>:
  * invalid `reg` flags, or `size` out of bounds), or if `lis3mdl_clear_data` fails.
  * @retval HAL_BUSY If any LIS3MDL device (including the target `device_index`) is
  * currently busy with another ongoing SPI transaction (i.e., not in `LIS3MDL_IDLE` state).
  */

HAL_StatusTypeDef lis3mdl_read_reg(LIS3MDL_Device *devices, uint8_t num_of_devices, uint8_t device_index, uint8_t reg, uint8_t size){
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	000c      	movs	r4, r1
 8003cd6:	0010      	movs	r0, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	1cfb      	adds	r3, r7, #3
 8003cdc:	1c22      	adds	r2, r4, #0
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	1cbb      	adds	r3, r7, #2
 8003ce2:	1c02      	adds	r2, r0, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	1c7b      	adds	r3, r7, #1
 8003ce8:	1c0a      	adds	r2, r1, #0
 8003cea:	701a      	strb	r2, [r3, #0]
	if(devices == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <lis3mdl_read_reg+0x2a>
		return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e064      	b.n	8003dc0 <lis3mdl_read_reg+0xf4>

	if(get_first_non_idling_device_index(devices, num_of_devices) >= 0)
 8003cf6:	1cfb      	adds	r3, r7, #3
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0011      	movs	r1, r2
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff ffbc 	bl	8003c7c <get_first_non_idling_device_index>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	db01      	blt.n	8003d0c <lis3mdl_read_reg+0x40>
		return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e059      	b.n	8003dc0 <lis3mdl_read_reg+0xf4>

	if((reg & LIS3MDL_READ_BIT) == LIS3MDL_READ_BIT || (reg & LIS3MDL_MD_BIT) == LIS3MDL_MD_BIT)
 8003d0c:	1c7b      	adds	r3, r7, #1
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db04      	blt.n	8003d20 <lis3mdl_read_reg+0x54>
 8003d16:	1c7b      	adds	r3, r7, #1
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d001      	beq.n	8003d24 <lis3mdl_read_reg+0x58>
		return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e04d      	b.n	8003dc0 <lis3mdl_read_reg+0xf4>

	if(size < 1 || size > LIS3MDL_BUFFER_SIZE)
 8003d24:	2218      	movs	r2, #24
 8003d26:	18bb      	adds	r3, r7, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <lis3mdl_read_reg+0x6a>
 8003d2e:	18bb      	adds	r3, r7, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b06      	cmp	r3, #6
 8003d34:	d901      	bls.n	8003d3a <lis3mdl_read_reg+0x6e>
		return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <lis3mdl_read_reg+0xf4>

	if(lis3mdl_clear_data(&devices[device_index])!=0)
 8003d3a:	1cbb      	adds	r3, r7, #2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	222c      	movs	r2, #44	@ 0x2c
 8003d40:	4353      	muls	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	18d3      	adds	r3, r2, r3
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 f83e 	bl	8003dc8 <lis3mdl_clear_data>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <lis3mdl_read_reg+0x88>
		return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e035      	b.n	8003dc0 <lis3mdl_read_reg+0xf4>

	devices[device_index].reg_addr = reg | LIS3MDL_READ_BIT;
 8003d54:	1cbb      	adds	r3, r7, #2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	222c      	movs	r2, #44	@ 0x2c
 8003d5a:	4353      	muls	r3, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	18d3      	adds	r3, r2, r3
 8003d60:	1c7a      	adds	r2, r7, #1
 8003d62:	7812      	ldrb	r2, [r2, #0]
 8003d64:	2180      	movs	r1, #128	@ 0x80
 8003d66:	4249      	negs	r1, r1
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	745a      	strb	r2, [r3, #17]
	if(size > 1)
 8003d6e:	2318      	movs	r3, #24
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d910      	bls.n	8003d9a <lis3mdl_read_reg+0xce>
		devices[device_index].reg_addr |= LIS3MDL_MD_BIT;
 8003d78:	1cbb      	adds	r3, r7, #2
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	222c      	movs	r2, #44	@ 0x2c
 8003d7e:	4353      	muls	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	18d3      	adds	r3, r2, r3
 8003d84:	7c5a      	ldrb	r2, [r3, #17]
 8003d86:	1cbb      	adds	r3, r7, #2
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	212c      	movs	r1, #44	@ 0x2c
 8003d8c:	434b      	muls	r3, r1
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	18cb      	adds	r3, r1, r3
 8003d92:	2140      	movs	r1, #64	@ 0x40
 8003d94:	430a      	orrs	r2, r1
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	745a      	strb	r2, [r3, #17]
	devices[device_index].data_size = size;
 8003d9a:	1cbb      	adds	r3, r7, #2
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	222c      	movs	r2, #44	@ 0x2c
 8003da0:	4353      	muls	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	18d2      	adds	r2, r2, r3
 8003da6:	2318      	movs	r3, #24
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	7793      	strb	r3, [r2, #30]

	devices[device_index].process_state = LIS3MDL_SENDING_ADDRESS_TO_READ_FROM;
 8003dae:	1cbb      	adds	r3, r7, #2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	222c      	movs	r2, #44	@ 0x2c
 8003db4:	4353      	muls	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	18d3      	adds	r3, r2, r3
 8003dba:	2205      	movs	r2, #5
 8003dbc:	73da      	strb	r2, [r3, #15]

	return HAL_OK;
 8003dbe:	2300      	movs	r3, #0

}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b003      	add	sp, #12
 8003dc6:	bd90      	pop	{r4, r7, pc}

08003dc8 <lis3mdl_clear_data>:
  *
  * @retval 0 if the data was successfully cleared.
  * @retval 1 if the `device` pointer is NULL.
  */

uint8_t lis3mdl_clear_data(LIS3MDL_Device *device){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	if(device == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <lis3mdl_clear_data+0x12>
		return 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00d      	b.n	8003df6 <lis3mdl_clear_data+0x2e>

	//memset(device->tx, 0, LIS3MDL_BUFFER_SIZE);
	memset(device->rx, 0, LIS3MDL_BUFFER_SIZE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3318      	adds	r3, #24
 8003dde:	2206      	movs	r2, #6
 8003de0:	2100      	movs	r1, #0
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 fb0a 	bl	80043fc <memset>
	device->reg_addr = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	745a      	strb	r2, [r3, #17]
	device->data_size = 0;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	779a      	strb	r2, [r3, #30]
	return 0;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b002      	add	sp, #8
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <lis3mdl_initialize_device_struct>:
  * @param cs_pin GPIO pin number for the Chip Select (CS) pin.
  *
  * @retval 0 on success, 1 on error (e.g., NULL pointer).
  */

uint8_t lis3mdl_initialize_device_struct(LIS3MDL_Device *device, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_gpio_port_handle, uint16_t cs_pin){
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	001a      	movs	r2, r3
 8003e0c:	1cbb      	adds	r3, r7, #2
 8003e0e:	801a      	strh	r2, [r3, #0]
	if (device == NULL || hspi == NULL || cs_gpio_port_handle == NULL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <lis3mdl_initialize_device_struct+0x24>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <lis3mdl_initialize_device_struct+0x24>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <lis3mdl_initialize_device_struct+0x28>
		return 1;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e024      	b.n	8003e70 <lis3mdl_initialize_device_struct+0x72>

	device->process_state = LIS3MDL_RESETTING_REGISTERS;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	73da      	strb	r2, [r3, #15]
	device->data_retrieval_state = LIS3MDL_STARTING_STATUS_CHECK;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	741a      	strb	r2, [r3, #16]

	device->reg_addr = 0;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	745a      	strb	r2, [r3, #17]
	device->data_size = 0;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	779a      	strb	r2, [r3, #30]
	memset(device->rx, 0, LIS3MDL_BUFFER_SIZE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3318      	adds	r3, #24
 8003e42:	2206      	movs	r2, #6
 8003e44:	2100      	movs	r1, #0
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fad8 	bl	80043fc <memset>
	memset(device->tx, 0, LIS3MDL_BUFFER_SIZE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3312      	adds	r3, #18
 8003e50:	2206      	movs	r2, #6
 8003e52:	2100      	movs	r1, #0
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 fad1 	bl	80043fc <memset>
	device->hspi = hspi;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	629a      	str	r2, [r3, #40]	@ 0x28
	device->cs_gpio_port_handle = cs_gpio_port_handle;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	621a      	str	r2, [r3, #32]
	device->cs_pin = cs_pin;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1cba      	adds	r2, r7, #2
 8003e6a:	8812      	ldrh	r2, [r2, #0]
 8003e6c:	849a      	strh	r2, [r3, #36]	@ 0x24

	return 0;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	0018      	movs	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <lis3mdl_setup_config_registers>:
  * @param input_params A structure containing desired initialization parameters (e.g., ODR, Full Scale, etc.).
  *
  * @retval The return value from lis3mdl_put_params_into_registers (0 on success, non-zero on error).
  */

uint8_t lis3mdl_setup_config_registers(LIS3MDL_Device *device, LIS3MDL_Init_Params input_params){
 8003e78:	b084      	sub	sp, #16
 8003e7a:	b5b0      	push	{r4, r5, r7, lr}
 8003e7c:	b08a      	sub	sp, #40	@ 0x28
 8003e7e:	af08      	add	r7, sp, #32
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	2004      	movs	r0, #4
 8003e84:	2418      	movs	r4, #24
 8003e86:	1900      	adds	r0, r0, r4
 8003e88:	19c0      	adds	r0, r0, r7
 8003e8a:	6001      	str	r1, [r0, #0]
 8003e8c:	6042      	str	r2, [r0, #4]
 8003e8e:	6083      	str	r3, [r0, #8]
	return lis3mdl_put_params_into_registers(input_params, device->config_regs.offsets, device->config_regs.ctrls, device->config_regs.ints);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1d99      	adds	r1, r3, #6
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	330b      	adds	r3, #11
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	191b      	adds	r3, r3, r4
 8003ea0:	19db      	adds	r3, r3, r7
 8003ea2:	9006      	str	r0, [sp, #24]
 8003ea4:	9105      	str	r1, [sp, #20]
 8003ea6:	9204      	str	r2, [sp, #16]
 8003ea8:	466a      	mov	r2, sp
 8003eaa:	0011      	movs	r1, r2
 8003eac:	001a      	movs	r2, r3
 8003eae:	3210      	adds	r2, #16
 8003eb0:	ca31      	ldmia	r2!, {r0, r4, r5}
 8003eb2:	c131      	stmia	r1!, {r0, r4, r5}
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	600a      	str	r2, [r1, #0]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f000 f86a 	bl	8003f98 <lis3mdl_put_params_into_registers>
 8003ec4:	0003      	movs	r3, r0
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b002      	add	sp, #8
 8003ecc:	bcb0      	pop	{r4, r5, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	b004      	add	sp, #16
 8003ed2:	4718      	bx	r3

08003ed4 <lis3mdl_set_default_params>:
  * @param init_params Pointer to the `LIS3MDL_Init_Params` structure to be initialized.
  *
  * @retval 0 if successful, 1 if `init_params` is NULL.
  */

uint8_t lis3mdl_set_default_params(LIS3MDL_Init_Params *init_params){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
	if(init_params == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <lis3mdl_set_default_params+0x12>
		return 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e054      	b.n	8003f90 <lis3mdl_set_default_params+0xbc>

	init_params->offset_x = 0;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	801a      	strh	r2, [r3, #0]
	init_params->offset_y = 0;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	805a      	strh	r2, [r3, #2]
	init_params->offset_z = 0;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	809a      	strh	r2, [r3, #4]

	init_params->temp_en = 0;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	719a      	strb	r2, [r3, #6]
	init_params->xy_operation_mode = LIS3MDL_MEDIUM_PERFORMANCE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	71da      	strb	r2, [r3, #7]
	init_params->output_data_rate = LIS3MDL_ODR_10;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2204      	movs	r2, #4
 8003f08:	721a      	strb	r2, [r3, #8]
	init_params->fast_odr = 0;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	725a      	strb	r2, [r3, #9]
	init_params->self_test = 0;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	729a      	strb	r2, [r3, #10]

	init_params->full_scale = LIS3MDL_FULL_SCALE_16_GAUSS;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2203      	movs	r2, #3
 8003f1a:	72da      	strb	r2, [r3, #11]

	init_params->low_power_mode = 0;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	731a      	strb	r2, [r3, #12]
	init_params->spi_interface_mode = 0;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	735a      	strb	r2, [r3, #13]
	init_params->conversion_mode = LIS3MDL_CONTINIOUS_CONVERSION;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	739a      	strb	r2, [r3, #14]

	init_params->z_operation_mode = LIS3MDL_MEDIUM_PERFORMANCE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	73da      	strb	r2, [r3, #15]

	init_params->fast_read = 0;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	741a      	strb	r2, [r3, #16]
	init_params->block_data_update = 1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	745a      	strb	r2, [r3, #17]

	init_params->x_interrupt_generation = 0;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	749a      	strb	r2, [r3, #18]
	init_params->y_interrupt_generation = 0;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	74da      	strb	r2, [r3, #19]
	init_params->z_interrupt_generation = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	751a      	strb	r2, [r3, #20]
	init_params->interrupt_active_configuration = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	755a      	strb	r2, [r3, #21]
	init_params->latch_interrupt = 0;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	759a      	strb	r2, [r3, #22]
	init_params->int_pin = 0;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	75da      	strb	r2, [r3, #23]

	init_params->positive_thresh_x_enable = 0;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	761a      	strb	r2, [r3, #24]
	init_params->positive_thresh_y_enable = 0;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	765a      	strb	r2, [r3, #25]
	init_params->positive_thresh_z_enable = 0;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	769a      	strb	r2, [r3, #26]
	init_params->negative_thresh_x_enable = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	76da      	strb	r2, [r3, #27]
	init_params->negative_thresh_y_enable = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	771a      	strb	r2, [r3, #28]
	init_params->negative_thresh_z_enable = 0;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	775a      	strb	r2, [r3, #29]

	init_params->interrupt_threshold = 0;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	83da      	strh	r2, [r3, #30]
	return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <lis3mdl_put_params_into_registers>:
  * @param int_regs Pointer to a `uint8_t` array of size 4 to store interrupt register bytes (INT_CFG_REG to INT_THS_H_REG).
  *
  * @retval 0 if successful, 1 if any of the output register pointers are NULL.
  */

uint8_t lis3mdl_put_params_into_registers(LIS3MDL_Init_Params init_params, uint8_t *offset_regs, uint8_t *ctrl_regs, uint8_t *int_regs){
 8003f98:	b084      	sub	sp, #16
 8003f9a:	b590      	push	{r4, r7, lr}
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	240c      	movs	r4, #12
 8003fa0:	193c      	adds	r4, r7, r4
 8003fa2:	6020      	str	r0, [r4, #0]
 8003fa4:	6061      	str	r1, [r4, #4]
 8003fa6:	60a2      	str	r2, [r4, #8]
 8003fa8:	60e3      	str	r3, [r4, #12]
	if(offset_regs == NULL || ctrl_regs == NULL || int_regs == NULL)
 8003faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <lis3mdl_put_params_into_registers+0x24>
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <lis3mdl_put_params_into_registers+0x24>
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <lis3mdl_put_params_into_registers+0x28>
		return 1;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e1e1      	b.n	8004384 <lis3mdl_put_params_into_registers+0x3ec>

	offset_regs[0] = (uint8_t)(init_params.offset_x & 0x00FF);
 8003fc0:	200c      	movs	r0, #12
 8003fc2:	183b      	adds	r3, r7, r0
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fca:	701a      	strb	r2, [r3, #0]
	offset_regs[1] = (uint8_t)((init_params.offset_x & 0xFF00)>>8);
 8003fcc:	183b      	adds	r3, r7, r0
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
	offset_regs[2] = (uint8_t)(init_params.offset_y & 0x00FF);
 8003fdc:	183b      	adds	r3, r7, r0
 8003fde:	885a      	ldrh	r2, [r3, #2]
 8003fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe2:	3302      	adds	r3, #2
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	701a      	strb	r2, [r3, #0]
	offset_regs[3] = (uint8_t)((init_params.offset_y & 0xFF00)>>8);
 8003fe8:	183b      	adds	r3, r7, r0
 8003fea:	885b      	ldrh	r3, [r3, #2]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff2:	3303      	adds	r3, #3
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
	offset_regs[4] = (uint8_t)(init_params.offset_z & 0x00FF);
 8003ff8:	183b      	adds	r3, r7, r0
 8003ffa:	889a      	ldrh	r2, [r3, #4]
 8003ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffe:	3304      	adds	r3, #4
 8004000:	b2d2      	uxtb	r2, r2
 8004002:	701a      	strb	r2, [r3, #0]
	offset_regs[5] = (uint8_t)((init_params.offset_z & 0xFF00)>>8);
 8004004:	183b      	adds	r3, r7, r0
 8004006:	889b      	ldrh	r3, [r3, #4]
 8004008:	0a1b      	lsrs	r3, r3, #8
 800400a:	b29a      	uxth	r2, r3
 800400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400e:	3305      	adds	r3, #5
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

	ctrl_regs[0] = 0;
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.temp_en << 7) & LIS3MDL_TEMP_EN;
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b25a      	sxtb	r2, r3
 8004020:	183b      	adds	r3, r7, r0
 8004022:	799b      	ldrb	r3, [r3, #6]
 8004024:	b25b      	sxtb	r3, r3
 8004026:	01db      	lsls	r3, r3, #7
 8004028:	b25b      	sxtb	r3, r3
 800402a:	4313      	orrs	r3, r2
 800402c:	b25b      	sxtb	r3, r3
 800402e:	b2da      	uxtb	r2, r3
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.xy_operation_mode << 5) & LIS3MDL_XY_OPERATING_MODE;
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b25a      	sxtb	r2, r3
 800403a:	183b      	adds	r3, r7, r0
 800403c:	79db      	ldrb	r3, [r3, #7]
 800403e:	b25b      	sxtb	r3, r3
 8004040:	015b      	lsls	r3, r3, #5
 8004042:	b25b      	sxtb	r3, r3
 8004044:	2160      	movs	r1, #96	@ 0x60
 8004046:	400b      	ands	r3, r1
 8004048:	b25b      	sxtb	r3, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	b25b      	sxtb	r3, r3
 800404e:	b2da      	uxtb	r2, r3
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.output_data_rate << 2) & LIS3MDL_ODR;
 8004054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b25a      	sxtb	r2, r3
 800405a:	183b      	adds	r3, r7, r0
 800405c:	7a1b      	ldrb	r3, [r3, #8]
 800405e:	b25b      	sxtb	r3, r3
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	b25b      	sxtb	r3, r3
 8004064:	211c      	movs	r1, #28
 8004066:	400b      	ands	r3, r1
 8004068:	b25b      	sxtb	r3, r3
 800406a:	4313      	orrs	r3, r2
 800406c:	b25b      	sxtb	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.fast_odr << 1) & LIS3MDL_FAST_ODR;
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b25a      	sxtb	r2, r3
 800407a:	183b      	adds	r3, r7, r0
 800407c:	7a5b      	ldrb	r3, [r3, #9]
 800407e:	b25b      	sxtb	r3, r3
 8004080:	18db      	adds	r3, r3, r3
 8004082:	b25b      	sxtb	r3, r3
 8004084:	2102      	movs	r1, #2
 8004086:	400b      	ands	r3, r1
 8004088:	b25b      	sxtb	r3, r3
 800408a:	4313      	orrs	r3, r2
 800408c:	b25b      	sxtb	r3, r3
 800408e:	b2da      	uxtb	r2, r3
 8004090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004092:	701a      	strb	r2, [r3, #0]
	ctrl_regs[0] |= (init_params.self_test << 0) & LIS3MDL_SELF_TEST;
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	b25a      	sxtb	r2, r3
 800409a:	183b      	adds	r3, r7, r0
 800409c:	7a9b      	ldrb	r3, [r3, #10]
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	2101      	movs	r1, #1
 80040a2:	400b      	ands	r3, r1
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	701a      	strb	r2, [r3, #0]

	ctrl_regs[1] = 0;
 80040b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b2:	3301      	adds	r3, #1
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	ctrl_regs[1] |= (init_params.full_scale << 5) & LIS3MDL_FULL_SCALE;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	b25a      	sxtb	r2, r3
 80040c0:	183b      	adds	r3, r7, r0
 80040c2:	7adb      	ldrb	r3, [r3, #11]
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	015b      	lsls	r3, r3, #5
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	2160      	movs	r1, #96	@ 0x60
 80040cc:	400b      	ands	r3, r1
 80040ce:	b25b      	sxtb	r3, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b25a      	sxtb	r2, r3
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	3301      	adds	r3, #1
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]

	ctrl_regs[2] = 0;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	3302      	adds	r3, #2
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
	ctrl_regs[2] |= (init_params.low_power_mode << 5) & LIS3MDL_LP;
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	3302      	adds	r3, #2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b25a      	sxtb	r2, r3
 80040ec:	183b      	adds	r3, r7, r0
 80040ee:	7b1b      	ldrb	r3, [r3, #12]
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	015b      	lsls	r3, r3, #5
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	2120      	movs	r1, #32
 80040f8:	400b      	ands	r3, r1
 80040fa:	b25b      	sxtb	r3, r3
 80040fc:	4313      	orrs	r3, r2
 80040fe:	b25a      	sxtb	r2, r3
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	3302      	adds	r3, #2
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
	ctrl_regs[2] |= (init_params.spi_interface_mode << 2) & LIS3MDL_SIM;
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	3302      	adds	r3, #2
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b25a      	sxtb	r2, r3
 8004110:	183b      	adds	r3, r7, r0
 8004112:	7b5b      	ldrb	r3, [r3, #13]
 8004114:	b25b      	sxtb	r3, r3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	b25b      	sxtb	r3, r3
 800411a:	2104      	movs	r1, #4
 800411c:	400b      	ands	r3, r1
 800411e:	b25b      	sxtb	r3, r3
 8004120:	4313      	orrs	r3, r2
 8004122:	b25a      	sxtb	r2, r3
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	3302      	adds	r3, #2
 8004128:	b2d2      	uxtb	r2, r2
 800412a:	701a      	strb	r2, [r3, #0]
	ctrl_regs[2] |= (init_params.conversion_mode << 0) & LIS3MDL_MD;
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	3302      	adds	r3, #2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b25a      	sxtb	r2, r3
 8004134:	183b      	adds	r3, r7, r0
 8004136:	7b9b      	ldrb	r3, [r3, #14]
 8004138:	b25b      	sxtb	r3, r3
 800413a:	2103      	movs	r1, #3
 800413c:	400b      	ands	r3, r1
 800413e:	b25b      	sxtb	r3, r3
 8004140:	4313      	orrs	r3, r2
 8004142:	b25a      	sxtb	r2, r3
 8004144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004146:	3302      	adds	r3, #2
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

	ctrl_regs[3] = 0;
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	3303      	adds	r3, #3
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
	ctrl_regs[3] |= (init_params.z_operation_mode << 2) & LIS3MDL_Z_OPERATING_MODE;
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	3303      	adds	r3, #3
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	b25a      	sxtb	r2, r3
 800415c:	183b      	adds	r3, r7, r0
 800415e:	7bdb      	ldrb	r3, [r3, #15]
 8004160:	b25b      	sxtb	r3, r3
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	b25b      	sxtb	r3, r3
 8004166:	210c      	movs	r1, #12
 8004168:	400b      	ands	r3, r1
 800416a:	b25b      	sxtb	r3, r3
 800416c:	4313      	orrs	r3, r2
 800416e:	b25a      	sxtb	r2, r3
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	3303      	adds	r3, #3
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]

	ctrl_regs[4] = 0;
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	3304      	adds	r3, #4
 800417c:	2200      	movs	r2, #0
 800417e:	701a      	strb	r2, [r3, #0]
	ctrl_regs[4] |= (init_params.fast_read << 7) & LIS3MDL_FAST_READ;
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	3304      	adds	r3, #4
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	b25a      	sxtb	r2, r3
 8004188:	183b      	adds	r3, r7, r0
 800418a:	7c1b      	ldrb	r3, [r3, #16]
 800418c:	b25b      	sxtb	r3, r3
 800418e:	01db      	lsls	r3, r3, #7
 8004190:	b25b      	sxtb	r3, r3
 8004192:	4313      	orrs	r3, r2
 8004194:	b25a      	sxtb	r2, r3
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	3304      	adds	r3, #4
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
	ctrl_regs[4] |= (init_params.fast_read << 6) & LIS3MDL_BDU;
 800419e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a0:	3304      	adds	r3, #4
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b25a      	sxtb	r2, r3
 80041a6:	183b      	adds	r3, r7, r0
 80041a8:	7c1b      	ldrb	r3, [r3, #16]
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	2140      	movs	r1, #64	@ 0x40
 80041b2:	400b      	ands	r3, r1
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b25a      	sxtb	r2, r3
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	3304      	adds	r3, #4
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

	int_regs[0] = 0;
 80041c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041c4:	2200      	movs	r2, #0
 80041c6:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.x_interrupt_generation << 7) & LIS3MDL_XIEN;
 80041c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b25a      	sxtb	r2, r3
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	7c9b      	ldrb	r3, [r3, #18]
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	01db      	lsls	r3, r3, #7
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	4313      	orrs	r3, r2
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.y_interrupt_generation << 6) & LIS3MDL_YIEN;
 80041e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	b25a      	sxtb	r2, r3
 80041e8:	183b      	adds	r3, r7, r0
 80041ea:	7cdb      	ldrb	r3, [r3, #19]
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	019b      	lsls	r3, r3, #6
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	2140      	movs	r1, #64	@ 0x40
 80041f4:	400b      	ands	r3, r1
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.z_interrupt_generation << 5) & LIS3MDL_YIEN;
 8004202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b25a      	sxtb	r2, r3
 8004208:	183b      	adds	r3, r7, r0
 800420a:	7d1b      	ldrb	r3, [r3, #20]
 800420c:	b25b      	sxtb	r3, r3
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	b25b      	sxtb	r3, r3
 8004212:	2140      	movs	r1, #64	@ 0x40
 8004214:	400b      	ands	r3, r1
 8004216:	b25b      	sxtb	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b25b      	sxtb	r3, r3
 800421c:	b2da      	uxtb	r2, r3
 800421e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004220:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= 0x08; // Reserved
 8004222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2208      	movs	r2, #8
 8004228:	4313      	orrs	r3, r2
 800422a:	b2da      	uxtb	r2, r3
 800422c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422e:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.interrupt_active_configuration << 2) & LIS3MDL_IEA;
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b25a      	sxtb	r2, r3
 8004236:	183b      	adds	r3, r7, r0
 8004238:	7d5b      	ldrb	r3, [r3, #21]
 800423a:	b25b      	sxtb	r3, r3
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	b25b      	sxtb	r3, r3
 8004240:	2104      	movs	r1, #4
 8004242:	400b      	ands	r3, r1
 8004244:	b25b      	sxtb	r3, r3
 8004246:	4313      	orrs	r3, r2
 8004248:	b25b      	sxtb	r3, r3
 800424a:	b2da      	uxtb	r2, r3
 800424c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424e:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.latch_interrupt << 1) & LIS3MDL_LIR;
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b25a      	sxtb	r2, r3
 8004256:	183b      	adds	r3, r7, r0
 8004258:	7d9b      	ldrb	r3, [r3, #22]
 800425a:	b25b      	sxtb	r3, r3
 800425c:	18db      	adds	r3, r3, r3
 800425e:	b25b      	sxtb	r3, r3
 8004260:	2102      	movs	r1, #2
 8004262:	400b      	ands	r3, r1
 8004264:	b25b      	sxtb	r3, r3
 8004266:	4313      	orrs	r3, r2
 8004268:	b25b      	sxtb	r3, r3
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426e:	701a      	strb	r2, [r3, #0]
	int_regs[0] |= (init_params.int_pin << 0) & LIS3MDL_IEN;
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b25a      	sxtb	r2, r3
 8004276:	183b      	adds	r3, r7, r0
 8004278:	7ddb      	ldrb	r3, [r3, #23]
 800427a:	b25b      	sxtb	r3, r3
 800427c:	2101      	movs	r1, #1
 800427e:	400b      	ands	r3, r1
 8004280:	b25b      	sxtb	r3, r3
 8004282:	4313      	orrs	r3, r2
 8004284:	b25b      	sxtb	r3, r3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428a:	701a      	strb	r2, [r3, #0]

	int_regs[1] = 0;
 800428c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428e:	3301      	adds	r3, #1
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.positive_thresh_x_enable << 7) & LIS3MDL_PTH_X;
 8004294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004296:	3301      	adds	r3, #1
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	b25a      	sxtb	r2, r3
 800429c:	183b      	adds	r3, r7, r0
 800429e:	7e1b      	ldrb	r3, [r3, #24]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	01db      	lsls	r3, r3, #7
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	4313      	orrs	r3, r2
 80042a8:	b25a      	sxtb	r2, r3
 80042aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ac:	3301      	adds	r3, #1
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.positive_thresh_y_enable << 6) & LIS3MDL_PTH_Y;
 80042b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b4:	3301      	adds	r3, #1
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b25a      	sxtb	r2, r3
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	7e5b      	ldrb	r3, [r3, #25]
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	019b      	lsls	r3, r3, #6
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	2140      	movs	r1, #64	@ 0x40
 80042c6:	400b      	ands	r3, r1
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	4313      	orrs	r3, r2
 80042cc:	b25a      	sxtb	r2, r3
 80042ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d0:	3301      	adds	r3, #1
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.positive_thresh_z_enable << 5) & LIS3MDL_PTH_Z;
 80042d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d8:	3301      	adds	r3, #1
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b25a      	sxtb	r2, r3
 80042de:	183b      	adds	r3, r7, r0
 80042e0:	7e9b      	ldrb	r3, [r3, #26]
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	015b      	lsls	r3, r3, #5
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	2120      	movs	r1, #32
 80042ea:	400b      	ands	r3, r1
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	4313      	orrs	r3, r2
 80042f0:	b25a      	sxtb	r2, r3
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	3301      	adds	r3, #1
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.negative_thresh_x_enable << 4) & LIS3MDL_NTH_X;
 80042fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fc:	3301      	adds	r3, #1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b25a      	sxtb	r2, r3
 8004302:	183b      	adds	r3, r7, r0
 8004304:	7edb      	ldrb	r3, [r3, #27]
 8004306:	b25b      	sxtb	r3, r3
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	b25b      	sxtb	r3, r3
 800430c:	2110      	movs	r1, #16
 800430e:	400b      	ands	r3, r1
 8004310:	b25b      	sxtb	r3, r3
 8004312:	4313      	orrs	r3, r2
 8004314:	b25a      	sxtb	r2, r3
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	3301      	adds	r3, #1
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.negative_thresh_y_enable << 3) & LIS3MDL_NTH_Y;
 800431e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004320:	3301      	adds	r3, #1
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b25a      	sxtb	r2, r3
 8004326:	183b      	adds	r3, r7, r0
 8004328:	7f1b      	ldrb	r3, [r3, #28]
 800432a:	b25b      	sxtb	r3, r3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	b25b      	sxtb	r3, r3
 8004330:	2108      	movs	r1, #8
 8004332:	400b      	ands	r3, r1
 8004334:	b25b      	sxtb	r3, r3
 8004336:	4313      	orrs	r3, r2
 8004338:	b25a      	sxtb	r2, r3
 800433a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800433c:	3301      	adds	r3, #1
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
	int_regs[1] |= (init_params.negative_thresh_z_enable << 2) & LIS3MDL_NTH_Z;
 8004342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004344:	3301      	adds	r3, #1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	b25a      	sxtb	r2, r3
 800434a:	183b      	adds	r3, r7, r0
 800434c:	7f5b      	ldrb	r3, [r3, #29]
 800434e:	b25b      	sxtb	r3, r3
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	b25b      	sxtb	r3, r3
 8004354:	2104      	movs	r1, #4
 8004356:	400b      	ands	r3, r1
 8004358:	b25b      	sxtb	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b25a      	sxtb	r2, r3
 800435e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004360:	3301      	adds	r3, #1
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]

	int_regs[2] = (uint8_t)(init_params.interrupt_threshold & 0x00FF);
 8004366:	183b      	adds	r3, r7, r0
 8004368:	8bda      	ldrh	r2, [r3, #30]
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	3302      	adds	r3, #2
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
	int_regs[3] = (uint8_t)((init_params.interrupt_threshold & 0xFF00)>>8);
 8004372:	183b      	adds	r3, r7, r0
 8004374:	8bdb      	ldrh	r3, [r3, #30]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	b29a      	uxth	r2, r3
 800437a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800437c:	3303      	adds	r3, #3
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]

	return 0;
 8004382:	2300      	movs	r3, #0
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	bc90      	pop	{r4, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	b004      	add	sp, #16
 800438e:	4718      	bx	r3

08004390 <lis3mdl_change_state_due_to_spi_cplt>:
  * @retval LIS3MDL_STATE_CHANGE_OK if the state transition is valid and successful.
  * @retval LIS3MDL_STATE_CHANGE_INVALID_CHANGE if the current state does not allow
  * a valid transition upon SPI completion (e.g., unexpected state).
  */

LIS3MDL_State_Change_Error_t lis3mdl_change_state_due_to_spi_cplt(LIS3MDL_Process_State_t *state){
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	switch(*state){
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d824      	bhi.n	80043ea <lis3mdl_change_state_due_to_spi_cplt+0x5a>
 80043a0:	009a      	lsls	r2, r3, #2
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <lis3mdl_change_state_due_to_spi_cplt+0x68>)
 80043a4:	18d3      	adds	r3, r2, r3
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	469f      	mov	pc, r3
	case LIS3MDL_RESETTING_REGISTERS:
		*state = LIS3MDL_INITIALIZING_OFFSET_REGS;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
		break;
 80043b0:	e01d      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>
	case LIS3MDL_INITIALIZING_OFFSET_REGS:
//		*state = LIS3MDL_INITIALIZING_CTRL_REGS;
		*state = LIS3MDL_INITIALIZING_CTRL_REGS;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	701a      	strb	r2, [r3, #0]
		break;
 80043b8:	e019      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_INITIALIZING_CTRL_REGS:
		*state = LIS3MDL_INITIALIZING_INT_REGS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2203      	movs	r2, #3
 80043be:	701a      	strb	r2, [r3, #0]
		break;
 80043c0:	e015      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_INITIALIZING_INT_REGS:
		*state = LIS3MDL_IDLE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2204      	movs	r2, #4
 80043c6:	701a      	strb	r2, [r3, #0]
		break;
 80043c8:	e011      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_SENDING_ADDRESS_TO_READ_FROM:
		*state = LIS3MDL_READING_DATA;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2207      	movs	r2, #7
 80043ce:	701a      	strb	r2, [r3, #0]
		break;
 80043d0:	e00d      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_SENDING_ADDRESS_TO_WRITE_TO:
		*state = LIS3MDL_WRITING_DATA;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2208      	movs	r2, #8
 80043d6:	701a      	strb	r2, [r3, #0]
		break;
 80043d8:	e009      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_WRITING_DATA:
		*state = LIS3MDL_IDLE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	701a      	strb	r2, [r3, #0]
		break;
 80043e0:	e005      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	case LIS3MDL_READING_DATA:
		*state = LIS3MDL_IDLE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2204      	movs	r2, #4
 80043e6:	701a      	strb	r2, [r3, #0]
		break;
 80043e8:	e001      	b.n	80043ee <lis3mdl_change_state_due_to_spi_cplt+0x5e>

	default:
		return LIS3MDL_STATE_CHANGE_INVALID_CHANGE;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <lis3mdl_change_state_due_to_spi_cplt+0x60>
	}

	return LIS3MDL_STATE_CHANGE_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	080044c0 	.word	0x080044c0

080043fc <memset>:
 80043fc:	0003      	movs	r3, r0
 80043fe:	1882      	adds	r2, r0, r2
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	7019      	strb	r1, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	2600      	movs	r6, #0
 8004410:	4c0c      	ldr	r4, [pc, #48]	@ (8004444 <__libc_init_array+0x38>)
 8004412:	4d0d      	ldr	r5, [pc, #52]	@ (8004448 <__libc_init_array+0x3c>)
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	2600      	movs	r6, #0
 800441e:	f000 f823 	bl	8004468 <_init>
 8004422:	4c0a      	ldr	r4, [pc, #40]	@ (800444c <__libc_init_array+0x40>)
 8004424:	4d0a      	ldr	r5, [pc, #40]	@ (8004450 <__libc_init_array+0x44>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	00b3      	lsls	r3, r6, #2
 8004432:	58eb      	ldr	r3, [r5, r3]
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	00b3      	lsls	r3, r6, #2
 800443c:	58eb      	ldr	r3, [r5, r3]
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	080044e4 	.word	0x080044e4
 8004448:	080044e4 	.word	0x080044e4
 800444c:	080044e8 	.word	0x080044e8
 8004450:	080044e4 	.word	0x080044e4

08004454 <memcpy>:
 8004454:	2300      	movs	r3, #0
 8004456:	b510      	push	{r4, lr}
 8004458:	429a      	cmp	r2, r3
 800445a:	d100      	bne.n	800445e <memcpy+0xa>
 800445c:	bd10      	pop	{r4, pc}
 800445e:	5ccc      	ldrb	r4, [r1, r3]
 8004460:	54c4      	strb	r4, [r0, r3]
 8004462:	3301      	adds	r3, #1
 8004464:	e7f8      	b.n	8004458 <memcpy+0x4>
	...

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	46c0      	nop			@ (mov r8, r8)
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr


STM32_L053C8_MCU_LIS3MDL_Uzduotis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003188  08003188  00004188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c0  080031c0  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031c0  080031c0  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031c0  080031c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c0  080031c0  000041c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031c4  080031c4  000041c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  080031d4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  080031d4  00005164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3ed  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001da2  00000000  00000000  0000f421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  000111c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a4  00000000  00000000  00011d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013de8  00000000  00000000  000125c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf61  00000000  00000000  000263ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d317  00000000  00000000  0003330d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c4  00000000  00000000  000b0668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000b2e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003170 	.word	0x08003170

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003170 	.word	0x08003170

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b08c      	sub	sp, #48	@ 0x30
 8000224:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fb13 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f835 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f941 	bl	80004b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f921 	bl	8000478 <MX_DMA_Init>
  MX_SPI2_Init();
 8000236:	f000 f8ad 	bl	8000394 <MX_SPI2_Init>
  MX_TIM6_Init();
 800023a:	f000 f8e3 	bl	8000404 <MX_TIM6_Init>
  MX_IWDG_Init();
 800023e:	f000 f88b 	bl	8000358 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  LIS3MDL_Comm_Interface_t interface = {
 8000242:	003b      	movs	r3, r7
 8000244:	4a12      	ldr	r2, [pc, #72]	@ (8000290 <main+0x70>)
 8000246:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000248:	c313      	stmia	r3!, {r0, r1, r4}
 800024a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800024c:	c313      	stmia	r3!, {r0, r1, r4}
 800024e:	6812      	ldr	r2, [r2, #0]
 8000250:	601a      	str	r2, [r3, #0]
		  .spi_receive = HAL_SPI_Receive,
		  .spi_timeout_ms = 10,
		  .gpio_write = HAL_GPIO_WritePin
  };

  int ret = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
  while(ret != 61){
 8000256:	e00e      	b.n	8000276 <main+0x56>
	  ret = lis3mdl_get_who_am_i(interface);
 8000258:	003b      	movs	r3, r7
 800025a:	466a      	mov	r2, sp
 800025c:	0011      	movs	r1, r2
 800025e:	001a      	movs	r2, r3
 8000260:	3210      	adds	r2, #16
 8000262:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000264:	c131      	stmia	r1!, {r0, r4, r5}
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	6859      	ldr	r1, [r3, #4]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	68db      	ldr	r3, [r3, #12]
 800026e:	f002 febd 	bl	8002fec <lis3mdl_get_who_am_i>
 8000272:	0003      	movs	r3, r0
 8000274:	61fb      	str	r3, [r7, #28]
  while(ret != 61){
 8000276:	69fb      	ldr	r3, [r7, #28]
 8000278:	2b3d      	cmp	r3, #61	@ 0x3d
 800027a:	d1ed      	bne.n	8000258 <main+0x38>
  }
  ret = ret++;
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	61fa      	str	r2, [r7, #28]
 8000282:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8000284:	4b03      	ldr	r3, [pc, #12]	@ (8000294 <main+0x74>)
 8000286:	0018      	movs	r0, r3
 8000288:	f000 ff84 	bl	8001194 <HAL_IWDG_Refresh>
 800028c:	e7fa      	b.n	8000284 <main+0x64>
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	08003188 	.word	0x08003188
 8000294:	20000028 	.word	0x20000028

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b095      	sub	sp, #84	@ 0x54
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2418      	movs	r4, #24
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2338      	movs	r3, #56	@ 0x38
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f002 ff35 	bl	8003118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	2314      	movs	r3, #20
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f002 ff2e 	bl	8003118 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002bc:	4b24      	ldr	r3, [pc, #144]	@ (8000350 <SystemClock_Config+0xb8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a24      	ldr	r2, [pc, #144]	@ (8000354 <SystemClock_Config+0xbc>)
 80002c2:	401a      	ands	r2, r3
 80002c4:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <SystemClock_Config+0xb8>)
 80002c6:	2180      	movs	r1, #128	@ 0x80
 80002c8:	0109      	lsls	r1, r1, #4
 80002ca:	430a      	orrs	r2, r1
 80002cc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002ce:	0021      	movs	r1, r4
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	220a      	movs	r2, #10
 80002d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2201      	movs	r2, #1
 80002da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2210      	movs	r2, #16
 80002e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2201      	movs	r2, #1
 80002e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2202      	movs	r2, #2
 80002ec:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2280      	movs	r2, #128	@ 0x80
 80002f8:	02d2      	lsls	r2, r2, #11
 80002fa:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2280      	movs	r2, #128	@ 0x80
 8000300:	03d2      	lsls	r2, r2, #15
 8000302:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	187b      	adds	r3, r7, r1
 8000306:	0018      	movs	r0, r3
 8000308:	f000 ffc4 	bl	8001294 <HAL_RCC_OscConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000310:	f000 f932 	bl	8000578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	220f      	movs	r2, #15
 8000318:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2203      	movs	r2, #3
 800031e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	22e0      	movs	r2, #224	@ 0xe0
 800032a:	00d2      	lsls	r2, r2, #3
 800032c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2101      	movs	r1, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fb6f 	bl	8001a1c <HAL_RCC_ClockConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000342:	f000 f919 	bl	8000578 <Error_Handler>
  }
}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b015      	add	sp, #84	@ 0x54
 800034c:	bd90      	pop	{r4, r7, pc}
 800034e:	46c0      	nop			@ (mov r8, r8)
 8000350:	40007000 	.word	0x40007000
 8000354:	ffffe7ff 	.word	0xffffe7ff

08000358 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800035c:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <MX_IWDG_Init+0x34>)
 800035e:	4a0c      	ldr	r2, [pc, #48]	@ (8000390 <MX_IWDG_Init+0x38>)
 8000360:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000362:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <MX_IWDG_Init+0x34>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 3;
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <MX_IWDG_Init+0x34>)
 800036a:	2203      	movs	r2, #3
 800036c:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3;
 800036e:	4b07      	ldr	r3, [pc, #28]	@ (800038c <MX_IWDG_Init+0x34>)
 8000370:	2203      	movs	r2, #3
 8000372:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <MX_IWDG_Init+0x34>)
 8000376:	0018      	movs	r0, r3
 8000378:	f000 feba 	bl	80010f0 <HAL_IWDG_Init>
 800037c:	1e03      	subs	r3, r0, #0
 800037e:	d001      	beq.n	8000384 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000380:	f000 f8fa 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000384:	46c0      	nop			@ (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	20000028 	.word	0x20000028
 8000390:	40003000 	.word	0x40003000

08000394 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_SPI2_Init+0x68>)
 800039a:	4a19      	ldr	r2, [pc, #100]	@ (8000400 <MX_SPI2_Init+0x6c>)
 800039c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003a0:	2282      	movs	r2, #130	@ 0x82
 80003a2:	0052      	lsls	r2, r2, #1
 80003a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003a6:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003ac:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003b8:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003be:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003c0:	2280      	movs	r2, #128	@ 0x80
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003c8:	2238      	movs	r2, #56	@ 0x38
 80003ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003cc:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d2:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003d8:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003da:	2200      	movs	r2, #0
 80003dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003de:	4b07      	ldr	r3, [pc, #28]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003e0:	2207      	movs	r2, #7
 80003e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <MX_SPI2_Init+0x68>)
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 fce6 	bl	8001db8 <HAL_SPI_Init>
 80003ec:	1e03      	subs	r3, r0, #0
 80003ee:	d001      	beq.n	80003f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003f0:	f000 f8c2 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003f4:	46c0      	nop			@ (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	20000038 	.word	0x20000038
 8000400:	40003800 	.word	0x40003800

08000404 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800040a:	003b      	movs	r3, r7
 800040c:	0018      	movs	r0, r3
 800040e:	2308      	movs	r3, #8
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f002 fe80 	bl	8003118 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000418:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <MX_TIM6_Init+0x6c>)
 800041a:	4a16      	ldr	r2, [pc, #88]	@ (8000474 <MX_TIM6_Init+0x70>)
 800041c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32;
 800041e:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_TIM6_Init+0x6c>)
 8000420:	2220      	movs	r2, #32
 8000422:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000424:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <MX_TIM6_Init+0x6c>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_TIM6_Init+0x6c>)
 800042c:	2263      	movs	r2, #99	@ 0x63
 800042e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_TIM6_Init+0x6c>)
 8000432:	2280      	movs	r2, #128	@ 0x80
 8000434:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_TIM6_Init+0x6c>)
 8000438:	0018      	movs	r0, r3
 800043a:	f002 fbf1 	bl	8002c20 <HAL_TIM_Base_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000442:	f000 f899 	bl	8000578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000446:	003b      	movs	r3, r7
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044c:	003b      	movs	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000452:	003a      	movs	r2, r7
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_TIM6_Init+0x6c>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f002 fd6f 	bl	8002f3c <HAL_TIMEx_MasterConfigSynchronization>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000462:	f000 f889 	bl	8000578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	46bd      	mov	sp, r7
 800046a:	b002      	add	sp, #8
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	20000120 	.word	0x20000120
 8000474:	40001000 	.word	0x40001000

08000478 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_DMA_Init+0x38>)
 8000480:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_DMA_Init+0x38>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	631a      	str	r2, [r3, #48]	@ 0x30
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_DMA_Init+0x38>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000496:	2200      	movs	r2, #0
 8000498:	2100      	movs	r1, #0
 800049a:	200b      	movs	r0, #11
 800049c:	f000 faf4 	bl	8000a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80004a0:	200b      	movs	r0, #11
 80004a2:	f000 fb06 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b002      	add	sp, #8
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			@ (mov r8, r8)
 80004b0:	40021000 	.word	0x40021000

080004b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b089      	sub	sp, #36	@ 0x24
 80004b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ba:	240c      	movs	r4, #12
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	0018      	movs	r0, r3
 80004c0:	2314      	movs	r3, #20
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f002 fe27 	bl	8003118 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b29      	ldr	r3, [pc, #164]	@ (8000570 <MX_GPIO_Init+0xbc>)
 80004cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004ce:	4b28      	ldr	r3, [pc, #160]	@ (8000570 <MX_GPIO_Init+0xbc>)
 80004d0:	2102      	movs	r1, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004d6:	4b26      	ldr	r3, [pc, #152]	@ (8000570 <MX_GPIO_Init+0xbc>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004da:	2202      	movs	r2, #2
 80004dc:	4013      	ands	r3, r2
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e2:	4b23      	ldr	r3, [pc, #140]	@ (8000570 <MX_GPIO_Init+0xbc>)
 80004e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004e6:	4b22      	ldr	r3, [pc, #136]	@ (8000570 <MX_GPIO_Init+0xbc>)
 80004e8:	2101      	movs	r1, #1
 80004ea:	430a      	orrs	r2, r1
 80004ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ee:	4b20      	ldr	r3, [pc, #128]	@ (8000570 <MX_GPIO_Init+0xbc>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004f2:	2201      	movs	r2, #1
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_RESET);
 80004fa:	2380      	movs	r3, #128	@ 0x80
 80004fc:	015b      	lsls	r3, r3, #5
 80004fe:	481d      	ldr	r0, [pc, #116]	@ (8000574 <MX_GPIO_Init+0xc0>)
 8000500:	2200      	movs	r2, #0
 8000502:	0019      	movs	r1, r3
 8000504:	f000 fdd6 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000508:	23f0      	movs	r3, #240	@ 0xf0
 800050a:	0119      	lsls	r1, r3, #4
 800050c:	23a0      	movs	r3, #160	@ 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	2200      	movs	r2, #0
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fdce 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS2_Pin */
  GPIO_InitStruct.Pin = SS2_Pin;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	0152      	lsls	r2, r2, #5
 800051e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 8000532:	193b      	adds	r3, r7, r4
 8000534:	4a0f      	ldr	r2, [pc, #60]	@ (8000574 <MX_GPIO_Init+0xc0>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f000 fc45 	bl	8000dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	22f0      	movs	r2, #240	@ 0xf0
 8000544:	0112      	lsls	r2, r2, #4
 8000546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	187a      	adds	r2, r7, r1
 800055c:	23a0      	movs	r3, #160	@ 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fc30 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b009      	add	sp, #36	@ 0x24
 800056e:	bd90      	pop	{r4, r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	50000400 	.word	0x50000400

08000578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800057c:	b672      	cpsid	i
}
 800057e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	e7fd      	b.n	8000580 <Error_Handler+0x8>

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800058a:	003b      	movs	r3, r7
 800058c:	0018      	movs	r0, r3
 800058e:	2308      	movs	r3, #8
 8000590:	001a      	movs	r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	f002 fdc0 	bl	8003118 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_MspInit+0x50>)
 800059a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <HAL_MspInit+0x50>)
 800059e:	2101      	movs	r1, #1
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <HAL_MspInit+0x50>)
 80005a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <HAL_MspInit+0x50>)
 80005aa:	2180      	movs	r1, #128	@ 0x80
 80005ac:	0549      	lsls	r1, r1, #21
 80005ae:	430a      	orrs	r2, r1
 80005b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80005b2:	003b      	movs	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fdf7 	bl	80011b4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80005c6:	f000 fe57 	bl	8001278 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	240c      	movs	r4, #12
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	0018      	movs	r0, r3
 80005e6:	2314      	movs	r3, #20
 80005e8:	001a      	movs	r2, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	f002 fd94 	bl	8003118 <memset>
  if(hspi->Instance==SPI2)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a45      	ldr	r2, [pc, #276]	@ (800070c <HAL_SPI_MspInit+0x134>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d000      	beq.n	80005fc <HAL_SPI_MspInit+0x24>
 80005fa:	e083      	b.n	8000704 <HAL_SPI_MspInit+0x12c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80005fc:	4b44      	ldr	r3, [pc, #272]	@ (8000710 <HAL_SPI_MspInit+0x138>)
 80005fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000600:	4b43      	ldr	r3, [pc, #268]	@ (8000710 <HAL_SPI_MspInit+0x138>)
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	01c9      	lsls	r1, r1, #7
 8000606:	430a      	orrs	r2, r1
 8000608:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b41      	ldr	r3, [pc, #260]	@ (8000710 <HAL_SPI_MspInit+0x138>)
 800060c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800060e:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <HAL_SPI_MspInit+0x138>)
 8000610:	2102      	movs	r1, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000616:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <HAL_SPI_MspInit+0x138>)
 8000618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061a:	2202      	movs	r2, #2
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	22e0      	movs	r2, #224	@ 0xe0
 8000626:	0212      	lsls	r2, r2, #8
 8000628:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2202      	movs	r2, #2
 8000630:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2203      	movs	r2, #3
 800063c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000644:	187b      	adds	r3, r7, r1
 8000646:	4a33      	ldr	r2, [pc, #204]	@ (8000714 <HAL_SPI_MspInit+0x13c>)
 8000648:	0019      	movs	r1, r3
 800064a:	0010      	movs	r0, r2
 800064c:	f000 fbbc 	bl	8000dc8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000650:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000652:	4a32      	ldr	r2, [pc, #200]	@ (800071c <HAL_SPI_MspInit+0x144>)
 8000654:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8000656:	4b30      	ldr	r3, [pc, #192]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000658:	2202      	movs	r2, #2
 800065a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800065c:	4b2e      	ldr	r3, [pc, #184]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 800066a:	2280      	movs	r2, #128	@ 0x80
 800066c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fa2f 	bl	8000aec <HAL_DMA_Init>
 800068e:	1e03      	subs	r3, r0, #0
 8000690:	d001      	beq.n	8000696 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000692:	f7ff ff71 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 800069a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <HAL_SPI_MspInit+0x140>)
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80006a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000724 <HAL_SPI_MspInit+0x14c>)
 80006a6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006b0:	2210      	movs	r2, #16
 80006b2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80006d8:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fa06 	bl	8000aec <HAL_DMA_Init>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80006e4:	f7ff ff48 	bl	8000578 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006ec:	649a      	str	r2, [r3, #72]	@ 0x48
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <HAL_SPI_MspInit+0x148>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	201a      	movs	r0, #26
 80006fa:	f000 f9c5 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80006fe:	201a      	movs	r0, #26
 8000700:	f000 f9d7 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b009      	add	sp, #36	@ 0x24
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	40003800 	.word	0x40003800
 8000710:	40021000 	.word	0x40021000
 8000714:	50000400 	.word	0x50000400
 8000718:	20000090 	.word	0x20000090
 800071c:	40020044 	.word	0x40020044
 8000720:	200000d8 	.word	0x200000d8
 8000724:	40020058 	.word	0x40020058

08000728 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <HAL_TIM_Base_MspInit+0x38>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d10d      	bne.n	8000756 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_TIM_Base_MspInit+0x3c>)
 800073c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <HAL_TIM_Base_MspInit+0x3c>)
 8000740:	2110      	movs	r1, #16
 8000742:	430a      	orrs	r2, r1
 8000744:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	2011      	movs	r0, #17
 800074c:	f000 f99c 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000750:	2011      	movs	r0, #17
 8000752:	f000 f9ae 	bl	8000ab2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	40001000 	.word	0x40001000
 8000764:	40021000 	.word	0x40021000

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000790:	f000 f8b2 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fa61 	bl	8000c6a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80007a8:	4b04      	ldr	r3, [pc, #16]	@ (80007bc <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fa5d 	bl	8000c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	20000090 	.word	0x20000090
 80007bc:	200000d8 	.word	0x200000d8

080007c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007c4:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <TIM6_DAC_IRQHandler+0x14>)
 80007c6:	0018      	movs	r0, r3
 80007c8:	f002 fa6a 	bl	8002ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	20000120 	.word	0x20000120

080007d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80007dc:	4b03      	ldr	r3, [pc, #12]	@ (80007ec <SPI2_IRQHandler+0x14>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 ffb0 	bl	8002744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	20000038 	.word	0x20000038

080007f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490e      	ldr	r1, [pc, #56]	@ (800083c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0b      	ldr	r2, [pc, #44]	@ (8000844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0b      	ldr	r4, [pc, #44]	@ (8000848 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000826:	f7ff ffe3 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f002 fc7d 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082e:	f7ff fcf7 	bl	8000220 <main>

08000832 <LoopForever>:

LoopForever:
    b LoopForever
 8000832:	e7fe      	b.n	8000832 <LoopForever>
  ldr   r0, =_estack
 8000834:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000840:	080031c8 	.word	0x080031c8
  ldr r2, =_sbss
 8000844:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000848:	20000164 	.word	0x20000164

0800084c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC1_COMP_IRQHandler>
	...

08000850 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_Init+0x3c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <HAL_Init+0x3c>)
 8000862:	2140      	movs	r1, #64	@ 0x40
 8000864:	430a      	orrs	r2, r1
 8000866:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f811 	bl	8000890 <HAL_InitTick>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d003      	beq.n	800087a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
 8000878:	e001      	b.n	800087e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087a:	f7ff fe83 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
}
 8000882:	0018      	movs	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <HAL_InitTick+0x5c>)
 800089a:	681c      	ldr	r4, [r3, #0]
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_InitTick+0x60>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	0019      	movs	r1, r3
 80008a2:	23fa      	movs	r3, #250	@ 0xfa
 80008a4:	0098      	lsls	r0, r3, #2
 80008a6:	f7ff fc2f 	bl	8000108 <__udivsi3>
 80008aa:	0003      	movs	r3, r0
 80008ac:	0019      	movs	r1, r3
 80008ae:	0020      	movs	r0, r4
 80008b0:	f7ff fc2a 	bl	8000108 <__udivsi3>
 80008b4:	0003      	movs	r3, r0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 f90b 	bl	8000ad2 <HAL_SYSTICK_Config>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c0:	2301      	movs	r3, #1
 80008c2:	e00f      	b.n	80008e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d80b      	bhi.n	80008e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 f8d8 	bl	8000a88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_InitTick+0x64>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b003      	add	sp, #12
 80008ea:	bd90      	pop	{r4, r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	18d2      	adds	r2, r2, r3
 8000908:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <HAL_IncTick+0x20>)
 800090a:	601a      	str	r2, [r3, #0]
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	20000008 	.word	0x20000008
 8000918:	20000160 	.word	0x20000160

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	@ (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	0018      	movs	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	20000160 	.word	0x20000160

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	0002      	movs	r2, r0
 8000938:	1dfb      	adds	r3, r7, #7
 800093a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b7f      	cmp	r3, #127	@ 0x7f
 8000942:	d809      	bhi.n	8000958 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	001a      	movs	r2, r3
 800094a:	231f      	movs	r3, #31
 800094c:	401a      	ands	r2, r3
 800094e:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <__NVIC_EnableIRQ+0x30>)
 8000950:	2101      	movs	r1, #1
 8000952:	4091      	lsls	r1, r2
 8000954:	000a      	movs	r2, r1
 8000956:	601a      	str	r2, [r3, #0]
  }
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}
 8000960:	e000e100 	.word	0xe000e100

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	0002      	movs	r2, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b7f      	cmp	r3, #127	@ 0x7f
 8000978:	d828      	bhi.n	80009cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a38 <__NVIC_SetPriority+0xd4>)
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b25b      	sxtb	r3, r3
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	33c0      	adds	r3, #192	@ 0xc0
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	589b      	ldr	r3, [r3, r2]
 800098a:	1dfa      	adds	r2, r7, #7
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	0011      	movs	r1, r2
 8000990:	2203      	movs	r2, #3
 8000992:	400a      	ands	r2, r1
 8000994:	00d2      	lsls	r2, r2, #3
 8000996:	21ff      	movs	r1, #255	@ 0xff
 8000998:	4091      	lsls	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	43d2      	mvns	r2, r2
 800099e:	401a      	ands	r2, r3
 80009a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	22ff      	movs	r2, #255	@ 0xff
 80009a8:	401a      	ands	r2, r3
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	0018      	movs	r0, r3
 80009b0:	2303      	movs	r3, #3
 80009b2:	4003      	ands	r3, r0
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <__NVIC_SetPriority+0xd4>)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b25b      	sxtb	r3, r3
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	430a      	orrs	r2, r1
 80009c4:	33c0      	adds	r3, #192	@ 0xc0
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ca:	e031      	b.n	8000a30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a3c <__NVIC_SetPriority+0xd8>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0019      	movs	r1, r3
 80009d4:	230f      	movs	r3, #15
 80009d6:	400b      	ands	r3, r1
 80009d8:	3b08      	subs	r3, #8
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	3306      	adds	r3, #6
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	3304      	adds	r3, #4
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1dfa      	adds	r2, r7, #7
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	0011      	movs	r1, r2
 80009ec:	2203      	movs	r2, #3
 80009ee:	400a      	ands	r2, r1
 80009f0:	00d2      	lsls	r2, r2, #3
 80009f2:	21ff      	movs	r1, #255	@ 0xff
 80009f4:	4091      	lsls	r1, r2
 80009f6:	000a      	movs	r2, r1
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	401a      	ands	r2, r3
 80009fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	019b      	lsls	r3, r3, #6
 8000a02:	22ff      	movs	r2, #255	@ 0xff
 8000a04:	401a      	ands	r2, r3
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	4003      	ands	r3, r0
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a14:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <__NVIC_SetPriority+0xd8>)
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4023      	ands	r3, r4
 8000a20:	3b08      	subs	r3, #8
 8000a22:	089b      	lsrs	r3, r3, #2
 8000a24:	430a      	orrs	r2, r1
 8000a26:	3306      	adds	r3, #6
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	18c3      	adds	r3, r0, r3
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	601a      	str	r2, [r3, #0]
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b003      	add	sp, #12
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	1e5a      	subs	r2, r3, #1
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	045b      	lsls	r3, r3, #17
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d301      	bcc.n	8000a58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a54:	2301      	movs	r3, #1
 8000a56:	e010      	b.n	8000a7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <SysTick_Config+0x44>)
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	3a01      	subs	r2, #1
 8000a5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
 8000a64:	2103      	movs	r1, #3
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff ff7c 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <SysTick_Config+0x44>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <SysTick_Config+0x44>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	210f      	movs	r1, #15
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	1c02      	adds	r2, r0, #0
 8000a98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ff5d 	bl	8000964 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	0002      	movs	r2, r0
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b25b      	sxtb	r3, r3
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ff33 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ffaf 	bl	8000a40 <SysTick_Config>
 8000ae2:	0003      	movs	r3, r0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e061      	b.n	8000bc2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a32      	ldr	r2, [pc, #200]	@ (8000bcc <HAL_DMA_Init+0xe0>)
 8000b04:	4694      	mov	ip, r2
 8000b06:	4463      	add	r3, ip
 8000b08:	2114      	movs	r1, #20
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fafc 	bl	8000108 <__udivsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	009a      	lsls	r2, r3, #2
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd0 <HAL_DMA_Init+0xe4>)
 8000b1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2225      	movs	r2, #37	@ 0x25
 8000b22:	2102      	movs	r1, #2
 8000b24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	4a28      	ldr	r2, [pc, #160]	@ (8000bd4 <HAL_DMA_Init+0xe8>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	01db      	lsls	r3, r3, #7
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d018      	beq.n	8000baa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_DMA_Init+0xec>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b80:	211c      	movs	r1, #28
 8000b82:	400b      	ands	r3, r1
 8000b84:	210f      	movs	r1, #15
 8000b86:	4099      	lsls	r1, r3
 8000b88:	000b      	movs	r3, r1
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_DMA_Init+0xec>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_DMA_Init+0xec>)
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	201c      	movs	r0, #28
 8000ba0:	4003      	ands	r3, r0
 8000ba2:	409a      	lsls	r2, r3
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <HAL_DMA_Init+0xec>)
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2225      	movs	r2, #37	@ 0x25
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2224      	movs	r2, #36	@ 0x24
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	bffdfff8 	.word	0xbffdfff8
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	ffff800f 	.word	0xffff800f
 8000bd8:	400200a8 	.word	0x400200a8

08000bdc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be4:	210f      	movs	r1, #15
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2225      	movs	r2, #37	@ 0x25
 8000bf0:	5c9b      	ldrb	r3, [r3, r2]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d006      	beq.n	8000c06 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2204      	movs	r2, #4
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2201      	movs	r2, #1
 8000c02:	701a      	strb	r2, [r3, #0]
 8000c04:	e02a      	b.n	8000c5c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	210e      	movs	r1, #14
 8000c12:	438a      	bics	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	438a      	bics	r2, r1
 8000c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	221c      	movs	r2, #28
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	2101      	movs	r1, #1
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2225      	movs	r2, #37	@ 0x25
 8000c3e:	2101      	movs	r1, #1
 8000c40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2224      	movs	r2, #36	@ 0x24
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d004      	beq.n	8000c5c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	0010      	movs	r0, r2
 8000c5a:	4798      	blx	r3
    }
  }
  return status;
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	781b      	ldrb	r3, [r3, #0]
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b004      	add	sp, #16
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b084      	sub	sp, #16
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	221c      	movs	r2, #28
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	409a      	lsls	r2, r3
 8000c8e:	0013      	movs	r3, r2
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4013      	ands	r3, r2
 8000c94:	d026      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0x7a>
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d022      	beq.n	8000ce4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2220      	movs	r2, #32
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d107      	bne.n	8000cba <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	438a      	bics	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	221c      	movs	r2, #28
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d100      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x6e>
 8000cd6:	e071      	b.n	8000dbc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	0010      	movs	r0, r2
 8000ce0:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000ce2:	e06b      	b.n	8000dbc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce8:	221c      	movs	r2, #28
 8000cea:	4013      	ands	r3, r2
 8000cec:	2202      	movs	r2, #2
 8000cee:	409a      	lsls	r2, r3
 8000cf0:	0013      	movs	r3, r2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d02d      	beq.n	8000d54 <HAL_DMA_IRQHandler+0xea>
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d029      	beq.n	8000d54 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2220      	movs	r2, #32
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d10b      	bne.n	8000d24 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	210a      	movs	r1, #10
 8000d18:	438a      	bics	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2225      	movs	r2, #37	@ 0x25
 8000d20:	2101      	movs	r1, #1
 8000d22:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d28:	221c      	movs	r2, #28
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d30:	2102      	movs	r1, #2
 8000d32:	4091      	lsls	r1, r2
 8000d34:	000a      	movs	r2, r1
 8000d36:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2224      	movs	r2, #36	@ 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d039      	beq.n	8000dbc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	0010      	movs	r0, r2
 8000d50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d52:	e033      	b.n	8000dbc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d58:	221c      	movs	r2, #28
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2208      	movs	r2, #8
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4013      	ands	r3, r2
 8000d66:	d02a      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x154>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2208      	movs	r2, #8
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d026      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	210e      	movs	r1, #14
 8000d7c:	438a      	bics	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d84:	221c      	movs	r2, #28
 8000d86:	401a      	ands	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2225      	movs	r2, #37	@ 0x25
 8000d9e:	2101      	movs	r1, #1
 8000da0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2224      	movs	r2, #36	@ 0x24
 8000da6:	2100      	movs	r1, #0
 8000da8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	0010      	movs	r0, r2
 8000dba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46c0      	nop			@ (mov r8, r8)
}
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dde:	e14f      	b.n	8001080 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d100      	bne.n	8000df8 <HAL_GPIO_Init+0x30>
 8000df6:	e140      	b.n	800107a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	43da      	mvns	r2, r3
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d017      	beq.n	8000eae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	58d3      	ldr	r3, [r2, r3]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2207      	movs	r2, #7
 8000ecc:	4013      	ands	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	400b      	ands	r3, r1
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	6939      	ldr	r1, [r7, #16]
 8000f00:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	401a      	ands	r2, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685a      	ldr	r2, [r3, #4]
 8000f3a:	23c0      	movs	r3, #192	@ 0xc0
 8000f3c:	029b      	lsls	r3, r3, #10
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x17c>
 8000f42:	e09a      	b.n	800107a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8000f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f48:	4b53      	ldr	r3, [pc, #332]	@ (8001098 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f50:	4a52      	ldr	r2, [pc, #328]	@ (800109c <HAL_GPIO_Init+0x2d4>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	589b      	ldr	r3, [r3, r2]
 8000f5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	23a0      	movs	r3, #160	@ 0xa0
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x1ea>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a47      	ldr	r2, [pc, #284]	@ (80010a0 <HAL_GPIO_Init+0x2d8>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1e6>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a46      	ldr	r2, [pc, #280]	@ (80010a4 <HAL_GPIO_Init+0x2dc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1e2>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a45      	ldr	r2, [pc, #276]	@ (80010a8 <HAL_GPIO_Init+0x2e0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1de>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a44      	ldr	r2, [pc, #272]	@ (80010ac <HAL_GPIO_Init+0x2e4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1da>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x1ec>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	400a      	ands	r2, r1
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	@ (800109c <HAL_GPIO_Init+0x2d4>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b37      	ldr	r3, [pc, #220]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	035b      	lsls	r3, r3, #13
 8000fea:	4013      	ands	r3, r2
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43da      	mvns	r2, r3
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	039b      	lsls	r3, r3, #14
 8001014:	4013      	ands	r3, r2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001020:	4b23      	ldr	r3, [pc, #140]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	029b      	lsls	r3, r3, #10
 800103e:	4013      	ands	r3, r2
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	025b      	lsls	r3, r3, #9
 8001068:	4013      	ands	r3, r2
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	40da      	lsrs	r2, r3
 8001088:	1e13      	subs	r3, r2, #0
 800108a:	d000      	beq.n	800108e <HAL_GPIO_Init+0x2c6>
 800108c:	e6a8      	b.n	8000de0 <HAL_GPIO_Init+0x18>
  }
}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	50000400 	.word	0x50000400
 80010a4:	50000800 	.word	0x50000800
 80010a8:	50000c00 	.word	0x50000c00
 80010ac:	50001c00 	.word	0x50001c00
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	0008      	movs	r0, r1
 80010be:	0011      	movs	r1, r2
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	1c7b      	adds	r3, r7, #1
 80010c8:	1c0a      	adds	r2, r1, #0
 80010ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010cc:	1c7b      	adds	r3, r7, #1
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d4:	1cbb      	adds	r3, r7, #2
 80010d6:	881a      	ldrh	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010de:	1cbb      	adds	r3, r7, #2
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e03d      	b.n	800117e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a20      	ldr	r2, [pc, #128]	@ (8001188 <HAL_IWDG_Init+0x98>)
 8001108:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <HAL_IWDG_Init+0x9c>)
 8001110:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6852      	ldr	r2, [r2, #4]
 800111a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6892      	ldr	r2, [r2, #8]
 8001124:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001126:	f7ff fbf9 	bl	800091c <HAL_GetTick>
 800112a:	0003      	movs	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800112e:	e00e      	b.n	800114e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001130:	f7ff fbf4 	bl	800091c <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b2a      	cmp	r3, #42	@ 0x2a
 800113c:	d907      	bls.n	800114e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2207      	movs	r2, #7
 8001146:	4013      	ands	r3, r2
 8001148:	d001      	beq.n	800114e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e017      	b.n	800117e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2207      	movs	r2, #7
 8001156:	4013      	ands	r3, r2
 8001158:	d1ea      	bne.n	8001130 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d005      	beq.n	8001174 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68d2      	ldr	r2, [r2, #12]
 8001170:	611a      	str	r2, [r3, #16]
 8001172:	e003      	b.n	800117c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <HAL_IWDG_Init+0xa0>)
 800117a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	0000cccc 	.word	0x0000cccc
 800118c:	00005555 	.word	0x00005555
 8001190:	0000aaaa 	.word	0x0000aaaa

08001194 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a03      	ldr	r2, [pc, #12]	@ (80011b0 <HAL_IWDG_Refresh+0x1c>)
 80011a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	0018      	movs	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	b002      	add	sp, #8
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	0000aaaa 	.word	0x0000aaaa

080011b4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <HAL_PWR_ConfigPVD+0xb8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	22e0      	movs	r2, #224	@ 0xe0
 80011c2:	4393      	bics	r3, r2
 80011c4:	0019      	movs	r1, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b28      	ldr	r3, [pc, #160]	@ (800126c <HAL_PWR_ConfigPVD+0xb8>)
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80011d0:	4b27      	ldr	r3, [pc, #156]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011d6:	4927      	ldr	r1, [pc, #156]	@ (8001274 <HAL_PWR_ConfigPVD+0xc0>)
 80011d8:	400a      	ands	r2, r1
 80011da:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80011dc:	4b24      	ldr	r3, [pc, #144]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011e2:	4924      	ldr	r1, [pc, #144]	@ (8001274 <HAL_PWR_ConfigPVD+0xc0>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80011e8:	4b21      	ldr	r3, [pc, #132]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011ee:	4921      	ldr	r1, [pc, #132]	@ (8001274 <HAL_PWR_ConfigPVD+0xc0>)
 80011f0:	400a      	ands	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80011f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 80011fa:	491e      	ldr	r1, [pc, #120]	@ (8001274 <HAL_PWR_ConfigPVD+0xc0>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	2380      	movs	r3, #128	@ 0x80
 8001206:	025b      	lsls	r3, r3, #9
 8001208:	4013      	ands	r3, r2
 800120a:	d006      	beq.n	800121a <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 8001212:	2180      	movs	r1, #128	@ 0x80
 8001214:	0249      	lsls	r1, r1, #9
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	029b      	lsls	r3, r3, #10
 8001222:	4013      	ands	r3, r2
 8001224:	d006      	beq.n	8001234 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 800122c:	2180      	movs	r1, #128	@ 0x80
 800122e:	0249      	lsls	r1, r1, #9
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	d006      	beq.n	800124c <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	0249      	lsls	r1, r1, #9
 8001248:	430a      	orrs	r2, r1
 800124a:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d006      	beq.n	8001264 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <HAL_PWR_ConfigPVD+0xbc>)
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0249      	lsls	r1, r1, #9
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]
  }
}
 8001264:	46c0      	nop			@ (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40007000 	.word	0x40007000
 8001270:	40010400 	.word	0x40010400
 8001274:	fffeffff 	.word	0xfffeffff

08001278 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <HAL_PWR_EnablePVD+0x18>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_PWR_EnablePVD+0x18>)
 8001282:	2110      	movs	r1, #16
 8001284:	430a      	orrs	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	40007000 	.word	0x40007000

08001294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b5b0      	push	{r4, r5, r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f000 fbaf 	bl	8001a06 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a8:	4bcf      	ldr	r3, [pc, #828]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	220c      	movs	r2, #12
 80012ae:	4013      	ands	r3, r2
 80012b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b2:	4bcd      	ldr	r3, [pc, #820]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	4013      	ands	r3, r2
 80012bc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	4013      	ands	r3, r2
 80012c6:	d100      	bne.n	80012ca <HAL_RCC_OscConfig+0x36>
 80012c8:	e07e      	b.n	80013c8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ca:	6a3b      	ldr	r3, [r7, #32]
 80012cc:	2b08      	cmp	r3, #8
 80012ce:	d007      	beq.n	80012e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x68>
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	429a      	cmp	r2, r3
 80012de:	d10d      	bne.n	80012fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e0:	4bc1      	ldr	r3, [pc, #772]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	029b      	lsls	r3, r3, #10
 80012e8:	4013      	ands	r3, r2
 80012ea:	d100      	bne.n	80012ee <HAL_RCC_OscConfig+0x5a>
 80012ec:	e06b      	b.n	80013c6 <HAL_RCC_OscConfig+0x132>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d167      	bne.n	80013c6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f000 fb85 	bl	8001a06 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	025b      	lsls	r3, r3, #9
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x84>
 8001308:	4bb7      	ldr	r3, [pc, #732]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4bb6      	ldr	r3, [pc, #728]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800130e:	2180      	movs	r1, #128	@ 0x80
 8001310:	0249      	lsls	r1, r1, #9
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e027      	b.n	8001368 <HAL_RCC_OscConfig+0xd4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	23a0      	movs	r3, #160	@ 0xa0
 800131e:	02db      	lsls	r3, r3, #11
 8001320:	429a      	cmp	r2, r3
 8001322:	d10e      	bne.n	8001342 <HAL_RCC_OscConfig+0xae>
 8001324:	4bb0      	ldr	r3, [pc, #704]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4baf      	ldr	r3, [pc, #700]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800132a:	2180      	movs	r1, #128	@ 0x80
 800132c:	02c9      	lsls	r1, r1, #11
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	4bad      	ldr	r3, [pc, #692]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4bac      	ldr	r3, [pc, #688]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	0249      	lsls	r1, r1, #9
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e012      	b.n	8001368 <HAL_RCC_OscConfig+0xd4>
 8001342:	4ba9      	ldr	r3, [pc, #676]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4ba8      	ldr	r3, [pc, #672]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001348:	49a8      	ldr	r1, [pc, #672]	@ (80015ec <HAL_RCC_OscConfig+0x358>)
 800134a:	400a      	ands	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4ba6      	ldr	r3, [pc, #664]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	4013      	ands	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4ba2      	ldr	r3, [pc, #648]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4ba1      	ldr	r3, [pc, #644]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001362:	49a3      	ldr	r1, [pc, #652]	@ (80015f0 <HAL_RCC_OscConfig+0x35c>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d015      	beq.n	800139c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fad4 	bl	800091c <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001378:	e009      	b.n	800138e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137a:	f7ff facf 	bl	800091c <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	@ 0x64
 8001386:	d902      	bls.n	800138e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	f000 fb3c 	bl	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138e:	4b96      	ldr	r3, [pc, #600]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d0ef      	beq.n	800137a <HAL_RCC_OscConfig+0xe6>
 800139a:	e015      	b.n	80013c8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fabe 	bl	800091c <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a6:	f7ff fab9 	bl	800091c <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	@ 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e326      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b8:	4b8b      	ldr	r3, [pc, #556]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x112>
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d100      	bne.n	80013d4 <HAL_RCC_OscConfig+0x140>
 80013d2:	e08b      	b.n	80014ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d005      	beq.n	80013ec <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d13e      	bne.n	8001464 <HAL_RCC_OscConfig+0x1d0>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d13b      	bne.n	8001464 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013ec:	4b7e      	ldr	r3, [pc, #504]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2204      	movs	r2, #4
 80013f2:	4013      	ands	r3, r2
 80013f4:	d004      	beq.n	8001400 <HAL_RCC_OscConfig+0x16c>
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e302      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b79      	ldr	r3, [pc, #484]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a7b      	ldr	r2, [pc, #492]	@ (80015f4 <HAL_RCC_OscConfig+0x360>)
 8001406:	4013      	ands	r3, r2
 8001408:	0019      	movs	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	021a      	lsls	r2, r3, #8
 8001410:	4b75      	ldr	r3, [pc, #468]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001412:	430a      	orrs	r2, r1
 8001414:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001416:	4b74      	ldr	r3, [pc, #464]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2209      	movs	r2, #9
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	4b71      	ldr	r3, [pc, #452]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001428:	f000 fc40 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 800142c:	0001      	movs	r1, r0
 800142e:	4b6e      	ldr	r3, [pc, #440]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	220f      	movs	r2, #15
 8001436:	4013      	ands	r3, r2
 8001438:	4a6f      	ldr	r2, [pc, #444]	@ (80015f8 <HAL_RCC_OscConfig+0x364>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	000a      	movs	r2, r1
 800143e:	40da      	lsrs	r2, r3
 8001440:	4b6e      	ldr	r3, [pc, #440]	@ (80015fc <HAL_RCC_OscConfig+0x368>)
 8001442:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001444:	4b6e      	ldr	r3, [pc, #440]	@ (8001600 <HAL_RCC_OscConfig+0x36c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2513      	movs	r5, #19
 800144a:	197c      	adds	r4, r7, r5
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fa1f 	bl	8000890 <HAL_InitTick>
 8001452:	0003      	movs	r3, r0
 8001454:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001456:	197b      	adds	r3, r7, r5
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d046      	beq.n	80014ec <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800145e:	197b      	adds	r3, r7, r5
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	e2d0      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d027      	beq.n	80014ba <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800146a:	4b5f      	ldr	r3, [pc, #380]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2209      	movs	r2, #9
 8001470:	4393      	bics	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	4b5c      	ldr	r3, [pc, #368]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fa4e 	bl	800091c <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001486:	f7ff fa49 	bl	800091c <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e2b6      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2204      	movs	r2, #4
 800149e:	4013      	ands	r3, r2
 80014a0:	d0f1      	beq.n	8001486 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a2:	4b51      	ldr	r3, [pc, #324]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a53      	ldr	r2, [pc, #332]	@ (80015f4 <HAL_RCC_OscConfig+0x360>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	0019      	movs	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	021a      	lsls	r2, r3, #8
 80014b2:	4b4d      	ldr	r3, [pc, #308]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	e018      	b.n	80014ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ba:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	438a      	bics	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c6:	f7ff fa29 	bl	800091c <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fa24 	bl	800091c <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e291      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014e2:	4b41      	ldr	r3, [pc, #260]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1f1      	bne.n	80014d0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2210      	movs	r2, #16
 80014f2:	4013      	ands	r3, r2
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x264>
 80014f6:	e0a1      	b.n	800163c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d140      	bne.n	8001580 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014fe:	4b3a      	ldr	r3, [pc, #232]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x282>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e277      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001516:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <HAL_RCC_OscConfig+0x370>)
 800151c:	4013      	ands	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001524:	4b30      	ldr	r3, [pc, #192]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152a:	4b2f      	ldr	r3, [pc, #188]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	0a19      	lsrs	r1, r3, #8
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	061a      	lsls	r2, r3, #24
 8001538:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001542:	0b5b      	lsrs	r3, r3, #13
 8001544:	3301      	adds	r3, #1
 8001546:	2280      	movs	r2, #128	@ 0x80
 8001548:	0212      	lsls	r2, r2, #8
 800154a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	210f      	movs	r1, #15
 8001554:	400b      	ands	r3, r1
 8001556:	4928      	ldr	r1, [pc, #160]	@ (80015f8 <HAL_RCC_OscConfig+0x364>)
 8001558:	5ccb      	ldrb	r3, [r1, r3]
 800155a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800155c:	4b27      	ldr	r3, [pc, #156]	@ (80015fc <HAL_RCC_OscConfig+0x368>)
 800155e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <HAL_RCC_OscConfig+0x36c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2513      	movs	r5, #19
 8001566:	197c      	adds	r4, r7, r5
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff f991 	bl	8000890 <HAL_InitTick>
 800156e:	0003      	movs	r3, r0
 8001570:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001572:	197b      	adds	r3, r7, r5
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d060      	beq.n	800163c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800157a:	197b      	adds	r3, r7, r5
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	e242      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03f      	beq.n	8001608 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001588:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 800158e:	2180      	movs	r1, #128	@ 0x80
 8001590:	0049      	lsls	r1, r1, #1
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff f9c1 	bl	800091c <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a0:	f7ff f9bc 	bl	800091c <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e229      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <HAL_RCC_OscConfig+0x370>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	0019      	movs	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d2:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	0a19      	lsrs	r1, r3, #8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	061a      	lsls	r2, r3, #24
 80015e0:	4b01      	ldr	r3, [pc, #4]	@ (80015e8 <HAL_RCC_OscConfig+0x354>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	e029      	b.n	800163c <HAL_RCC_OscConfig+0x3a8>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	fffbffff 	.word	0xfffbffff
 80015f4:	ffffe0ff 	.word	0xffffe0ff
 80015f8:	080031a4 	.word	0x080031a4
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004
 8001604:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001608:	4bbd      	ldr	r3, [pc, #756]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4bbc      	ldr	r3, [pc, #752]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 800160e:	49bd      	ldr	r1, [pc, #756]	@ (8001904 <HAL_RCC_OscConfig+0x670>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff f982 	bl	800091c <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161e:	f7ff f97d 	bl	800091c <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1ea      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001630:	4bb3      	ldr	r3, [pc, #716]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	4013      	ands	r3, r2
 8001644:	d036      	beq.n	80016b4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d019      	beq.n	8001682 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164e:	4bac      	ldr	r3, [pc, #688]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001650:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001652:	4bab      	ldr	r3, [pc, #684]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001654:	2101      	movs	r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff f95f 	bl	800091c <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff f95a 	bl	800091c <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e1c7      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001676:	4ba2      	ldr	r3, [pc, #648]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d0f1      	beq.n	8001664 <HAL_RCC_OscConfig+0x3d0>
 8001680:	e018      	b.n	80016b4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001682:	4b9f      	ldr	r3, [pc, #636]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001684:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001686:	4b9e      	ldr	r3, [pc, #632]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001688:	2101      	movs	r1, #1
 800168a:	438a      	bics	r2, r1
 800168c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff f945 	bl	800091c <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff f940 	bl	800091c <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1ad      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016aa:	4b95      	ldr	r3, [pc, #596]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80016ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d1f1      	bne.n	8001698 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2204      	movs	r2, #4
 80016ba:	4013      	ands	r3, r2
 80016bc:	d100      	bne.n	80016c0 <HAL_RCC_OscConfig+0x42c>
 80016be:	e0ae      	b.n	800181e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c0:	2027      	movs	r0, #39	@ 0x27
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c8:	4b8d      	ldr	r3, [pc, #564]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80016ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	055b      	lsls	r3, r3, #21
 80016d0:	4013      	ands	r3, r2
 80016d2:	d109      	bne.n	80016e8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b8a      	ldr	r3, [pc, #552]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80016d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016d8:	4b89      	ldr	r3, [pc, #548]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	0549      	lsls	r1, r1, #21
 80016de:	430a      	orrs	r2, r1
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b87      	ldr	r3, [pc, #540]	@ (8001908 <HAL_RCC_OscConfig+0x674>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	d11a      	bne.n	800172a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f4:	4b84      	ldr	r3, [pc, #528]	@ (8001908 <HAL_RCC_OscConfig+0x674>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b83      	ldr	r3, [pc, #524]	@ (8001908 <HAL_RCC_OscConfig+0x674>)
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	0049      	lsls	r1, r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff f90b 	bl	800091c <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170c:	f7ff f906 	bl	800091c <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e173      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b7a      	ldr	r3, [pc, #488]	@ (8001908 <HAL_RCC_OscConfig+0x674>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4013      	ands	r3, r2
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	2380      	movs	r3, #128	@ 0x80
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	429a      	cmp	r2, r3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_OscConfig+0x4b2>
 8001736:	4b72      	ldr	r3, [pc, #456]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001738:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800173a:	4b71      	ldr	r3, [pc, #452]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	0049      	lsls	r1, r1, #1
 8001740:	430a      	orrs	r2, r1
 8001742:	651a      	str	r2, [r3, #80]	@ 0x50
 8001744:	e031      	b.n	80017aa <HAL_RCC_OscConfig+0x516>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10c      	bne.n	8001768 <HAL_RCC_OscConfig+0x4d4>
 800174e:	4b6c      	ldr	r3, [pc, #432]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001750:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001752:	4b6b      	ldr	r3, [pc, #428]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001754:	496b      	ldr	r1, [pc, #428]	@ (8001904 <HAL_RCC_OscConfig+0x670>)
 8001756:	400a      	ands	r2, r1
 8001758:	651a      	str	r2, [r3, #80]	@ 0x50
 800175a:	4b69      	ldr	r3, [pc, #420]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 800175c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800175e:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001760:	496a      	ldr	r1, [pc, #424]	@ (800190c <HAL_RCC_OscConfig+0x678>)
 8001762:	400a      	ands	r2, r1
 8001764:	651a      	str	r2, [r3, #80]	@ 0x50
 8001766:	e020      	b.n	80017aa <HAL_RCC_OscConfig+0x516>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	23a0      	movs	r3, #160	@ 0xa0
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	429a      	cmp	r2, r3
 8001772:	d10e      	bne.n	8001792 <HAL_RCC_OscConfig+0x4fe>
 8001774:	4b62      	ldr	r3, [pc, #392]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001776:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001778:	4b61      	ldr	r3, [pc, #388]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 800177a:	2180      	movs	r1, #128	@ 0x80
 800177c:	00c9      	lsls	r1, r1, #3
 800177e:	430a      	orrs	r2, r1
 8001780:	651a      	str	r2, [r3, #80]	@ 0x50
 8001782:	4b5f      	ldr	r3, [pc, #380]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001784:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001786:	4b5e      	ldr	r3, [pc, #376]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001788:	2180      	movs	r1, #128	@ 0x80
 800178a:	0049      	lsls	r1, r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x516>
 8001792:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001794:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001796:	4b5a      	ldr	r3, [pc, #360]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001798:	495a      	ldr	r1, [pc, #360]	@ (8001904 <HAL_RCC_OscConfig+0x670>)
 800179a:	400a      	ands	r2, r1
 800179c:	651a      	str	r2, [r3, #80]	@ 0x50
 800179e:	4b58      	ldr	r3, [pc, #352]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80017a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017a2:	4b57      	ldr	r3, [pc, #348]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80017a4:	4959      	ldr	r1, [pc, #356]	@ (800190c <HAL_RCC_OscConfig+0x678>)
 80017a6:	400a      	ands	r2, r1
 80017a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff f8b3 	bl	800091c <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017ba:	e009      	b.n	80017d0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7ff f8ae 	bl	800091c <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	4a52      	ldr	r2, [pc, #328]	@ (8001910 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e11a      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80017d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017d4:	2380      	movs	r3, #128	@ 0x80
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d0ef      	beq.n	80017bc <HAL_RCC_OscConfig+0x528>
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f89d 	bl	800091c <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017e6:	e009      	b.n	80017fc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff f898 	bl	800091c <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a47      	ldr	r2, [pc, #284]	@ (8001910 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e104      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017fc:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80017fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d1ef      	bne.n	80017e8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001808:	2327      	movs	r3, #39	@ 0x27
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d105      	bne.n	800181e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001816:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001818:	493e      	ldr	r1, [pc, #248]	@ (8001914 <HAL_RCC_OscConfig+0x680>)
 800181a:	400a      	ands	r2, r1
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2220      	movs	r2, #32
 8001824:	4013      	ands	r3, r2
 8001826:	d049      	beq.n	80018bc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d026      	beq.n	800187e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001836:	2101      	movs	r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 800183e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001840:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001842:	2101      	movs	r1, #1
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
 8001848:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <HAL_RCC_OscConfig+0x684>)
 800184a:	6a1a      	ldr	r2, [r3, #32]
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <HAL_RCC_OscConfig+0x684>)
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	0189      	lsls	r1, r1, #6
 8001852:	430a      	orrs	r2, r1
 8001854:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7ff f861 	bl	800091c <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001860:	f7ff f85c 	bl	800091c <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e0c9      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d0f1      	beq.n	8001860 <HAL_RCC_OscConfig+0x5cc>
 800187c:	e01e      	b.n	80018bc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4b1f      	ldr	r3, [pc, #124]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 8001884:	2101      	movs	r1, #1
 8001886:	438a      	bics	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <HAL_RCC_OscConfig+0x684>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <HAL_RCC_OscConfig+0x684>)
 8001890:	4922      	ldr	r1, [pc, #136]	@ (800191c <HAL_RCC_OscConfig+0x688>)
 8001892:	400a      	ands	r2, r1
 8001894:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff f841 	bl	800091c <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a0:	f7ff f83c 	bl	800091c <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0a9      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018b2:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2202      	movs	r2, #2
 80018b8:	4013      	ands	r3, r2
 80018ba:	d1f1      	bne.n	80018a0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0x632>
 80018c4:	e09e      	b.n	8001a04 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d100      	bne.n	80018ce <HAL_RCC_OscConfig+0x63a>
 80018cc:	e077      	b.n	80019be <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d158      	bne.n	8001988 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_RCC_OscConfig+0x66c>)
 80018dc:	4910      	ldr	r1, [pc, #64]	@ (8001920 <HAL_RCC_OscConfig+0x68c>)
 80018de:	400a      	ands	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f81b 	bl	800091c <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ea:	e01b      	b.n	8001924 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f816 	bl	800091c <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d914      	bls.n	8001924 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e083      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	40021000 	.word	0x40021000
 8001904:	fffffeff 	.word	0xfffffeff
 8001908:	40007000 	.word	0x40007000
 800190c:	fffffbff 	.word	0xfffffbff
 8001910:	00001388 	.word	0x00001388
 8001914:	efffffff 	.word	0xefffffff
 8001918:	40010000 	.word	0x40010000
 800191c:	ffffdfff 	.word	0xffffdfff
 8001920:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001924:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	049b      	lsls	r3, r3, #18
 800192c:	4013      	ands	r3, r2
 800192e:	d1dd      	bne.n	80018ec <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a37      	ldr	r2, [pc, #220]	@ (8001a14 <HAL_RCC_OscConfig+0x780>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001948:	431a      	orrs	r2, r3
 800194a:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 800194c:	430a      	orrs	r2, r1
 800194e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001950:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	0449      	lsls	r1, r1, #17
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7fe ffdd 	bl	800091c <HAL_GetTick>
 8001962:	0003      	movs	r3, r0
 8001964:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7fe ffd8 	bl	800091c <HAL_GetTick>
 800196c:	0002      	movs	r2, r0
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e045      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	049b      	lsls	r3, r3, #18
 8001982:	4013      	ands	r3, r2
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x6d4>
 8001986:	e03d      	b.n	8001a04 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 800198e:	4922      	ldr	r1, [pc, #136]	@ (8001a18 <HAL_RCC_OscConfig+0x784>)
 8001990:	400a      	ands	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7fe ffc2 	bl	800091c <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7fe ffbd 	bl	800091c <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e02a      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	049b      	lsls	r3, r3, #18
 80019b8:	4013      	ands	r3, r2
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x70a>
 80019bc:	e022      	b.n	8001a04 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e01d      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_RCC_OscConfig+0x77c>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10f      	bne.n	8001a00 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	23f0      	movs	r3, #240	@ 0xf0
 80019e4:	039b      	lsls	r3, r3, #14
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019f0:	69fa      	ldr	r2, [r7, #28]
 80019f2:	23c0      	movs	r3, #192	@ 0xc0
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	401a      	ands	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b00a      	add	sp, #40	@ 0x28
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	40021000 	.word	0x40021000
 8001a14:	ff02ffff 	.word	0xff02ffff
 8001a18:	feffffff 	.word	0xfeffffff

08001a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e128      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b96      	ldr	r3, [pc, #600]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2201      	movs	r2, #1
 8001a36:	4013      	ands	r3, r2
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d91e      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b93      	ldr	r3, [pc, #588]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4393      	bics	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	4b90      	ldr	r3, [pc, #576]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a50:	f7fe ff64 	bl	800091c <HAL_GetTick>
 8001a54:	0003      	movs	r3, r0
 8001a56:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a58:	e009      	b.n	8001a6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5a:	f7fe ff5f 	bl	800091c <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	4a8a      	ldr	r2, [pc, #552]	@ (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e109      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b87      	ldr	r3, [pc, #540]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1ee      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2202      	movs	r2, #2
 8001a82:	4013      	ands	r3, r2
 8001a84:	d009      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a86:	4b83      	ldr	r3, [pc, #524]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	22f0      	movs	r2, #240	@ 0xf0
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b7f      	ldr	r3, [pc, #508]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x8a>
 8001aa4:	e089      	b.n	8001bba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aae:	4b79      	ldr	r3, [pc, #484]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	029b      	lsls	r3, r3, #10
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d120      	bne.n	8001afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0e1      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac6:	4b73      	ldr	r3, [pc, #460]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	049b      	lsls	r3, r3, #18
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d114      	bne.n	8001afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0d5      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d106      	bne.n	8001aec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ade:	4b6d      	ldr	r3, [pc, #436]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2204      	movs	r2, #4
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0ca      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aec:	4b69      	ldr	r3, [pc, #420]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0c2      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afc:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4393      	bics	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4b62      	ldr	r3, [pc, #392]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b10:	f7fe ff04 	bl	800091c <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d111      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	e009      	b.n	8001b36 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b22:	f7fe fefb 	bl	800091c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	4a58      	ldr	r2, [pc, #352]	@ (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e0a5      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b36:	4b57      	ldr	r3, [pc, #348]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d1ef      	bne.n	8001b22 <HAL_RCC_ClockConfig+0x106>
 8001b42:	e03a      	b.n	8001bba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d111      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b4c:	e009      	b.n	8001b62 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4e:	f7fe fee5 	bl	800091c <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4a4d      	ldr	r2, [pc, #308]	@ (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e08f      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b62:	4b4c      	ldr	r3, [pc, #304]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	220c      	movs	r2, #12
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d1ef      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x132>
 8001b6e:	e024      	b.n	8001bba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11b      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7a:	f7fe fecf 	bl	800091c <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	4a42      	ldr	r2, [pc, #264]	@ (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e079      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	220c      	movs	r2, #12
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d1ef      	bne.n	8001b7a <HAL_RCC_ClockConfig+0x15e>
 8001b9a:	e00e      	b.n	8001bba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe febe 	bl	800091c <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e068      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bb0:	4b38      	ldr	r3, [pc, #224]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bba:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d21e      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc8:	4b30      	ldr	r3, [pc, #192]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4393      	bics	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bda:	f7fe fe9f 	bl	800091c <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	e009      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7fe fe9a 	bl	800091c <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	4a28      	ldr	r2, [pc, #160]	@ (8001c90 <HAL_RCC_ClockConfig+0x274>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e044      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf8:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <HAL_RCC_ClockConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d1ee      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a20      	ldr	r2, [pc, #128]	@ (8001c98 <HAL_RCC_ClockConfig+0x27c>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	0019      	movs	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68da      	ldr	r2, [r3, #12]
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2208      	movs	r2, #8
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d00a      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a1a      	ldr	r2, [pc, #104]	@ (8001c9c <HAL_RCC_ClockConfig+0x280>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	00da      	lsls	r2, r3, #3
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c44:	f000 f832 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c48:	0001      	movs	r1, r0
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_RCC_ClockConfig+0x278>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	220f      	movs	r2, #15
 8001c52:	4013      	ands	r3, r2
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_RCC_ClockConfig+0x284>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	000a      	movs	r2, r1
 8001c5a:	40da      	lsrs	r2, r3
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HAL_RCC_ClockConfig+0x288>)
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_RCC_ClockConfig+0x28c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	250b      	movs	r5, #11
 8001c66:	197c      	adds	r4, r7, r5
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7fe fe11 	bl	8000890 <HAL_InitTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c72:	197b      	adds	r3, r7, r5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c7a:	197b      	adds	r3, r7, r5
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bdb0      	pop	{r4, r5, r7, pc}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	00001388 	.word	0x00001388
 8001c94:	40021000 	.word	0x40021000
 8001c98:	fffff8ff 	.word	0xfffff8ff
 8001c9c:	ffffc7ff 	.word	0xffffc7ff
 8001ca0:	080031a4 	.word	0x080031a4
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	220c      	movs	r2, #12
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d013      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x3e>
 8001cc2:	d85c      	bhi.n	8001d7e <HAL_RCC_GetSysClockFreq+0xd2>
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d002      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x22>
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d00b      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x38>
 8001ccc:	e057      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cce:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d002      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001cd8:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cda:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001cdc:	e05d      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001cde:	4b33      	ldr	r3, [pc, #204]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x100>)
 8001ce0:	613b      	str	r3, [r7, #16]
      break;
 8001ce2:	e05a      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce4:	4b32      	ldr	r3, [pc, #200]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ce6:	613b      	str	r3, [r7, #16]
      break;
 8001ce8:	e057      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	220f      	movs	r2, #15
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	4a30      	ldr	r2, [pc, #192]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf4:	5cd3      	ldrb	r3, [r2, r3]
 8001cf6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	0d9b      	lsrs	r3, r3, #22
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4013      	ands	r3, r2
 8001d00:	3301      	adds	r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d04:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d00f      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	000a      	movs	r2, r1
 8001d14:	0152      	lsls	r2, r2, #5
 8001d16:	1a52      	subs	r2, r2, r1
 8001d18:	0193      	lsls	r3, r2, #6
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	185b      	adds	r3, r3, r1
 8001d20:	025b      	lsls	r3, r3, #9
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7fe f9ef 	bl	8000108 <__udivsi3>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e023      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d30:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2210      	movs	r2, #16
 8001d36:	4013      	ands	r3, r2
 8001d38:	d00f      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001d3a:	68b9      	ldr	r1, [r7, #8]
 8001d3c:	000a      	movs	r2, r1
 8001d3e:	0152      	lsls	r2, r2, #5
 8001d40:	1a52      	subs	r2, r2, r1
 8001d42:	0193      	lsls	r3, r2, #6
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	185b      	adds	r3, r3, r1
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7fe f9da 	bl	8000108 <__udivsi3>
 8001d54:	0003      	movs	r3, r0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e00e      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	0152      	lsls	r2, r2, #5
 8001d60:	1a52      	subs	r2, r2, r1
 8001d62:	0193      	lsls	r3, r2, #6
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	185b      	adds	r3, r3, r1
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7fe f9ca 	bl	8000108 <__udivsi3>
 8001d74:	0003      	movs	r3, r0
 8001d76:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
      break;
 8001d7c:	e00d      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0b5b      	lsrs	r3, r3, #13
 8001d84:	2207      	movs	r2, #7
 8001d86:	4013      	ands	r3, r2
 8001d88:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	0212      	lsls	r2, r2, #8
 8001d92:	409a      	lsls	r2, r3
 8001d94:	0013      	movs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
      break;
 8001d98:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d9a:	693b      	ldr	r3, [r7, #16]
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b006      	add	sp, #24
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	003d0900 	.word	0x003d0900
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	080031b4 	.word	0x080031b4

08001db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e083      	b.n	8001ed2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	2382      	movs	r3, #130	@ 0x82
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d009      	beq.n	8001df2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
 8001de4:	e005      	b.n	8001df2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2251      	movs	r2, #81	@ 0x51
 8001dfc:	5c9b      	ldrb	r3, [r3, r2]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d107      	bne.n	8001e14 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2250      	movs	r2, #80	@ 0x50
 8001e08:	2100      	movs	r1, #0
 8001e0a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7fe fbe2 	bl	80005d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2251      	movs	r2, #81	@ 0x51
 8001e18:	2102      	movs	r1, #2
 8001e1a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2140      	movs	r1, #64	@ 0x40
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	2382      	movs	r3, #130	@ 0x82
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	401a      	ands	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	2384      	movs	r3, #132	@ 0x84
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68d9      	ldr	r1, [r3, #12]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	2102      	movs	r1, #2
 8001e54:	400b      	ands	r3, r1
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	400b      	ands	r3, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6999      	ldr	r1, [r3, #24]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2138      	movs	r1, #56	@ 0x38
 8001e74:	400b      	ands	r3, r1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	0011      	movs	r1, r2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4907      	ldr	r1, [pc, #28]	@ (8001edc <HAL_SPI_Init+0x124>)
 8001ebe:	400a      	ands	r2, r1
 8001ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2251      	movs	r2, #81	@ 0x51
 8001ecc:	2101      	movs	r1, #1
 8001ece:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	fffff7ff 	.word	0xfffff7ff

08001ee0 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	1dbb      	adds	r3, r7, #6
 8001eee:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ef0:	f7fe fd14 	bl	800091c <HAL_GetTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001ef8:	231a      	movs	r3, #26
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	1dba      	adds	r2, r7, #6
 8001efe:	8812      	ldrh	r2, [r2, #0]
 8001f00:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2251      	movs	r2, #81	@ 0x51
 8001f06:	5c9b      	ldrb	r3, [r3, r2]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e132      	b.n	8002178 <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_SPI_Transmit+0x40>
 8001f18:	1dbb      	adds	r3, r7, #6
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e129      	b.n	8002178 <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2250      	movs	r2, #80	@ 0x50
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_SPI_Transmit+0x52>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e122      	b.n	8002178 <HAL_SPI_Transmit+0x298>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2250      	movs	r2, #80	@ 0x50
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2251      	movs	r2, #81	@ 0x51
 8001f3e:	2103      	movs	r1, #3
 8001f40:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1dba      	adds	r2, r7, #6
 8001f52:	8812      	ldrh	r2, [r2, #0]
 8001f54:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1dba      	adds	r2, r7, #6
 8001f5a:	8812      	ldrh	r2, [r2, #0]
 8001f5c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	2380      	movs	r3, #128	@ 0x80
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d110      	bne.n	8001faa <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2140      	movs	r1, #64	@ 0x40
 8001f94:	438a      	bics	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2180      	movs	r1, #128	@ 0x80
 8001fa4:	01c9      	lsls	r1, r1, #7
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2240      	movs	r2, #64	@ 0x40
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	d007      	beq.n	8001fc8 <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2140      	movs	r1, #64	@ 0x40
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d153      	bne.n	800207c <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_SPI_Transmit+0x106>
 8001fdc:	231a      	movs	r3, #26
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d144      	bne.n	8002070 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	881a      	ldrh	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	1c9a      	adds	r2, r3, #2
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800200a:	e031      	b.n	8002070 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d112      	bne.n	8002040 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	881a      	ldrh	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	1c9a      	adds	r2, r3, #2
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800203e:	e017      	b.n	8002070 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002040:	f7fe fc6c 	bl	800091c <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d802      	bhi.n	8002056 <HAL_SPI_Transmit+0x176>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	d102      	bne.n	800205c <HAL_SPI_Transmit+0x17c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2251      	movs	r2, #81	@ 0x51
 8002060:	2101      	movs	r1, #1
 8002062:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2250      	movs	r2, #80	@ 0x50
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e083      	b.n	8002178 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1c8      	bne.n	800200c <HAL_SPI_Transmit+0x12c>
 800207a:	e054      	b.n	8002126 <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_SPI_Transmit+0x1ae>
 8002084:	231a      	movs	r3, #26
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d146      	bne.n	800211c <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	330c      	adds	r3, #12
 8002098:	7812      	ldrb	r2, [r2, #0]
 800209a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020b4:	e032      	b.n	800211c <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2202      	movs	r2, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d113      	bne.n	80020ec <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020ea:	e017      	b.n	800211c <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020ec:	f7fe fc16 	bl	800091c <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d802      	bhi.n	8002102 <HAL_SPI_Transmit+0x222>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_SPI_Transmit+0x228>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2251      	movs	r2, #81	@ 0x51
 800210c:	2101      	movs	r1, #1
 800210e:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2250      	movs	r2, #80	@ 0x50
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e02d      	b.n	8002178 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1c7      	bne.n	80020b6 <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	0018      	movs	r0, r3
 800212e:	f000 fd1d 	bl	8002b6c <SPI_EndRxTxTransaction>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d002      	beq.n	800213c <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2251      	movs	r2, #81	@ 0x51
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2250      	movs	r2, #80	@ 0x50
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 8002176:	2300      	movs	r3, #0
  }
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b008      	add	sp, #32
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	801a      	strh	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2251      	movs	r2, #81	@ 0x51
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d001      	beq.n	80021a0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	e10a      	b.n	80023b6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_SPI_Receive+0x2e>
 80021a6:	1dbb      	adds	r3, r7, #6
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_SPI_Receive+0x32>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e101      	b.n	80023b6 <HAL_SPI_Receive+0x236>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	2382      	movs	r3, #130	@ 0x82
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d113      	bne.n	80021e6 <HAL_SPI_Receive+0x66>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_SPI_Receive+0x66>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2251      	movs	r2, #81	@ 0x51
 80021ca:	2104      	movs	r1, #4
 80021cc:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021ce:	1dbb      	adds	r3, r7, #6
 80021d0:	881c      	ldrh	r4, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	0023      	movs	r3, r4
 80021de:	f000 f8f1 	bl	80023c4 <HAL_SPI_TransmitReceive>
 80021e2:	0003      	movs	r3, r0
 80021e4:	e0e7      	b.n	80023b6 <HAL_SPI_Receive+0x236>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021e6:	f7fe fb99 	bl	800091c <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2250      	movs	r2, #80	@ 0x50
 80021f2:	5c9b      	ldrb	r3, [r3, r2]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_SPI_Receive+0x7c>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e0dc      	b.n	80023b6 <HAL_SPI_Receive+0x236>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2250      	movs	r2, #80	@ 0x50
 8002200:	2101      	movs	r1, #1
 8002202:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2251      	movs	r2, #81	@ 0x51
 8002208:	2104      	movs	r1, #4
 800220a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1dba      	adds	r2, r7, #6
 8002224:	8812      	ldrh	r2, [r2, #0]
 8002226:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	429a      	cmp	r2, r3
 8002250:	d10f      	bne.n	8002272 <HAL_SPI_Receive+0xf2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2140      	movs	r1, #64	@ 0x40
 800225e:	438a      	bics	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4954      	ldr	r1, [pc, #336]	@ (80023c0 <HAL_SPI_Receive+0x240>)
 800226e:	400a      	ands	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2240      	movs	r2, #64	@ 0x40
 800227a:	4013      	ands	r3, r2
 800227c:	2b40      	cmp	r3, #64	@ 0x40
 800227e:	d007      	beq.n	8002290 <HAL_SPI_Receive+0x110>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2140      	movs	r1, #64	@ 0x40
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d000      	beq.n	800229a <HAL_SPI_Receive+0x11a>
 8002298:	e06e      	b.n	8002378 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800229a:	e034      	b.n	8002306 <HAL_SPI_Receive+0x186>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d115      	bne.n	80022d6 <HAL_SPI_Receive+0x156>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	001a      	movs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80022d4:	e017      	b.n	8002306 <HAL_SPI_Receive+0x186>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d6:	f7fe fb21 	bl	800091c <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d802      	bhi.n	80022ec <HAL_SPI_Receive+0x16c>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	d102      	bne.n	80022f2 <HAL_SPI_Receive+0x172>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_SPI_Receive+0x186>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2251      	movs	r2, #81	@ 0x51
 80022f6:	2101      	movs	r1, #1
 80022f8:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2250      	movs	r2, #80	@ 0x50
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e057      	b.n	80023b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1c5      	bne.n	800229c <HAL_SPI_Receive+0x11c>
 8002310:	e037      	b.n	8002382 <HAL_SPI_Receive+0x202>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	4013      	ands	r3, r2
 800231c:	2b01      	cmp	r3, #1
 800231e:	d113      	bne.n	8002348 <HAL_SPI_Receive+0x1c8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	b292      	uxth	r2, r2
 800232c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	1c9a      	adds	r2, r3, #2
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002346:	e017      	b.n	8002378 <HAL_SPI_Receive+0x1f8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002348:	f7fe fae8 	bl	800091c <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d802      	bhi.n	800235e <HAL_SPI_Receive+0x1de>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	d102      	bne.n	8002364 <HAL_SPI_Receive+0x1e4>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_SPI_Receive+0x1f8>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2251      	movs	r2, #81	@ 0x51
 8002368:	2101      	movs	r1, #1
 800236a:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2250      	movs	r2, #80	@ 0x50
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e01e      	b.n	80023b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1c7      	bne.n	8002312 <HAL_SPI_Receive+0x192>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 fb85 	bl	8002a98 <SPI_EndRxTransaction>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_Receive+0x218>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2251      	movs	r2, #81	@ 0x51
 800239c:	2101      	movs	r1, #1
 800239e:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2250      	movs	r2, #80	@ 0x50
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_SPI_Receive+0x234>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_SPI_Receive+0x236>
  }
  else
  {
    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
  }
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b007      	add	sp, #28
 80023bc:	bd90      	pop	{r4, r7, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	ffffbfff 	.word	0xffffbfff

080023c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	001a      	movs	r2, r3
 80023d2:	1cbb      	adds	r3, r7, #2
 80023d4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023d6:	2301      	movs	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023da:	f7fe fa9f 	bl	800091c <HAL_GetTick>
 80023de:	0003      	movs	r3, r0
 80023e0:	623b      	str	r3, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023e2:	201f      	movs	r0, #31
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	2151      	movs	r1, #81	@ 0x51
 80023ea:	5c52      	ldrb	r2, [r2, r1]
 80023ec:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80023f4:	2316      	movs	r3, #22
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	1cba      	adds	r2, r7, #2
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023fe:	183b      	adds	r3, r7, r0
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d00e      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x60>
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	2382      	movs	r3, #130	@ 0x82
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x5c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d103      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x5c>
 8002418:	183b      	adds	r3, r7, r0
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d001      	beq.n	8002424 <HAL_SPI_TransmitReceive+0x60>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
 8002422:	e18a      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_SPI_TransmitReceive+0x74>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_SPI_TransmitReceive+0x74>
 8002430:	1cbb      	adds	r3, r7, #2
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_SPI_TransmitReceive+0x78>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e17e      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2250      	movs	r2, #80	@ 0x50
 8002440:	5c9b      	ldrb	r3, [r3, r2]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_SPI_TransmitReceive+0x86>
 8002446:	2302      	movs	r3, #2
 8002448:	e177      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2250      	movs	r2, #80	@ 0x50
 800244e:	2101      	movs	r1, #1
 8002450:	5499      	strb	r1, [r3, r2]

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2251      	movs	r2, #81	@ 0x51
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b04      	cmp	r3, #4
 800245c:	d003      	beq.n	8002466 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2251      	movs	r2, #81	@ 0x51
 8002462:	2105      	movs	r1, #5
 8002464:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1cba      	adds	r2, r7, #2
 8002476:	8812      	ldrh	r2, [r2, #0]
 8002478:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1cba      	adds	r2, r7, #2
 800247e:	8812      	ldrh	r2, [r2, #0]
 8002480:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1cba      	adds	r2, r7, #2
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1cba      	adds	r2, r7, #2
 8002494:	8812      	ldrh	r2, [r2, #0]
 8002496:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2240      	movs	r2, #64	@ 0x40
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b40      	cmp	r3, #64	@ 0x40
 80024b0:	d007      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2140      	movs	r1, #64	@ 0x40
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	2380      	movs	r3, #128	@ 0x80
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d000      	beq.n	80024d0 <HAL_SPI_TransmitReceive+0x10c>
 80024ce:	e080      	b.n	80025d2 <HAL_SPI_TransmitReceive+0x20e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x120>
 80024d8:	2316      	movs	r3, #22
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d000      	beq.n	80024e4 <HAL_SPI_TransmitReceive+0x120>
 80024e2:	e06b      	b.n	80025bc <HAL_SPI_TransmitReceive+0x1f8>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	881a      	ldrh	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	1c9a      	adds	r2, r3, #2
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002508:	e058      	b.n	80025bc <HAL_SPI_TransmitReceive+0x1f8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2202      	movs	r2, #2
 8002512:	4013      	ands	r3, r2
 8002514:	2b02      	cmp	r3, #2
 8002516:	d11b      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x18c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x18c>
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	2b01      	cmp	r3, #1
 8002526:	d113      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x18c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	1c9a      	adds	r2, r3, #2
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2201      	movs	r2, #1
 8002558:	4013      	ands	r3, r2
 800255a:	2b01      	cmp	r3, #1
 800255c:	d119      	bne.n	8002592 <HAL_SPI_TransmitReceive+0x1ce>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d014      	beq.n	8002592 <HAL_SPI_TransmitReceive+0x1ce>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	b292      	uxth	r2, r2
 8002574:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257a:	1c9a      	adds	r2, r3, #2
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800258e:	2301      	movs	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002592:	f7fe f9c3 	bl	800091c <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800259e:	429a      	cmp	r2, r3
 80025a0:	d80c      	bhi.n	80025bc <HAL_SPI_TransmitReceive+0x1f8>
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	3301      	adds	r3, #1
 80025a6:	d009      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x1f8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2251      	movs	r2, #81	@ 0x51
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2250      	movs	r2, #80	@ 0x50
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e0be      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1a1      	bne.n	800250a <HAL_SPI_TransmitReceive+0x146>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d19c      	bne.n	800250a <HAL_SPI_TransmitReceive+0x146>
 80025d0:	e084      	b.n	80026dc <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0x222>
 80025da:	2316      	movs	r3, #22
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d000      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0x222>
 80025e4:	e070      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	7812      	ldrb	r2, [r2, #0]
 80025f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800260c:	e05c      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2202      	movs	r2, #2
 8002616:	4013      	ands	r3, r2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d11c      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x292>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002620:	b29b      	uxth	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d017      	beq.n	8002656 <HAL_SPI_TransmitReceive+0x292>
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	2b01      	cmp	r3, #1
 800262a:	d114      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x292>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	2b01      	cmp	r3, #1
 8002662:	d119      	bne.n	8002698 <HAL_SPI_TransmitReceive+0x2d4>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d014      	beq.n	8002698 <HAL_SPI_TransmitReceive+0x2d4>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002694:	2301      	movs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002698:	f7fe f940 	bl	800091c <HAL_GetTick>
 800269c:	0002      	movs	r2, r0
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d802      	bhi.n	80026ae <HAL_SPI_TransmitReceive+0x2ea>
 80026a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026aa:	3301      	adds	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x2f0>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x304>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2251      	movs	r2, #81	@ 0x51
 80026b8:	2101      	movs	r1, #1
 80026ba:	5499      	strb	r1, [r3, r2]
        __HAL_UNLOCK(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2250      	movs	r2, #80	@ 0x50
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e038      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d19d      	bne.n	800260e <HAL_SPI_TransmitReceive+0x24a>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d198      	bne.n	800260e <HAL_SPI_TransmitReceive+0x24a>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026dc:	6a3a      	ldr	r2, [r7, #32]
 80026de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 fa42 	bl	8002b6c <SPI_EndRxTxTransaction>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d008      	beq.n	80026fe <HAL_SPI_TransmitReceive+0x33a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2250      	movs	r2, #80	@ 0x50
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e01d      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2251      	movs	r2, #81	@ 0x51
 8002720:	2101      	movs	r1, #1
 8002722:	5499      	strb	r1, [r3, r2]
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2250      	movs	r2, #80	@ 0x50
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x374>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_SPI_TransmitReceive+0x376>
  }
  else
  {
    return HAL_OK;
 8002738:	2300      	movs	r3, #0
  }
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b00a      	add	sp, #40	@ 0x28
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	001a      	movs	r2, r3
 8002762:	2301      	movs	r3, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d10f      	bne.n	8002788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2201      	movs	r2, #1
 800276c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800276e:	d00b      	beq.n	8002788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	099b      	lsrs	r3, r3, #6
 8002774:	001a      	movs	r2, r3
 8002776:	2301      	movs	r3, #1
 8002778:	4013      	ands	r3, r2
 800277a:	d005      	beq.n	8002788 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	0010      	movs	r0, r2
 8002784:	4798      	blx	r3
    return;
 8002786:	e0d5      	b.n	8002934 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	001a      	movs	r2, r3
 800278e:	2301      	movs	r3, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d00b      	beq.n	80027ac <HAL_SPI_IRQHandler+0x68>
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	09db      	lsrs	r3, r3, #7
 8002798:	001a      	movs	r2, r3
 800279a:	2301      	movs	r3, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d005      	beq.n	80027ac <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	0010      	movs	r0, r2
 80027a8:	4798      	blx	r3
    return;
 80027aa:	e0c3      	b.n	8002934 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	001a      	movs	r2, r3
 80027b2:	2301      	movs	r3, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	d10c      	bne.n	80027d2 <HAL_SPI_IRQHandler+0x8e>
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	001a      	movs	r2, r3
 80027be:	2301      	movs	r3, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	d106      	bne.n	80027d2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	001a      	movs	r2, r3
 80027ca:	2301      	movs	r3, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d100      	bne.n	80027d2 <HAL_SPI_IRQHandler+0x8e>
 80027d0:	e0b0      	b.n	8002934 <HAL_SPI_IRQHandler+0x1f0>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	001a      	movs	r2, r3
 80027d8:	2301      	movs	r3, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	d100      	bne.n	80027e0 <HAL_SPI_IRQHandler+0x9c>
 80027de:	e0a9      	b.n	8002934 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	099b      	lsrs	r3, r3, #6
 80027e4:	001a      	movs	r2, r3
 80027e6:	2301      	movs	r3, #1
 80027e8:	4013      	ands	r3, r2
 80027ea:	d023      	beq.n	8002834 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2251      	movs	r2, #81	@ 0x51
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d011      	beq.n	800281c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	2204      	movs	r2, #4
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	e00b      	b.n	8002834 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	613b      	str	r3, [r7, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	693b      	ldr	r3, [r7, #16]
        return;
 8002832:	e07f      	b.n	8002934 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	001a      	movs	r2, r3
 800283a:	2301      	movs	r3, #1
 800283c:	4013      	ands	r3, r2
 800283e:	d014      	beq.n	800286a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	2201      	movs	r2, #1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2140      	movs	r1, #64	@ 0x40
 8002864:	438a      	bics	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	001a      	movs	r2, r3
 8002870:	2301      	movs	r3, #1
 8002872:	4013      	ands	r3, r2
 8002874:	d00c      	beq.n	8002890 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	2208      	movs	r2, #8
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	2b00      	cmp	r3, #0
 8002896:	d04c      	beq.n	8002932 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	21e0      	movs	r1, #224	@ 0xe0
 80028a4:	438a      	bics	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2251      	movs	r2, #81	@ 0x51
 80028ac:	2101      	movs	r1, #1
 80028ae:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2202      	movs	r2, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d103      	bne.n	80028c0 <HAL_SPI_IRQHandler+0x17c>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d032      	beq.n	8002926 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2103      	movs	r1, #3
 80028cc:	438a      	bics	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d010      	beq.n	80028fa <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028dc:	4a17      	ldr	r2, [pc, #92]	@ (800293c <HAL_SPI_IRQHandler+0x1f8>)
 80028de:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe f979 	bl	8000bdc <HAL_DMA_Abort_IT>
 80028ea:	1e03      	subs	r3, r0, #0
 80028ec:	d005      	beq.n	80028fa <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	2240      	movs	r2, #64	@ 0x40
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002906:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <HAL_SPI_IRQHandler+0x1f8>)
 8002908:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800290e:	0018      	movs	r0, r3
 8002910:	f7fe f964 	bl	8000bdc <HAL_DMA_Abort_IT>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d00b      	beq.n	8002930 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	2240      	movs	r2, #64	@ 0x40
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002924:	e004      	b.n	8002930 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0018      	movs	r0, r3
 800292a:	f000 f809 	bl	8002940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800292e:	e000      	b.n	8002932 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002930:	46c0      	nop			@ (mov r8, r8)
    return;
 8002932:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002934:	46bd      	mov	sp, r7
 8002936:	b008      	add	sp, #32
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	08002951 	.word	0x08002951

08002940 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ffe7 	bl	8002940 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b088      	sub	sp, #32
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	1dfb      	adds	r3, r7, #7
 800298a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800298c:	f7fd ffc6 	bl	800091c <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	18d3      	adds	r3, r2, r3
 800299a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800299c:	f7fd ffbe 	bl	800091c <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002a90 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	015b      	lsls	r3, r3, #5
 80029aa:	0d1b      	lsrs	r3, r3, #20
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	4353      	muls	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029b2:	e059      	b.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	d056      	beq.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029ba:	f7fd ffaf 	bl	800091c <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d902      	bls.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d142      	bne.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	21e0      	movs	r1, #224	@ 0xe0
 80029dc:	438a      	bics	r2, r1
 80029de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2382      	movs	r3, #130	@ 0x82
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d113      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x98>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d005      	beq.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d107      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	438a      	bics	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d110      	bne.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	491a      	ldr	r1, [pc, #104]	@ (8002a94 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	0189      	lsls	r1, r1, #6
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2251      	movs	r2, #81	@ 0x51
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2250      	movs	r2, #80	@ 0x50
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e018      	b.n	8002a88 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	e002      	b.n	8002a68 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	425a      	negs	r2, r3
 8002a78:	4153      	adcs	r3, r2
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d196      	bne.n	80029b4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b008      	add	sp, #32
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000000 	.word	0x20000000
 8002a94:	ffffdfff 	.word	0xffffdfff

08002a98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	2382      	movs	r3, #130	@ 0x82
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d113      	bne.n	8002ad8 <SPI_EndRxTransaction+0x40>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d005      	beq.n	8002ac8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2140      	movs	r1, #64	@ 0x40
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	2382      	movs	r3, #130	@ 0x82
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d12b      	bne.n	8002b3c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d012      	beq.n	8002b16 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	0013      	movs	r3, r2
 8002afa:	2200      	movs	r2, #0
 8002afc:	2180      	movs	r1, #128	@ 0x80
 8002afe:	f7ff ff3d 	bl	800297c <SPI_WaitFlagStateUntilTimeout>
 8002b02:	1e03      	subs	r3, r0, #0
 8002b04:	d02d      	beq.n	8002b62 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e026      	b.n	8002b64 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	0013      	movs	r3, r2
 8002b20:	2200      	movs	r2, #0
 8002b22:	2101      	movs	r1, #1
 8002b24:	f7ff ff2a 	bl	800297c <SPI_WaitFlagStateUntilTimeout>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d01a      	beq.n	8002b62 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b30:	2220      	movs	r2, #32
 8002b32:	431a      	orrs	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e013      	b.n	8002b64 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	0013      	movs	r3, r2
 8002b46:	2200      	movs	r2, #0
 8002b48:	2101      	movs	r1, #1
 8002b4a:	f7ff ff17 	bl	800297c <SPI_WaitFlagStateUntilTimeout>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d007      	beq.n	8002b62 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b56:	2220      	movs	r2, #32
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e000      	b.n	8002b64 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	0013      	movs	r3, r2
 8002b82:	2201      	movs	r2, #1
 8002b84:	2102      	movs	r1, #2
 8002b86:	f7ff fef9 	bl	800297c <SPI_WaitFlagStateUntilTimeout>
 8002b8a:	1e03      	subs	r3, r0, #0
 8002b8c:	d007      	beq.n	8002b9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b92:	2220      	movs	r2, #32
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e037      	b.n	8002c0e <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <SPI_EndRxTxTransaction+0xac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	491e      	ldr	r1, [pc, #120]	@ (8002c1c <SPI_EndRxTxTransaction+0xb0>)
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fd faaf 	bl	8000108 <__udivsi3>
 8002baa:	0003      	movs	r3, r0
 8002bac:	001a      	movs	r2, r3
 8002bae:	0013      	movs	r3, r2
 8002bb0:	015b      	lsls	r3, r3, #5
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	2382      	movs	r3, #130	@ 0x82
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d112      	bne.n	8002bee <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	0013      	movs	r3, r2
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2180      	movs	r1, #128	@ 0x80
 8002bd6:	f7ff fed1 	bl	800297c <SPI_WaitFlagStateUntilTimeout>
 8002bda:	1e03      	subs	r3, r0, #0
 8002bdc:	d016      	beq.n	8002c0c <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	2220      	movs	r2, #32
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e00f      	b.n	8002c0e <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2280      	movs	r2, #128	@ 0x80
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b80      	cmp	r3, #128	@ 0x80
 8002c06:	d0f2      	beq.n	8002bee <SPI_EndRxTxTransaction+0x82>
 8002c08:	e000      	b.n	8002c0c <SPI_EndRxTxTransaction+0xa0>
        break;
 8002c0a:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	0018      	movs	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			@ (mov r8, r8)
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	016e3600 	.word	0x016e3600

08002c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e032      	b.n	8002c98 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2239      	movs	r2, #57	@ 0x39
 8002c36:	5c9b      	ldrb	r3, [r3, r2]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2238      	movs	r2, #56	@ 0x38
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7fd fd6d 	bl	8000728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2239      	movs	r2, #57	@ 0x39
 8002c52:	2102      	movs	r1, #2
 8002c54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	0019      	movs	r1, r3
 8002c60:	0010      	movs	r0, r2
 8002c62:	f000 f911 	bl	8002e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	223e      	movs	r2, #62	@ 0x3e
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	223a      	movs	r2, #58	@ 0x3a
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	223b      	movs	r2, #59	@ 0x3b
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	223c      	movs	r2, #60	@ 0x3c
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223d      	movs	r2, #61	@ 0x3d
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2239      	movs	r2, #57	@ 0x39
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	0018      	movs	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d021      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d01d      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	4252      	negs	r2, r2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2203      	movs	r2, #3
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f8b6 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e007      	b.n	8002cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 f8a9 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f8b5 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d022      	beq.n	8002d52 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d01e      	beq.n	8002d52 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2205      	movs	r2, #5
 8002d1a:	4252      	negs	r2, r2
 8002d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2202      	movs	r2, #2
 8002d22:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	23c0      	movs	r3, #192	@ 0xc0
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f88f 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002d3a:	e007      	b.n	8002d4c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f882 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 f88e 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2208      	movs	r2, #8
 8002d56:	4013      	ands	r3, r2
 8002d58:	d021      	beq.n	8002d9e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2209      	movs	r2, #9
 8002d68:	4252      	negs	r2, r2
 8002d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d004      	beq.n	8002d88 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f869 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002d86:	e007      	b.n	8002d98 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f000 f85c 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 f868 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2210      	movs	r2, #16
 8002da2:	4013      	ands	r3, r2
 8002da4:	d022      	beq.n	8002dec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2210      	movs	r2, #16
 8002daa:	4013      	ands	r3, r2
 8002dac:	d01e      	beq.n	8002dec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2211      	movs	r2, #17
 8002db4:	4252      	negs	r2, r2
 8002db6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	23c0      	movs	r3, #192	@ 0xc0
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 f842 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e007      	b.n	8002de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 f835 	bl	8002e48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f000 f841 	bl	8002e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4013      	ands	r3, r2
 8002df2:	d00c      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d008      	beq.n	8002e0e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2202      	movs	r2, #2
 8002e02:	4252      	negs	r2, r2
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f815 	bl	8002e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2240      	movs	r2, #64	@ 0x40
 8002e12:	4013      	ands	r3, r2
 8002e14:	d00c      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2240      	movs	r2, #64	@ 0x40
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d008      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2241      	movs	r2, #65	@ 0x41
 8002e24:	4252      	negs	r2, r2
 8002e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 f824 	bl	8002e78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e30:	46c0      	nop			@ (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e40:	46c0      	nop			@ (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b002      	add	sp, #8
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b002      	add	sp, #8
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b002      	add	sp, #8
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	05db      	lsls	r3, r3, #23
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d007      	beq.n	8002eb2 <TIM_Base_SetConfig+0x2a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <TIM_Base_SetConfig+0xa8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d003      	beq.n	8002eb2 <TIM_Base_SetConfig+0x2a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <TIM_Base_SetConfig+0xac>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d108      	bne.n	8002ec4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2270      	movs	r2, #112	@ 0x70
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	05db      	lsls	r3, r3, #23
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d007      	beq.n	8002ede <TIM_Base_SetConfig+0x56>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a17      	ldr	r2, [pc, #92]	@ (8002f30 <TIM_Base_SetConfig+0xa8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_Base_SetConfig+0x56>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	@ (8002f34 <TIM_Base_SetConfig+0xac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d108      	bne.n	8002ef0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a15      	ldr	r2, [pc, #84]	@ (8002f38 <TIM_Base_SetConfig+0xb0>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2204      	movs	r2, #4
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	601a      	str	r2, [r3, #0]
}
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b004      	add	sp, #16
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40010800 	.word	0x40010800
 8002f34:	40011400 	.word	0x40011400
 8002f38:	fffffcff 	.word	0xfffffcff

08002f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2238      	movs	r2, #56	@ 0x38
 8002f4a:	5c9b      	ldrb	r3, [r3, r2]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e042      	b.n	8002fda <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2238      	movs	r2, #56	@ 0x38
 8002f58:	2101      	movs	r1, #1
 8002f5a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2239      	movs	r2, #57	@ 0x39
 8002f60:	2102      	movs	r1, #2
 8002f62:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2270      	movs	r2, #112	@ 0x70
 8002f78:	4393      	bics	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	05db      	lsls	r3, r3, #23
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d009      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10c      	bne.n	8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2280      	movs	r2, #128	@ 0x80
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2239      	movs	r2, #57	@ 0x39
 8002fcc:	2101      	movs	r1, #1
 8002fce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2238      	movs	r2, #56	@ 0x38
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40011400 	.word	0x40011400

08002fec <lis3mdl_get_who_am_i>:
 *
 * @retval WHO_AM_I_REG default value (0x3D) if successful
 * @retval -ERROR_code if something goes wrong
 */

int lis3mdl_get_who_am_i(LIS3MDL_Comm_Interface_t comm_interface){
 8002fec:	b084      	sub	sp, #16
 8002fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff0:	b089      	sub	sp, #36	@ 0x24
 8002ff2:	af06      	add	r7, sp, #24
 8002ff4:	2520      	movs	r5, #32
 8002ff6:	197c      	adds	r4, r7, r5
 8002ff8:	6020      	str	r0, [r4, #0]
 8002ffa:	6061      	str	r1, [r4, #4]
 8002ffc:	60a2      	str	r2, [r4, #8]
 8002ffe:	60e3      	str	r3, [r4, #12]
	uint8_t tx = WHO_AM_I_REG_ADDR;
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	220f      	movs	r2, #15
 8003004:	701a      	strb	r2, [r3, #0]
	uint8_t rx;
	LIS3MDL_Status_t ret;

	ret = lis3mdl_read_byte(comm_interface, &tx, &rx);
 8003006:	1dfc      	adds	r4, r7, #7
 8003008:	197b      	adds	r3, r7, r5
 800300a:	1d7a      	adds	r2, r7, #5
 800300c:	9204      	str	r2, [sp, #16]
 800300e:	1dba      	adds	r2, r7, #6
 8003010:	9203      	str	r2, [sp, #12]
 8003012:	466a      	mov	r2, sp
 8003014:	0011      	movs	r1, r2
 8003016:	001a      	movs	r2, r3
 8003018:	3210      	adds	r2, #16
 800301a:	ca61      	ldmia	r2!, {r0, r5, r6}
 800301c:	c161      	stmia	r1!, {r0, r5, r6}
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f000 f813 	bl	8003050 <lis3mdl_read_byte>
 800302a:	0003      	movs	r3, r0
 800302c:	7023      	strb	r3, [r4, #0]
	if (ret != LIS3MDL_OK)
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <lis3mdl_get_who_am_i+0x52>
		return -ret;
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	425b      	negs	r3, r3
 800303c:	e001      	b.n	8003042 <lis3mdl_get_who_am_i+0x56>

	return (int)rx;
 800303e:	1d7b      	adds	r3, r7, #5
 8003040:	781b      	ldrb	r3, [r3, #0]
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b003      	add	sp, #12
 8003048:	bcf0      	pop	{r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	b004      	add	sp, #16
 800304e:	4718      	bx	r3

08003050 <lis3mdl_read_byte>:
 *
 * @note reg_addr must have two MSBs empty (0)
 */


LIS3MDL_Status_t lis3mdl_read_byte(LIS3MDL_Comm_Interface_t comm_interface, uint8_t *reg_addr, uint8_t *data){
 8003050:	b084      	sub	sp, #16
 8003052:	b5b0      	push	{r4, r5, r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	2418      	movs	r4, #24
 800305a:	193c      	adds	r4, r7, r4
 800305c:	6020      	str	r0, [r4, #0]
 800305e:	6061      	str	r1, [r4, #4]
 8003060:	60a2      	str	r2, [r4, #8]
 8003062:	60e3      	str	r3, [r4, #12]
	LIS3MDL_Status_t ret;
	uint8_t tx;

	// Make sure user sends reg_addr that consists only of 6 Lower bits
	if((*reg_addr & LIS3MDL_READ_BIT) == LIS3MDL_READ_BIT || (*reg_addr & LIS3MDL_MD_BIT) == LIS3MDL_MD_BIT)
 8003064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b25b      	sxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	db05      	blt.n	800307a <lis3mdl_read_byte+0x2a>
 800306e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	001a      	movs	r2, r3
 8003074:	2340      	movs	r3, #64	@ 0x40
 8003076:	4013      	ands	r3, r2
 8003078:	d001      	beq.n	800307e <lis3mdl_read_byte+0x2e>
		return LIS3MDL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e045      	b.n	800310a <lis3mdl_read_byte+0xba>

	tx = *reg_addr | LIS3MDL_READ_BIT;
 800307e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2280      	movs	r2, #128	@ 0x80
 8003084:	4252      	negs	r2, r2
 8003086:	4313      	orrs	r3, r2
 8003088:	b2da      	uxtb	r2, r3
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	701a      	strb	r2, [r3, #0]

	// Pulling CS low
	comm_interface.gpio_write(comm_interface.cs_gpio_port_handle, comm_interface.cs_pin, 0);
 800308e:	2518      	movs	r5, #24
 8003090:	197b      	adds	r3, r7, r5
 8003092:	699c      	ldr	r4, [r3, #24]
 8003094:	197b      	adds	r3, r7, r5
 8003096:	6858      	ldr	r0, [r3, #4]
 8003098:	197b      	adds	r3, r7, r5
 800309a:	891b      	ldrh	r3, [r3, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	0019      	movs	r1, r3
 80030a0:	47a0      	blx	r4

	// Writing reg_addr with READ bit on and MD off
	ret = comm_interface.spi_transmit(comm_interface.spi_handle, &tx, 1, comm_interface.spi_timeout_ms);
 80030a2:	002a      	movs	r2, r5
 80030a4:	18bb      	adds	r3, r7, r2
 80030a6:	68dd      	ldr	r5, [r3, #12]
 80030a8:	18bb      	adds	r3, r7, r2
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	18bb      	adds	r3, r7, r2
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	1dfc      	adds	r4, r7, #7
 80030b2:	1db9      	adds	r1, r7, #6
 80030b4:	2201      	movs	r2, #1
 80030b6:	47a8      	blx	r5
 80030b8:	0003      	movs	r3, r0
 80030ba:	7023      	strb	r3, [r4, #0]
	if (ret != 0)
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <lis3mdl_read_byte+0x7a>
		return ret;
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	e01f      	b.n	800310a <lis3mdl_read_byte+0xba>

	// Reading byte
	ret = comm_interface.spi_receive(comm_interface.spi_handle, data, 1, comm_interface.spi_timeout_ms);
 80030ca:	2218      	movs	r2, #24
 80030cc:	18bb      	adds	r3, r7, r2
 80030ce:	691d      	ldr	r5, [r3, #16]
 80030d0:	18bb      	adds	r3, r7, r2
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	18bb      	adds	r3, r7, r2
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	1dfc      	adds	r4, r7, #7
 80030da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030dc:	2201      	movs	r2, #1
 80030de:	47a8      	blx	r5
 80030e0:	0003      	movs	r3, r0
 80030e2:	7023      	strb	r3, [r4, #0]
	if (ret != 0)
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <lis3mdl_read_byte+0xa2>
		return ret;
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	e00b      	b.n	800310a <lis3mdl_read_byte+0xba>

	// Pulling CS high
	comm_interface.gpio_write(comm_interface.cs_gpio_port_handle, comm_interface.cs_pin, 1);
 80030f2:	2218      	movs	r2, #24
 80030f4:	18bb      	adds	r3, r7, r2
 80030f6:	699c      	ldr	r4, [r3, #24]
 80030f8:	18bb      	adds	r3, r7, r2
 80030fa:	6858      	ldr	r0, [r3, #4]
 80030fc:	18bb      	adds	r3, r7, r2
 80030fe:	891b      	ldrh	r3, [r3, #8]
 8003100:	2201      	movs	r2, #1
 8003102:	0019      	movs	r1, r3
 8003104:	47a0      	blx	r4

	return ret;
 8003106:	1dfb      	adds	r3, r7, #7
 8003108:	781b      	ldrb	r3, [r3, #0]
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	b002      	add	sp, #8
 8003110:	bcb0      	pop	{r4, r5, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	b004      	add	sp, #16
 8003116:	4718      	bx	r3

08003118 <memset>:
 8003118:	0003      	movs	r3, r0
 800311a:	1882      	adds	r2, r0, r2
 800311c:	4293      	cmp	r3, r2
 800311e:	d100      	bne.n	8003122 <memset+0xa>
 8003120:	4770      	bx	lr
 8003122:	7019      	strb	r1, [r3, #0]
 8003124:	3301      	adds	r3, #1
 8003126:	e7f9      	b.n	800311c <memset+0x4>

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	2600      	movs	r6, #0
 800312c:	4c0c      	ldr	r4, [pc, #48]	@ (8003160 <__libc_init_array+0x38>)
 800312e:	4d0d      	ldr	r5, [pc, #52]	@ (8003164 <__libc_init_array+0x3c>)
 8003130:	1b64      	subs	r4, r4, r5
 8003132:	10a4      	asrs	r4, r4, #2
 8003134:	42a6      	cmp	r6, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	2600      	movs	r6, #0
 800313a:	f000 f819 	bl	8003170 <_init>
 800313e:	4c0a      	ldr	r4, [pc, #40]	@ (8003168 <__libc_init_array+0x40>)
 8003140:	4d0a      	ldr	r5, [pc, #40]	@ (800316c <__libc_init_array+0x44>)
 8003142:	1b64      	subs	r4, r4, r5
 8003144:	10a4      	asrs	r4, r4, #2
 8003146:	42a6      	cmp	r6, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	00b3      	lsls	r3, r6, #2
 800314e:	58eb      	ldr	r3, [r5, r3]
 8003150:	4798      	blx	r3
 8003152:	3601      	adds	r6, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	00b3      	lsls	r3, r6, #2
 8003158:	58eb      	ldr	r3, [r5, r3]
 800315a:	4798      	blx	r3
 800315c:	3601      	adds	r6, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	080031c0 	.word	0x080031c0
 8003164:	080031c0 	.word	0x080031c0
 8003168:	080031c4 	.word	0x080031c4
 800316c:	080031c0 	.word	0x080031c0

08003170 <_init>:
 8003170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003176:	bc08      	pop	{r3}
 8003178:	469e      	mov	lr, r3
 800317a:	4770      	bx	lr

0800317c <_fini>:
 800317c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003182:	bc08      	pop	{r3}
 8003184:	469e      	mov	lr, r3
 8003186:	4770      	bx	lr
